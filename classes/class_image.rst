:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Image.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Image:

Image
=====

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

图像数据类型。

描述
----

本地图像数据类型。包含可转换为 :ref:`ImageTexture<class_ImageTexture>` 的图像数据，并提供常用的\ *图像处理*\ 方法。 ``Image`` 的最大宽度和高度是 :ref:`MAX_WIDTH<class_Image_constant_MAX_WIDTH>` 和 :ref:`MAX_HEIGHT<class_Image_constant_MAX_HEIGHT>`\ 。

\ ``Image`` 不能直接分配给对象的 ``texture`` 属性，例如 :ref:`Sprite<class_Sprite>`\ ，必须先手动转换为 :ref:`ImageTexture<class_ImageTexture>`\ 。

\ **注意：**\ 由于图形硬件限制，最大图像尺寸为 16384×16384 像素。较大的图像可能无法导入。

教程
----

- :doc:`Importing images <../tutorials/assets_pipeline/importing_images>`

属性
----

+-------------------------------------+----------------------------------------+------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`data<class_Image_property_data>` | ``{"data": PoolByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}`` |
+-------------------------------------+----------------------------------------+------------------------------------------------------------------------------------------+

方法
----

+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blend_rect<class_Image_method_blend_rect>` **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blend_rect_mask<class_Image_method_blend_rect_mask>` **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                      |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blit_rect<class_Image_method_blit_rect>` **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blit_rect_mask<class_Image_method_blit_rect_mask>` **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                        |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`bumpmap_to_normalmap<class_Image_method_bumpmap_to_normalmap>` **(** :ref:`float<class_float>` bump_scale=1.0 **)**                                                                                                                                        |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`clear_mipmaps<class_Image_method_clear_mipmaps>` **(** **)**                                                                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`compress<class_Image_method_compress>` **(** :ref:`CompressMode<enum_Image_CompressMode>` mode, :ref:`CompressSource<enum_Image_CompressSource>` source, :ref:`float<class_float>` lossy_quality **)**                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`convert<class_Image_method_convert>` **(** :ref:`Format<enum_Image_Format>` format **)**                                                                                                                                                                   |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`copy_from<class_Image_method_copy_from>` **(** :ref:`Image<class_Image>` src **)**                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`create<class_Image_method_create>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format **)**                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`create_from_data<class_Image_method_create_from_data>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format, :ref:`PoolByteArray<class_PoolByteArray>` data **)** |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`crop<class_Image_method_crop>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height **)**                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`decompress<class_Image_method_decompress>` **(** **)**                                                                                                                                                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AlphaMode<enum_Image_AlphaMode>`    | :ref:`detect_alpha<class_Image_method_detect_alpha>` **(** **)** |const|                                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`expand_x2_hq2x<class_Image_method_expand_x2_hq2x>` **(** **)**                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fill<class_Image_method_fill>` **(** :ref:`Color<class_Color>` color **)**                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fill_rect<class_Image_method_fill_rect>` **(** :ref:`Rect2<class_Rect2>` rect, :ref:`Color<class_Color>` color **)**                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fix_alpha_edges<class_Image_method_fix_alpha_edges>` **(** **)**                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`flip_x<class_Image_method_flip_x>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`flip_y<class_Image_method_flip_y>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>` **(** :ref:`bool<class_bool>` renormalize=false **)**                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`get_data<class_Image_method_get_data>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Format<enum_Image_Format>`          | :ref:`get_format<class_Image_method_get_format>` **(** **)** |const|                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_height<class_Image_method_get_height>` **(** **)** |const|                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_mipmap_offset<class_Image_method_get_mipmap_offset>` **(** :ref:`int<class_int>` mipmap **)** |const|                                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                 | :ref:`get_pixel<class_Image_method_get_pixel>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|                                                                                                                                              |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                 | :ref:`get_pixelv<class_Image_method_get_pixelv>` **(** :ref:`Vector2<class_Vector2>` src **)** |const|                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`                 | :ref:`get_rect<class_Image_method_get_rect>` **(** :ref:`Rect2<class_Rect2>` rect **)** |const|                                                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`             | :ref:`get_size<class_Image_method_get_size>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                 | :ref:`get_used_rect<class_Image_method_get_used_rect>` **(** **)** |const|                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_width<class_Image_method_get_width>` **(** **)** |const|                                                                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`has_mipmaps<class_Image_method_has_mipmaps>` **(** **)** |const|                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_compressed<class_Image_method_is_compressed>` **(** **)** |const|                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_empty<class_Image_method_is_empty>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_invisible<class_Image_method_is_invisible>` **(** **)** |const|                                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load<class_Image_method_load>` **(** :ref:`String<class_String>` path **)**                                                                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_bmp_from_buffer<class_Image_method_load_bmp_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_jpg_from_buffer<class_Image_method_load_jpg_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_png_from_buffer<class_Image_method_load_png_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_tga_from_buffer<class_Image_method_load_tga_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_webp_from_buffer<class_Image_method_load_webp_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                              |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`lock<class_Image_method_lock>` **(** **)**                                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`normalmap_to_xy<class_Image_method_normalmap_to_xy>` **(** **)**                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`premultiply_alpha<class_Image_method_premultiply_alpha>` **(** **)**                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`resize<class_Image_method_resize>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**                                                                                   |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`resize_to_po2<class_Image_method_resize_to_po2>` **(** :ref:`bool<class_bool>` square=false, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**                                                                                          |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`                 | :ref:`rgbe_to_srgb<class_Image_method_rgbe_to_srgb>` **(** **)**                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`save_exr<class_Image_method_save_exr>` **(** :ref:`String<class_String>` path, :ref:`bool<class_bool>` grayscale=false **)** |const|                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`save_png<class_Image_method_save_png>` **(** :ref:`String<class_String>` path **)** |const|                                                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`save_png_to_buffer<class_Image_method_save_png_to_buffer>` **(** **)** |const|                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_pixel<class_Image_method_set_pixel>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`Color<class_Color>` color **)**                                                                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_pixelv<class_Image_method_set_pixelv>` **(** :ref:`Vector2<class_Vector2>` dst, :ref:`Color<class_Color>` color **)**                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`shrink_x2<class_Image_method_shrink_x2>` **(** **)**                                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`srgb_to_linear<class_Image_method_srgb_to_linear>` **(** **)**                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`unlock<class_Image_method_unlock>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Image_Format:

.. _class_Image_constant_FORMAT_L8:

.. _class_Image_constant_FORMAT_LA8:

.. _class_Image_constant_FORMAT_R8:

.. _class_Image_constant_FORMAT_RG8:

.. _class_Image_constant_FORMAT_RGB8:

.. _class_Image_constant_FORMAT_RGBA8:

.. _class_Image_constant_FORMAT_RGBA4444:

.. _class_Image_constant_FORMAT_RGBA5551:

.. _class_Image_constant_FORMAT_RF:

.. _class_Image_constant_FORMAT_RGF:

.. _class_Image_constant_FORMAT_RGBF:

.. _class_Image_constant_FORMAT_RGBAF:

.. _class_Image_constant_FORMAT_RH:

.. _class_Image_constant_FORMAT_RGH:

.. _class_Image_constant_FORMAT_RGBH:

.. _class_Image_constant_FORMAT_RGBAH:

.. _class_Image_constant_FORMAT_RGBE9995:

.. _class_Image_constant_FORMAT_DXT1:

.. _class_Image_constant_FORMAT_DXT3:

.. _class_Image_constant_FORMAT_DXT5:

.. _class_Image_constant_FORMAT_RGTC_R:

.. _class_Image_constant_FORMAT_RGTC_RG:

.. _class_Image_constant_FORMAT_BPTC_RGBA:

.. _class_Image_constant_FORMAT_BPTC_RGBF:

.. _class_Image_constant_FORMAT_BPTC_RGBFU:

.. _class_Image_constant_FORMAT_PVRTC2:

.. _class_Image_constant_FORMAT_PVRTC2A:

.. _class_Image_constant_FORMAT_PVRTC4:

.. _class_Image_constant_FORMAT_PVRTC4A:

.. _class_Image_constant_FORMAT_ETC:

.. _class_Image_constant_FORMAT_ETC2_R11:

.. _class_Image_constant_FORMAT_ETC2_R11S:

.. _class_Image_constant_FORMAT_ETC2_RG11:

.. _class_Image_constant_FORMAT_ETC2_RG11S:

.. _class_Image_constant_FORMAT_ETC2_RGB8:

.. _class_Image_constant_FORMAT_ETC2_RGBA8:

.. _class_Image_constant_FORMAT_ETC2_RGB8A1:

.. _class_Image_constant_FORMAT_MAX:

enum **Format**:

- **FORMAT_L8** = **0** --- 纹理格式，具有代表亮度的单一8位深度。

- **FORMAT_LA8** = **1** --- OpenGL 纹理格式，具有两个值，亮度和 alpha，每个值以 8 位存储。

- **FORMAT_R8** = **2** --- OpenGL 纹理格式 ``RED``\ ，具有单个分量和 8 位深度。

\ **注意：** 当使用 GLES2 后端时，它使用 alpha 通道而不是红色通道进行存储。

- **FORMAT_RG8** = **3** --- OpenGL 纹理格式 ``RG``\ ，具有两个部分，每个部分的位深度为 8。

- **FORMAT_RGB8** = **4** --- OpenGL 纹理格式 ``RGB`` 具有三个部分，每个分量部分的位深度为 8。

\ **注意：**\ 创建 :ref:`ImageTexture<class_ImageTexture>` 时，会执行sRGB到线性色彩空间的转换。

- **FORMAT_RGBA8** = **5** --- OpenGL 纹理格式 ``RGBA`` 有四个部分，每个分量部分的位深度为 8。

\ **注意：**\ 创建 :ref:`ImageTexture<class_ImageTexture>` 时，会执行sRGB到线性色彩空间的转换。

- **FORMAT_RGBA4444** = **6** --- OpenGL 纹理格式 ``RGBA`` 有四个部分，每个分量部分的位深度为 4。

- **FORMAT_RGBA5551** = **7** --- OpenGL纹理格式\ ``GL_RGB5_A1``\ ，其中RGB每个分量的深度为5位，alpha为1位。

- **FORMAT_RF** = **8** --- OpenGL 纹理格式 ``GL_R32F``\ ，其中有一个分量，是32 位浮点值。

- **FORMAT_RGF** = **9** --- OpenGL 纹理格式 ``GL_RG32F`` 这里有两个部分，每个部分是一个 32 位浮点值。

- **FORMAT_RGBF** = **10** --- OpenGL纹理格式\ ``GL_RGB32F``\ ，其中有三个部分，每个部分都是32位浮点值。

- **FORMAT_RGBAF** = **11** --- OpenGL纹理格式\ ``GL_RGBA32F``\ ，其中有四个部分，每个部分都是32位浮点值。

- **FORMAT_RH** = **12** --- OpenGL纹理格式\ ``GL_R32F``\ ，其中有一个分量，即16位 "半精度 "浮点值。

- **FORMAT_RGH** = **13** --- OpenGL纹理格式\ ``GL_RG32F``\ ，其中有两个部分，每个部分都是16位 "半精度 "浮点值。

- **FORMAT_RGBH** = **14** --- OpenGL纹理格式\ ``GL_RGB32F``\ ，其中有三个部分，每个部分都是16位 "半精度 "浮点值。

- **FORMAT_RGBAH** = **15** --- OpenGL纹理格式\ ``GL_RGBA32F``\ ，其中有四个部分，每个都是16位"半精度 "浮点值。

- **FORMAT_RGBE9995** = **16** --- 一种特殊的OpenGL纹理格式，其中三个颜色成分的精度为9位，所有三个成分共享一个5比特位的指数。

- **FORMAT_DXT1** = **17** --- `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__ 纹理格式使用块压缩1,并且是S3TC的最小变化,仅提供1位的alpha和颜色数据 预乘以alpha.

\ **注意：**\ 创建 ImageTexture 时，将执行 sRGB 到线性色彩空间的转换。

- **FORMAT_DXT3** = **18** --- 使用块压缩2的\ `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__\ 贴图格式,并且颜色数据被解析为没有与alpha预先相乘.非常适用于具有 半透明和不透明区域之间的清晰的alpha过渡.

\ **注意:**\ 创建ImageTexture时,将执行sRGB到线性色彩空间的转换.

- **FORMAT_DXT5** = **19** --- `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__ 纹理格式也称为块压缩3或BC3,其中包含64位的alpha通道数据,后跟64位的DXT1编码 颜色数据:颜色数据不会与DXT3预先乘以alpha.与DXT3相比,DXT5对于透明渐变通常会产生更好的结果.

\ **注意：**\ 创建 ImageTexture 时，将执行 sRGB 到线性色彩空间的转换。

- **FORMAT_RGTC_R** = **20** --- 使用 `红绿贴图压缩 <https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression>`__\ 的贴图格式,使用与DXT5用于alpha通道相同的压缩算法对红色通道数据进行归一化.

- **FORMAT_RGTC_RG** = **21** --- 使用 `红绿贴图压缩 <https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression>`__\ 的贴图格式,使用与DXT5用于alpha的压缩算法相同的红绿数据通道.

- **FORMAT_BPTC_RGBA** = **22** --- 使用 `BPTC压缩 <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ 和无符号归一化RGBA分量的贴图格式.

\ **注意:**\ 创建\ :ref:`ImageTexture<class_ImageTexture>`\ 时,将执行sRGB到线性色彩空间的转换.

- **FORMAT_BPTC_RGBF** = **23** --- 使用 `BPTC <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ 压缩和有符号浮点RGB分量的贴图格式.

- **FORMAT_BPTC_RGBFU** = **24** --- 使用\ `BPTC <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ 压缩和无符号浮点RGB分量的贴图格式.

- **FORMAT_PVRTC2** = **25** --- PowerVR支持的移动平台上使用的贴图格式,使用2位颜色深度,没有alpha.更多信息可以在 `这里 <https://en.wikipedia.org/wiki/PVRTC>`__\ 找到.

\ **注意：**\ 在创建ImageTexture时,会进行sRGB到线性色彩空间的转换.

- **FORMAT_PVRTC2A** = **26** --- 与 `PVRTC2 <https://en.wikipedia.org/wiki/PVRTC>`__\ 相同,但带有alpha组件.

- **FORMAT_PVRTC4** = **27** --- 与 `PVRTC2 <https://en.wikipedia.org/wiki/PVRTC>`__\ 相似,但具有4位色深且没有Alpha通道.

- **FORMAT_PVRTC4A** = **28** --- 与 `PVRTC4 <https://en.wikipedia.org/wiki/PVRTC>`__\ 相同,但带有alpha组件.

- **FORMAT_ETC** = **29** --- `Ericsson纹理压缩格式1 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1>`__,又称 "ETC1",是OpenGL ES图形标准的一部分.这种格式不能存储alpha通道.

- **FORMAT_ETC2_R11** = **30** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``R11_EACvariant``),它提供一个无符号数据通道.

- **FORMAT_ETC2_R11S** = **31** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__\ (``SIGNED_R11_EACvariant``),它提供一个通道的有符号数据.

- **FORMAT_ETC2_RG11** = **32** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__\ (``RG11_EAC`` variant),它提供一个无符号数据通道.

- **FORMAT_ETC2_RG11S** = **33** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__\ (``SIGNED_RG11_EAC`` 变体)，它提供两个通道的有符号数据。

- **FORMAT_ETC2_RGB8** = **34** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``RGB8`` 变体),它是ETC1的后续版本,可压缩RGB888数据.

\ **注意：**\ 创建\ :ref:`ImageTexture<class_ImageTexture>`\ 时,会进行sRGB到线性色彩空间的转换.

- **FORMAT_ETC2_RGBA8** = **35** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__\ (``RGBA8`` 变体),它可以压缩RGBA8888数据,完全支持alpha.

\ **注意：**\ 在创建\ :ref:`ImageTexture<class_ImageTexture>`\ 时,会进行sRGB到线性色彩空间的转换.

- **FORMAT_ETC2_RGB8A1** = **36** --- `Ericsson纹理压缩格式2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__\ (``RGB8_PUNCHTHROUGH_ALPHA1`` 变体),它可以压缩RGBA数据,使alpha完全透明或完全不透明.

\ **注意：** 创建\ :ref:`ImageTexture<class_ImageTexture>`\ 时,会进行sRGB到线性色彩空间的转换.

- **FORMAT_MAX** = **37** --- 表示 :ref:`Format<enum_Image_Format>` 枚举的大小。

----

.. _enum_Image_Interpolation:

.. _class_Image_constant_INTERPOLATE_NEAREST:

.. _class_Image_constant_INTERPOLATE_BILINEAR:

.. _class_Image_constant_INTERPOLATE_CUBIC:

.. _class_Image_constant_INTERPOLATE_TRILINEAR:

.. _class_Image_constant_INTERPOLATE_LANCZOS:

enum **Interpolation**:

- **INTERPOLATE_NEAREST** = **0** --- 执行最近邻插值.如果调整图像大小,它将被像素化.

- **INTERPOLATE_BILINEAR** = **1** --- 执行双线性插值。如果调整图像大小，则图像将模糊。此模式比 :ref:`INTERPOLATE_CUBIC<class_Image_constant_INTERPOLATE_CUBIC>` 更快，但质量较低。

- **INTERPOLATE_CUBIC** = **2** --- 执行三次插值.如果调整图像大小,则图像将模糊.与\ :ref:`INTERPOLATE_BILINEAR<class_Image_constant_INTERPOLATE_BILINEAR>`\ 相比,此模式通常会产生更好的结果,但代价是速度较慢.

- **INTERPOLATE_TRILINEAR** = **3** --- 在两个最适合的多级渐远纹理级别上分别执行双线性采样，然后在采样结果之间进行线性插值。

它比 :ref:`INTERPOLATE_BILINEAR<class_Image_constant_INTERPOLATE_BILINEAR>` 慢，但能产生更高质量的效果，减少锯齿伪影。

如果图像没有多级渐远纹理，它们将被生成并在内部使用，但不会在生成的图像之上生成多级渐远纹理。

\ **注意：**\ 如果你打算缩放原始图像的多个副本，最好事先对其调用 :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`\ ，以避免在生成它们时反复浪费处理能力。

另一方面，如果图像已经有了多级渐远纹理，其将被使用，并为生成的图像生成新的一组。

- **INTERPOLATE_LANCZOS** = **4** --- 执行Lanczos插值.这是最慢的图像调整大小模式,但通常可以提供最佳效果,尤其是在缩小图像时.

----

.. _enum_Image_AlphaMode:

.. _class_Image_constant_ALPHA_NONE:

.. _class_Image_constant_ALPHA_BIT:

.. _class_Image_constant_ALPHA_BLEND:

enum **AlphaMode**:

- **ALPHA_NONE** = **0** --- 图片没有Alpha通道.

- **ALPHA_BIT** = **1** --- 图像将Alpha存储在单个bit中.

- **ALPHA_BLEND** = **2** --- 图像使用阿尔法。

----

.. _enum_Image_CompressMode:

.. _class_Image_constant_COMPRESS_S3TC:

.. _class_Image_constant_COMPRESS_PVRTC2:

.. _class_Image_constant_COMPRESS_PVRTC4:

.. _class_Image_constant_COMPRESS_ETC:

.. _class_Image_constant_COMPRESS_ETC2:

enum **CompressMode**:

- **COMPRESS_S3TC** = **0** --- 使用S3TC压缩。

- **COMPRESS_PVRTC2** = **1** --- 使用PVRTC2压缩。

- **COMPRESS_PVRTC4** = **2** --- 使用PVRTC4压缩。

- **COMPRESS_ETC** = **3** --- 使用ETC压缩。

- **COMPRESS_ETC2** = **4** --- 使用 ETC2 压缩。

----

.. _enum_Image_CompressSource:

.. _class_Image_constant_COMPRESS_SOURCE_GENERIC:

.. _class_Image_constant_COMPRESS_SOURCE_SRGB:

.. _class_Image_constant_COMPRESS_SOURCE_NORMAL:

enum **CompressSource**:

- **COMPRESS_SOURCE_GENERIC** = **0** --- 原始纹理（在压缩前）是常规纹理。所有纹理的默认值。

- **COMPRESS_SOURCE_SRGB** = **1** --- 原始纹理（在压缩前）使用 sRGB 空间。

- **COMPRESS_SOURCE_NORMAL** = **2** --- 原始纹理（在压缩前）是法线纹理（例如，可以压缩为两个通道）。

常量
----

.. _class_Image_constant_MAX_WIDTH:

.. _class_Image_constant_MAX_HEIGHT:

- **MAX_WIDTH** = **16384** --- ``Image`` 资源允许的最大宽度。

- **MAX_HEIGHT** = **16384** --- ``Image`` 资源允许的最大高度。

属性说明
--------

.. _class_Image_property_data:

- :ref:`Dictionary<class_Dictionary>` **data**

+-----------+------------------------------------------------------------------------------------------+
| *Default* | ``{"data": PoolByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}`` |
+-----------+------------------------------------------------------------------------------------------+

以给定的格式保存图像的所有颜色数据。参阅\ :ref:`Format<enum_Image_Format>`\ 常量。

方法说明
--------

.. _class_Image_method_blend_rect:

- void **blend_rect** **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

将 ``src_rect`` 从 ``src`` 图像与坐标 ``dest`` 处的该图像进行 Alpha 混合。

----

.. _class_Image_method_blend_rect_mask:

- void **blend_rect_mask** **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

从坐标\ ``dst``\ 处开始,对\ ``src_rect``\ 截取区域的\ ``src``\ 源图像使用\ ``mask``\ 图像进行Alpha混合到此图像。\ ``src``\ 和\ ``mask``\ 都需要Alpha通道。如果相应的遮罩(mask)像素的Alpha不是0，在坐标\ ``dst``\ 处的像素和\ ``src``\ 像素将会混合。\ ``src``\ 图像和\ ``mask``\ 图像\ **必须**\ 有相同的尺寸，即宽度和高度，但它们可以有不同的格式。

----

.. _class_Image_method_blit_rect:

- void **blit_rect** **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

将指定\ ``src``\ 源图像按\ ``dst``\ 为起点坐标，以 ``src_rect`` 为矩形截取区域复制到此图像中。

----

.. _class_Image_method_blit_rect_mask:

- void **blit_rect_mask** **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

将指定\ ``src``\ 源图像按\ ``dst``\ 为起点坐标，以 ``src_rect`` 为矩形截取区域复制到此图像中。如果对应的\ ``mask``\ 像素的alpha值不是0，\ ``src``\ 像素将被复制到\ ``dst``\ 上。\ ``src`` 图像和 ``mask`` ] 图像 **必须** 具有相同的尺寸（宽度和高度），但它们可以具有不同的格式。

----

.. _class_Image_method_bumpmap_to_normalmap:

- void **bumpmap_to_normalmap** **(** :ref:`float<class_float>` bump_scale=1.0 **)**

将凹凸贴图转换为法线贴图。凹凸贴图提供每个像素的高度偏移，而法线贴图提供每个像素的法线方向。

----

.. _class_Image_method_clear_mipmaps:

- void **clear_mipmaps** **(** **)**

删除图像的多级渐远纹理。

----

.. _class_Image_method_compress:

- :ref:`Error<enum_@GlobalScope_Error>` **compress** **(** :ref:`CompressMode<enum_Image_CompressMode>` mode, :ref:`CompressSource<enum_Image_CompressSource>` source, :ref:`float<class_float>` lossy_quality **)**

压缩图像以减少内存的使用。当图像被压缩时，不能直接访问像素数据。如果选择的压缩模式不可用，则返回错误。参阅 :ref:`CompressMode<enum_Image_CompressMode>` 和 :ref:`CompressSource<enum_Image_CompressSource>` 常量。

----

.. _class_Image_method_convert:

- void **convert** **(** :ref:`Format<enum_Image_Format>` format **)**

转换图像的格式。参阅\ :ref:`Format<enum_Image_Format>`\ 常量。

----

.. _class_Image_method_copy_from:

- void **copy_from** **(** :ref:`Image<class_Image>` src **)**

将\ ``src``\ 图像复制到此图像。

----

.. _class_Image_method_create:

- void **create** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format **)**

创建一个给定大小和格式的空图像。见 :ref:`Format<enum_Image_Format>` 常量。\ ``use_mipmaps`` 为 ``true`` 时会为这个图像生成多级渐远纹理。请参阅 :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`\ 。

----

.. _class_Image_method_create_from_data:

- void **create_from_data** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format, :ref:`PoolByteArray<class_PoolByteArray>` data **)**

创建一个给定大小和格式的新图像。参阅 :ref:`Format<enum_Image_Format>` 常量。用给定的原始数据填充图像。\ ``use_mipmaps`` 为 ``true`` 时会为该图像从 ``data`` 加载多级渐远纹理。请参阅 :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`\ 。

----

.. _class_Image_method_crop:

- void **crop** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height **)**

将图像裁剪成给定的\ ``width``\ 和\ ``height``\ 。如果指定的尺寸大于当前尺寸，多余的区域将被填充为黑色像素。

----

.. _class_Image_method_decompress:

- :ref:`Error<enum_@GlobalScope_Error>` **decompress** **(** **)**

如果图像被压缩，则解压缩图像。如果解压缩功能不可用，则返回错误。

----

.. _class_Image_method_detect_alpha:

- :ref:`AlphaMode<enum_Image_AlphaMode>` **detect_alpha** **(** **)** |const|

如果图像有alpha值的数据，则返回\ :ref:`ALPHA_BLEND<class_Image_constant_ALPHA_BLEND>`\ 。如果所有的alpha值都存储在一个位上，则返回\ :ref:`ALPHA_BIT<class_Image_constant_ALPHA_BIT>`\ 。如果没有找到alpha值的数据，则返回\ :ref:`ALPHA_NONE<class_Image_constant_ALPHA_NONE>`\ 。

----

.. _class_Image_method_expand_x2_hq2x:

- void **expand_x2_hq2x** **(** **)**

拉伸图像并将其放大2倍，不进行插值。

----

.. _class_Image_method_fill:

- void **fill** **(** :ref:`Color<class_Color>` color **)**

Fills the image with ``color``.

----

.. _class_Image_method_fill_rect:

- void **fill_rect** **(** :ref:`Rect2<class_Rect2>` rect, :ref:`Color<class_Color>` color **)**

Fills ``rect`` with ``color``.

----

.. _class_Image_method_fix_alpha_edges:

- void **fix_alpha_edges** **(** **)**

将低透明度(alpha)像素与附近像素混合。

----

.. _class_Image_method_flip_x:

- void **flip_x** **(** **)**

水平翻转图像。

----

.. _class_Image_method_flip_y:

- void **flip_y** **(** **)**

垂直翻转图像。

----

.. _class_Image_method_generate_mipmaps:

- :ref:`Error<enum_@GlobalScope_Error>` **generate_mipmaps** **(** :ref:`bool<class_bool>` renormalize=false **)**

为图像生成多级渐远纹理。多级渐远纹理是预先计算好的图像的低分辨率副本，如果图像在渲染时需要缩小，就会自动使用。其有助于提高图像质量和渲染时的性能。如果图像被压缩，或采用自定义格式，或图像的宽度或高度为 ``0``\ ，则此方法返回错误。

\ **注意：**\ 多级渐远纹理的生成是在 CPU 上完成的，是单线程的，并且\ *总是*\ 在主线程上完成。这意味着在游戏过程中生成多级渐远纹理会导致明显的卡顿，即使从 :ref:`Thread<class_Thread>` 调用\ :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`\ 。

----

.. _class_Image_method_get_data:

- :ref:`PoolByteArray<class_PoolByteArray>` **get_data** **(** **)** |const|

返回图像原始数据的副本。

----

.. _class_Image_method_get_format:

- :ref:`Format<enum_Image_Format>` **get_format** **(** **)** |const|

返回图像的格式。参阅 :ref:`Format<enum_Image_Format>` 常量。

----

.. _class_Image_method_get_height:

- :ref:`int<class_int>` **get_height** **(** **)** |const|

返回图像的高度。

----

.. _class_Image_method_get_mipmap_offset:

- :ref:`int<class_int>` **get_mipmap_offset** **(** :ref:`int<class_int>` mipmap **)** |const|

返回存储在图像 ``data`` 字典中索引为 ``mipmap`` 的偏移量。

----

.. _class_Image_method_get_pixel:

- :ref:`Color<class_Color>` **get_pixel** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|

如果图像被锁定，则返回 ``(x, y)`` 处像素的颜色。如果图像被解锁，它总是返回 ``(0, 0, 0, 1.0)`` 值的 :ref:`Color<class_Color>`\ 。这与 :ref:`get_pixelv<class_Image_method_get_pixelv>` 相同，但有两个整数参数而不是 Vector2 参数。

----

.. _class_Image_method_get_pixelv:

- :ref:`Color<class_Color>` **get_pixelv** **(** :ref:`Vector2<class_Vector2>` src **)** |const|

如果图像已锁定，返回 ``src`` 处的像素的颜色。如果图像未被锁定，它总是返回值为 ``(0, 0, 0, 1.0)`` 的 :ref:`Color<class_Color>`\ 。这与 :ref:`get_pixel<class_Image_method_get_pixel>` 相同，只是用一个 Vector2 参数代替了两个整数参数。

----

.. _class_Image_method_get_rect:

- :ref:`Image<class_Image>` **get_rect** **(** :ref:`Rect2<class_Rect2>` rect **)** |const|

返回一个新图像，它是用 ``rect`` 所截取图像区域的副本。

----

.. _class_Image_method_get_size:

- :ref:`Vector2<class_Vector2>` **get_size** **(** **)** |const|

返回图像的大小（宽度和高度）。

----

.. _class_Image_method_get_used_rect:

- :ref:`Rect2<class_Rect2>` **get_used_rect** **(** **)** |const|

返回一个包围图像可见部分的 :ref:`Rect2<class_Rect2>` 矩形，像素的 alpha 通道值非零时视为可见。

----

.. _class_Image_method_get_width:

- :ref:`int<class_int>` **get_width** **(** **)** |const|

返回图像的宽度。

----

.. _class_Image_method_has_mipmaps:

- :ref:`bool<class_bool>` **has_mipmaps** **(** **)** |const|

如果图像已经生成多级渐远纹理，则返回 ``true``\ 。

----

.. _class_Image_method_is_compressed:

- :ref:`bool<class_bool>` **is_compressed** **(** **)** |const|

如果图像被压缩，返回\ ``true``\ 。

----

.. _class_Image_method_is_empty:

- :ref:`bool<class_bool>` **is_empty** **(** **)** |const|

如果图像没有数据，返回\ ``true``\ 。

----

.. _class_Image_method_is_invisible:

- :ref:`bool<class_bool>` **is_invisible** **(** **)** |const|

如果图像中所有像素的不透明度（alpha）都是 0，则返回 ``true``\ 。如果有任何像素的不透明度（alpha）高于 0，则返回 ``false``\ 。

----

.. _class_Image_method_load:

- :ref:`Error<enum_@GlobalScope_Error>` **load** **(** :ref:`String<class_String>` path **)**

Loads an image from file ``path``. See `Supported image formats <../tutorials/assets_pipeline/importing_images.html#supported-image-formats>`__ for a list of supported image formats and limitations.

\ **Warning:** This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the ``user://`` directory, and may not work in exported projects.

See also :ref:`ImageTexture<class_ImageTexture>` description for usage examples.

----

.. _class_Image_method_load_bmp_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_bmp_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

从BMP文件的二进制内容中加载图像。

\ **注意：** GaaeExplorer的BMP模块不支持16位像素的图像。只支持1位、4位、8位、24位和32位像素的图像。

----

.. _class_Image_method_load_jpg_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_jpg_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

从 JPEG 文件的二进制内容加载图像。

----

.. _class_Image_method_load_png_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_png_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

从 PNG 文件的二进制内容加载图像。

----

.. _class_Image_method_load_tga_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_tga_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

从 TGA 文件的二进制内容加载图像。

----

.. _class_Image_method_load_webp_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_webp_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

从 WebP 文件的二进制内容加载图像。

----

.. _class_Image_method_lock:

- void **lock** **(** **)**

锁定数据的读写访问。如果在读或写像素时，图像没有被锁定，则向控制台发送一个错误。

----

.. _class_Image_method_normalmap_to_xy:

- void **normalmap_to_xy** **(** **)**

转换图像的数据以表示 3D 平面上的坐标。当图像表示法线贴图时使用。法线贴图可以在不增加多边形数量的情况下向 3D 表面添加大量细节。

----

.. _class_Image_method_premultiply_alpha:

- void **premultiply_alpha** **(** **)**

将颜色值与alpha值相乘。一个像素的结果颜色值是\ ``(color * alpha)/256``\ 。

----

.. _class_Image_method_resize:

- void **resize** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**

调整图像大小到给定的\ ``width``\ 和\ ``height``\ 。新像素通过\ :ref:`Interpolation<enum_Image_Interpolation>`\ 常数定义的\ ``interpolation``\ 插值模式计算。

----

.. _class_Image_method_resize_to_po2:

- void **resize_to_po2** **(** :ref:`bool<class_bool>` square=false, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**

将图像的宽度和高度调整到最接近的2次方。如果\ ``square``\ 是\ ``true``\ ，那么设置宽度和高度为相同。新像素通过\ :ref:`Interpolation<enum_Image_Interpolation>`\ 常数定义的\ ``interpolation``\ 插值模式计算。

----

.. _class_Image_method_rgbe_to_srgb:

- :ref:`Image<class_Image>` **rgbe_to_srgb** **(** **)**

将标准 RGBE（红绿蓝指数）图像转换为 sRGB 图像。

----

.. _class_Image_method_save_exr:

- :ref:`Error<enum_@GlobalScope_Error>` **save_exr** **(** :ref:`String<class_String>` path, :ref:`bool<class_bool>` grayscale=false **)** |const|

将图像作为EXR文件保存到\ ``path``\ 。如果\ ``grayscale``\ 是\ ``true``\ 并且图像只有一个通道，它将被明确地保存为单色而不是红色通道。如果GaaeExplorer在编译时没有TinyEXR模块，这个函数将返回\ :ref:`@GlobalScope.ERR_UNAVAILABLE<class_@GlobalScope_constant_ERR_UNAVAILABLE>`\ 。

\ **注意：** TinyEXR模块在非编辑器构建中被禁用，这意味着\ :ref:`save_exr<class_Image_method_save_exr>`\ 从导出的项目中调用时将返回\ :ref:`@GlobalScope.ERR_UNAVAILABLE<class_@GlobalScope_constant_ERR_UNAVAILABLE>`\ 。

----

.. _class_Image_method_save_png:

- :ref:`Error<enum_@GlobalScope_Error>` **save_png** **(** :ref:`String<class_String>` path **)** |const|

将图像作为 PNG 文件保存到 ``path``\ 。

----

.. _class_Image_method_save_png_to_buffer:

- :ref:`PoolByteArray<class_PoolByteArray>` **save_png_to_buffer** **(** **)** |const|

----

.. _class_Image_method_set_pixel:

- void **set_pixel** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`Color<class_Color>` color **)**

如果图像被锁定，设置\ ``(x, y)``\ 处像素的\ :ref:`Color<class_Color>`\ 。例子:

::

    var img = Image.new()
    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
    img.lock()
    img.set_pixel(x, y, color) # Works
    img.unlock()
    img.set_pixel(x, y, color) # Does not have an effect

----

.. _class_Image_method_set_pixelv:

- void **set_pixelv** **(** :ref:`Vector2<class_Vector2>` dst, :ref:`Color<class_Color>` color **)**

如果图像被锁定，设置\ ``(dst.x, dst.y)``\ 处的像素的\ :ref:`Color<class_Color>`\ 。注意，\ ``dst``\ 值必须是整数。例:

::

    var img = Image.new()
    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
    img.lock()
    img.set_pixelv(Vector2(x, y), color) # Works
    img.unlock()
    img.set_pixelv(Vector2(x, y), color) # Does not have an effect

----

.. _class_Image_method_shrink_x2:

- void **shrink_x2** **(** **)**

将图像缩小2倍。

----

.. _class_Image_method_srgb_to_linear:

- void **srgb_to_linear** **(** **)**

将原始数据从 sRGB 色彩空间转换为线性比例。

----

.. _class_Image_method_unlock:

- void **unlock** **(** **)**

解锁数据并防止更改。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
