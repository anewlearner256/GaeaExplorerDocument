:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the SpringArm.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_SpringArm:

SpringArm
=========

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

辅助节点，主要用于第三人称相机。

描述
----

SpringArm节点是沿其Z轴投射射线（或碰撞形状）的节点，并将其所有的直接子节点移动到碰撞点，减去边距。

最常见的使用情况是制作第三人称相机，对环境中的碰撞做出反应。

SpringArm将投射一条射线，或者给出形状，它将在其Z轴的方向上投射该形状。

如果你使用SpringArm作为玩家的相机控制器，你可能需要将玩家的碰撞器排除在SpringArm的碰撞检查之外。

属性
----

+---------------------------+----------------------------------------------------------------+----------+
| :ref:`int<class_int>`     | :ref:`collision_mask<class_SpringArm_property_collision_mask>` | ``1``    |
+---------------------------+----------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`margin<class_SpringArm_property_margin>`                 | ``0.01`` |
+---------------------------+----------------------------------------------------------------+----------+
| :ref:`Shape<class_Shape>` | :ref:`shape<class_SpringArm_property_shape>`                   |          |
+---------------------------+----------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`spring_length<class_SpringArm_property_spring_length>`   | ``1.0``  |
+---------------------------+----------------------------------------------------------------+----------+

方法
----

+---------------------------+--------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_excluded_object<class_SpringArm_method_add_excluded_object>` **(** :ref:`RID<class_RID>` RID **)**       |
+---------------------------+--------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`clear_excluded_objects<class_SpringArm_method_clear_excluded_objects>` **(** **)**                           |
+---------------------------+--------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`get_hit_length<class_SpringArm_method_get_hit_length>` **(** **)**                                           |
+---------------------------+--------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`remove_excluded_object<class_SpringArm_method_remove_excluded_object>` **(** :ref:`RID<class_RID>` RID **)** |
+---------------------------+--------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_SpringArm_property_collision_mask:

- :ref:`int<class_int>` **collision_mask**

+-----------+---------------------------+
| *Default* | ``1``                     |
+-----------+---------------------------+
| *Setter*  | set_collision_mask(value) |
+-----------+---------------------------+
| *Getter*  | get_collision_mask()      |
+-----------+---------------------------+

The layers against which the collision check shall be done. See `Collision layers and masks <../tutorials/physics/physics_introduction.html#collision-layers-and-masks>`__ in the documentation for more information.

----

.. _class_SpringArm_property_margin:

- :ref:`float<class_float>` **margin**

+-----------+-------------------+
| *Default* | ``0.01``          |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

进行碰撞检查时，会给出 SpringArm 的候选长度。

然后将边距减去此长度，并将平移应用于 SpringArm 的子对象。

当 SpringArm 将 :ref:`Camera<class_Camera>` 作为子节点时，此边距很有用：没有边距，\ :ref:`Camera<class_Camera>` 将放置在碰撞的确切点上，而有边距时，\ :ref:`Camera<class_Camera>` 将放置在靠近碰撞点。

----

.. _class_SpringArm_property_shape:

- :ref:`Shape<class_Shape>` **shape**

+----------+------------------+
| *Setter* | set_shape(value) |
+----------+------------------+
| *Getter* | get_shape()      |
+----------+------------------+

用于 SpringArm 的 :ref:`Shape<class_Shape>` 形状。

当形状被设置时，SpringArm 将在其 Z 轴上投射 :ref:`Shape<class_Shape>`\ ，而不是执行光线投射。

----

.. _class_SpringArm_property_spring_length:

- :ref:`float<class_float>` **spring_length**

+-----------+-------------------+
| *Default* | ``1.0``           |
+-----------+-------------------+
| *Setter*  | set_length(value) |
+-----------+-------------------+
| *Getter*  | get_length()      |
+-----------+-------------------+

SpringArm 的最大范围。这用作内部使用的光线和形状投射的长度，以计算 SpringArm 子节点的所需位置。

要了解有关如何执行形状投射或光线投射的更多信息，请参阅 :ref:`PhysicsDirectSpaceState<class_PhysicsDirectSpaceState>` 文档。

方法说明
--------

.. _class_SpringArm_method_add_excluded_object:

- void **add_excluded_object** **(** :ref:`RID<class_RID>` RID **)**

将具有指定 :ref:`RID<class_RID>` 的 :ref:`PhysicsBody<class_PhysicsBody>` 对象添加到排除在碰撞检查之外的 :ref:`PhysicsBody<class_PhysicsBody>` 对象列表中。

----

.. _class_SpringArm_method_clear_excluded_objects:

- void **clear_excluded_objects** **(** **)**

清除从碰撞检查中排除的 :ref:`PhysicsBody<class_PhysicsBody>` 对象列表。

----

.. _class_SpringArm_method_get_hit_length:

- :ref:`float<class_float>` **get_hit_length** **(** **)**

返回弹簧臂的当前长度。

----

.. _class_SpringArm_method_remove_excluded_object:

- :ref:`bool<class_bool>` **remove_excluded_object** **(** :ref:`RID<class_RID>` RID **)**

从碰撞检查排除的 :ref:`PhysicsBody<class_PhysicsBody>` 对象列表中删除指定的 :ref:`RID<class_RID>`\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
