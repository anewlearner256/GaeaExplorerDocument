:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the WebSocketServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebSocketServer:

WebSocketServer
===============

**Inherits:** :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>` **<** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

WebSocket服务器的实现。

描述
----

这个类实现了WebSocket服务器，它也可以支持高级别的多人游戏API。

在启动服务器后，\ :ref:`listen<class_WebSocketServer_method_listen>`\ ，你需要\ :ref:`NetworkedMultiplayerPeer.poll<class_NetworkedMultiplayerPeer_method_poll>`\ 它以固定的时间间隔，例如在\ :ref:`Node._process<class_Node_method__process>`\ 内。当客户端连接、断开或发送数据时，你会收到相应的信号。

\ **注意：** 在HTML5导出中不可用。

属性
----

+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`String<class_String>`                   | :ref:`bind_ip<class_WebSocketServer_property_bind_ip>`                     | ``"*"`` |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`ca_chain<class_WebSocketServer_property_ca_chain>`                   |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`float<class_float>`                     | :ref:`handshake_timeout<class_WebSocketServer_property_handshake_timeout>` | ``3.0`` |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`CryptoKey<class_CryptoKey>`             | :ref:`private_key<class_WebSocketServer_property_private_key>`             |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`     |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+

方法
----

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`disconnect_peer<class_WebSocketServer_method_disconnect_peer>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**                               |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_peer_address<class_WebSocketServer_method_get_peer_address>` **(** :ref:`int<class_int>` id **)** |const|                                                                                             |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_peer_port<class_WebSocketServer_method_get_peer_port>` **(** :ref:`int<class_int>` id **)** |const|                                                                                                   |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_peer<class_WebSocketServer_method_has_peer>` **(** :ref:`int<class_int>` id **)** |const|                                                                                                             |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_listening<class_WebSocketServer_method_is_listening>` **(** **)** |const|                                                                                                                              |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`listen<class_WebSocketServer_method_listen>` **(** :ref:`int<class_int>` port, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`stop<class_WebSocketServer_method_stop>` **(** **)**                                                                                                                                                      |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_WebSocketServer_signal_client_close_request:

- **client_close_request** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code, :ref:`String<class_String>` reason **)**

当一个客户端要求彻底关闭时触发。你应该继续轮询，直到你得到一个具有相同\ ``id``\ 的\ :ref:`client_disconnected<class_WebSocketServer_signal_client_disconnected>`\ 信号，以实现彻底关闭。请参阅\ :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>`\ 以了解更多细节。

----

.. _class_WebSocketServer_signal_client_connected:

- **client_connected** **(** :ref:`int<class_int>` id, :ref:`String<class_String>` protocol **)**

当新的客户端连接时触发。"协议" 将是与客户端达成的子协议。

----

.. _class_WebSocketServer_signal_client_disconnected:

- **client_disconnected** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` was_clean_close **)**

当客户端断开连接时触发。如果连接被彻底关闭\ ``was_clean_close`` 将是\ ``true`` 。

----

.. _class_WebSocketServer_signal_data_received:

- **data_received** **(** :ref:`int<class_int>` id **)**

当收到一个新消息时触发。

\ **注意：**\ 这个信号在用作高级多人对等的时候，\ *不*\ 触发。

属性说明
--------

.. _class_WebSocketServer_property_bind_ip:

- :ref:`String<class_String>` **bind_ip**

+-----------+--------------------+
| *Default* | ``"*"``            |
+-----------+--------------------+
| *Setter*  | set_bind_ip(value) |
+-----------+--------------------+
| *Getter*  | get_bind_ip()      |
+-----------+--------------------+

当不设置为\ ``*``\ 时，将限制进入的连接到指定的IP地址。将\ ``bind_ip``\ 设置为\ ``127.0.0.1``\ 将导致服务器只监听本地主机。

----

.. _class_WebSocketServer_property_ca_chain:

- :ref:`X509Certificate<class_X509Certificate>` **ca_chain**

+----------+---------------------+
| *Setter* | set_ca_chain(value) |
+----------+---------------------+
| *Getter* | get_ca_chain()      |
+----------+---------------------+

当使用SSL时，你可以将其设置为一个有效的\ :ref:`X509Certificate<class_X509Certificate>`\ ，作为SSL握手过程中额外的CA链信息提供。参阅\ :ref:`private_key<class_WebSocketServer_property_private_key>`\ 和\ :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`\ 。

----

.. _class_WebSocketServer_property_handshake_timeout:

- :ref:`float<class_float>` **handshake_timeout**

+-----------+------------------------------+
| *Default* | ``3.0``                      |
+-----------+------------------------------+
| *Setter*  | set_handshake_timeout(value) |
+-----------+------------------------------+
| *Getter*  | get_handshake_timeout()      |
+-----------+------------------------------+

挂起客户端，即尚未完成 HTTP 握手的客户端之前的时间被认为是陈旧的并强制断开连接，时间以秒为单位。

----

.. _class_WebSocketServer_property_private_key:

- :ref:`CryptoKey<class_CryptoKey>` **private_key**

+----------+------------------------+
| *Setter* | set_private_key(value) |
+----------+------------------------+
| *Getter* | get_private_key()      |
+----------+------------------------+

当设置为有效的\ :ref:`CryptoKey<class_CryptoKey>`\ 时，与\ :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`\ 一起，将导致服务器需要SSL而不是普通的TCP，即\ ``wss://``\ 协议。

----

.. _class_WebSocketServer_property_ssl_certificate:

- :ref:`X509Certificate<class_X509Certificate>` **ssl_certificate**

+----------+----------------------------+
| *Setter* | set_ssl_certificate(value) |
+----------+----------------------------+
| *Getter* | get_ssl_certificate()      |
+----------+----------------------------+

当设置为有效的\ :ref:`X509Certificate<class_X509Certificate>`\ 时，连同\ :ref:`private_key<class_WebSocketServer_property_private_key>`\ ，将导致服务器需要SSL而不是普通的TCP，即\ ``wss://``\ 协议。

方法说明
--------

.. _class_WebSocketServer_method_disconnect_peer:

- void **disconnect_peer** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**

断开由\ ``id``\ 标识的对等体与服务器的连接。更多信息参阅\ :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>`\ 。

----

.. _class_WebSocketServer_method_get_peer_address:

- :ref:`String<class_String>` **get_peer_address** **(** :ref:`int<class_int>` id **)** |const|

返回给定对等体的IP地址。

----

.. _class_WebSocketServer_method_get_peer_port:

- :ref:`int<class_int>` **get_peer_port** **(** :ref:`int<class_int>` id **)** |const|

返回给定对等体的远程端口。

----

.. _class_WebSocketServer_method_has_peer:

- :ref:`bool<class_bool>` **has_peer** **(** :ref:`int<class_int>` id **)** |const|

如果一个具有给定ID的对等体被连接，则返回\ ``true``\ 。

----

.. _class_WebSocketServer_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** |const|

如果服务器正在监听某个端口，返回\ ``true``\ 。

----

.. _class_WebSocketServer_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false **)**

在给定的端口上开始监听。

你可以通过 "协议" 数组指定所需的子协议。如果列表为空（默认情况下），将不请求任何子协议。

如果\ ``true``\ 作为\ ``gd_mp_api``\ 传递，服务器将表现得像\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 的网络对等体，来自非GaaeExplorer客户端的连接将不工作，并且\ :ref:`data_received<class_WebSocketServer_signal_data_received>`\ 将不被触发。

如果\ ``false``\ 被传递（默认），你必须调用\ :ref:`PacketPeer<class_PacketPeer>`\ 函数（\ ``put_packet``, ``get_packet``, etc.)，在通过\ ``get_peer(id)``\ 返回的\ :ref:`WebSocketPeer<class_WebSocketPeer>`\ 上，与具有给定\ ``id``\ 的对等体进行通信，例如，\ ``get_peer(id).get_available_packet_count``\ 。

----

.. _class_WebSocketServer_method_stop:

- void **stop** **(** **)**

停止服务器并清除其状态。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
