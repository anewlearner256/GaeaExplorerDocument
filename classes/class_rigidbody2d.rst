:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the RigidBody2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RigidBody2D:

RigidBody2D
===========

**Inherits:** :ref:`PhysicsBody2D<class_PhysicsBody2D>` **<** :ref:`CollisionObject2D<class_CollisionObject2D>` **<** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

由2D物理引擎控制的实体。

描述
----

该节点实现了模拟的2D物理。你不能直接控制一个RigidBody2D。而是，你对它施加力（重力、冲力等），物理模拟会根据它的质量、摩擦力和其他物理属性来计算出运动结果。

RigidBody2D有4种行为\ :ref:`mode<class_RigidBody2D_property_mode>`\ 。刚性、静态、角色和运动。

\ **注意：** 你不应该每一帧或经常改变RigidBody2D的\ ``position``\ 或\ ``linear_velocity``\ 。如果需要直接影响物体的状态，请使用\ :ref:`_integrate_forces<class_RigidBody2D_method__integrate_forces>`\ ，它允许你直接访问物理状态。

要记住，物理物体在自己管理变换，它会覆盖你的变换设置。所以任何直接或间接的变换（包括节点或其父级的缩放）将只在编辑器中可见，并在运行时立即重置。

如果你需要重载默认的物理行为或者在运行时添加变换，你可以写一个自定义的合力。参阅\ :ref:`custom_integrator<class_RigidBody2D_property_custom_integrator>`\ 。

质量中心总是位于节点的原点，而不考虑\ :ref:`CollisionShape2D<class_CollisionShape2D>`\ 中心点的偏移。

教程
----

- `2D Physics Platformer Demo <https://godotengine.org/asset-library/asset/119>`__

- `Instancing Demo <https://godotengine.org/asset-library/asset/148>`__

属性
----

+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`angular_damp<class_RigidBody2D_property_angular_damp>`                           | ``-1.0``            |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`angular_velocity<class_RigidBody2D_property_angular_velocity>`                   | ``0.0``             |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                 | :ref:`applied_force<class_RigidBody2D_property_applied_force>`                         | ``Vector2( 0, 0 )`` |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`applied_torque<class_RigidBody2D_property_applied_torque>`                       | ``0.0``             |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`bounce<class_RigidBody2D_property_bounce>`                                       |                     |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                       | :ref:`can_sleep<class_RigidBody2D_property_can_sleep>`                                 | ``true``            |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                       | :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>`                     | ``false``           |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                         | :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>`                 | ``0``               |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`CCDMode<enum_RigidBody2D_CCDMode>`      | :ref:`continuous_cd<class_RigidBody2D_property_continuous_cd>`                         | ``0``               |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                       | :ref:`custom_integrator<class_RigidBody2D_property_custom_integrator>`                 | ``false``           |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`friction<class_RigidBody2D_property_friction>`                                   |                     |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`gravity_scale<class_RigidBody2D_property_gravity_scale>`                         | ``1.0``             |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`inertia<class_RigidBody2D_property_inertia>`                                     |                     |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`linear_damp<class_RigidBody2D_property_linear_damp>`                             | ``-1.0``            |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                 | :ref:`linear_velocity<class_RigidBody2D_property_linear_velocity>`                     | ``Vector2( 0, 0 )`` |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`mass<class_RigidBody2D_property_mass>`                                           | ``1.0``             |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`Mode<enum_RigidBody2D_Mode>`            | :ref:`mode<class_RigidBody2D_property_mode>`                                           | ``0``               |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`PhysicsMaterial<class_PhysicsMaterial>` | :ref:`physics_material_override<class_RigidBody2D_property_physics_material_override>` |                     |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                       | :ref:`sleeping<class_RigidBody2D_property_sleeping>`                                   | ``false``           |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                     | :ref:`weight<class_RigidBody2D_property_weight>`                                       | ``9.8``             |
+-----------------------------------------------+----------------------------------------------------------------------------------------+---------------------+

方法
----

+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`_integrate_forces<class_RigidBody2D_method__integrate_forces>` **(** :ref:`Physics2DDirectBodyState<class_Physics2DDirectBodyState>` state **)** |virtual|                                                                                                               |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_central_force<class_RigidBody2D_method_add_central_force>` **(** :ref:`Vector2<class_Vector2>` force **)**                                                                                                                                                           |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_force<class_RigidBody2D_method_add_force>` **(** :ref:`Vector2<class_Vector2>` offset, :ref:`Vector2<class_Vector2>` force **)**                                                                                                                                     |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`add_torque<class_RigidBody2D_method_add_torque>` **(** :ref:`float<class_float>` torque **)**                                                                                                                                                                            |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_central_impulse<class_RigidBody2D_method_apply_central_impulse>` **(** :ref:`Vector2<class_Vector2>` impulse **)**                                                                                                                                                 |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_impulse<class_RigidBody2D_method_apply_impulse>` **(** :ref:`Vector2<class_Vector2>` offset, :ref:`Vector2<class_Vector2>` impulse **)**                                                                                                                           |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`apply_torque_impulse<class_RigidBody2D_method_apply_torque_impulse>` **(** :ref:`float<class_float>` torque **)**                                                                                                                                                        |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_colliding_bodies<class_RigidBody2D_method_get_colliding_bodies>` **(** **)** |const|                                                                                                                                                                                 |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_axis_velocity<class_RigidBody2D_method_set_axis_velocity>` **(** :ref:`Vector2<class_Vector2>` axis_velocity **)**                                                                                                                                                   |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`test_motion<class_RigidBody2D_method_test_motion>` **(** :ref:`Vector2<class_Vector2>` motion, :ref:`bool<class_bool>` infinite_inertia=true, :ref:`float<class_float>` margin=0.08, :ref:`Physics2DTestMotionResult<class_Physics2DTestMotionResult>` result=null **)** |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_RigidBody2D_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

当与另一个\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 发生碰撞时触发。需要将\ :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>`\ 设置为\ ``true``\ ，并且将\ :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>`\ 设置得足够高以检测所有的碰撞。如果\ :ref:`TileSet<class_TileSet>`\ 有碰撞\ :ref:`Shape2D<class_Shape2D>`\ ，就会检测到\ :ref:`TileMap<class_TileMap>`\ 的。

\ ``body``\ 是其他\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Node<class_Node>`\ ，如果它存在于树中。

----

.. _class_RigidBody2D_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

当与另一个\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的碰撞结束时发出的。需要将 :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>` 设置为 ``true`` 并将 :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>` 设置为足够高以检测所有碰撞。如果\ :ref:`TileSet<class_TileSet>`\ 有碰撞\ :ref:`Shape2D<class_Shape2D>`\ ，就会检测到\ :ref:`TileMap<class_TileMap>`\ 。

\ ``body`` 其他\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Node<class_Node>`\ (如果它存在于树中)。

----

.. _class_RigidBody2D_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

当这个RigidBody2D的\ :ref:`Shape2D<class_Shape2D>`\ 与另一个\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Shape2D<class_Shape2D>`\ 碰撞时发出。要求 :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>` 设置为 ``true`` 并且 :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>` 设置得足够高，以检测所有碰撞。如果 :ref:`TileMap<class_TileMap>` 具有碰撞 :ref:`Shape2D<class_Shape2D>`\ ，就会检测到 :ref:`TileSet<class_TileSet>`\ 。

\ ``body_rid`` 由 :ref:`Physics2DServer<class_Physics2DServer>` 使用的其他 :ref:`PhysicsBody2D<class_PhysicsBody2D>` 或 :ref:`TileSet<class_TileSet>` 的 :ref:`CollisionObject2D<class_CollisionObject2D>` 的 :ref:`RID<class_RID>`\ 。

\ ``body``\ 其他\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Node<class_Node>`\ (如果它存在于树上)。

\ ``body_shape_index`` 其他 :ref:`PhysicsBody2D<class_PhysicsBody2D>` 或 :ref:`TileMap<class_TileMap>` 使用 :ref:`Physics2DServer<class_Physics2DServer>` 的 :ref:`Shape2D<class_Shape2D>` 索引。获得带有 ``body.shape_owner_get_owner （body_shape_index）`` 的 :ref:`CollisionShape2D<class_CollisionShape2D>` 节点。

\ ``local_shape_index`` :ref:`Physics2DServer<class_Physics2DServer>` 使用的此 RigidBody2D 的 :ref:`Shape2D<class_Shape2D>` 索引。获得带有 ``self.shape_owner_get_owner （local_shape_index）`` 的 :ref:`CollisionShape2D<class_CollisionShape2D>` 节点。

----

.. _class_RigidBody2D_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

当这个RigidBody2D的一个\ :ref:`Shape2D<class_Shape2D>`\ 和另一个\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Shape2D<class_Shape2D>`\ 之间的碰撞结束时触发。要求\ :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>`\ 设置为\ ``true``\ ，\ :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>`\ 设置得足够高以检测所有的碰撞。如果\ :ref:`TileSet<class_TileSet>`\ 有碰撞\ :ref:`Shape2D<class_Shape2D>`\ ，就会检测到\ :ref:`TileMap<class_TileMap>`\ 的。

\ ``body_rid`` :ref:`Physics2DServer<class_Physics2DServer>`\ 使用的其他\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileSet<class_TileSet>`\ 的\ :ref:`CollisionObject2D<class_CollisionObject2D>`\ 的 :ref:`RID<class_RID>`\ 。

\ ``body`` 另一个\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Node<class_Node>`\ ，如果它存在于树中。

\ ``body_shape_index`` 由\ :ref:`Physics2DServer<class_Physics2DServer>`\ 使用的其他\ :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ 或\ :ref:`TileMap<class_TileMap>`\ 的\ :ref:`Shape2D<class_Shape2D>`\ 的索引。用\ ``body.shape_owner_get_owner(body_shape_index)``\ 获得\ :ref:`CollisionShape2D<class_CollisionShape2D>`\ 节点。

\ ``local_shape_index``\ 这个RigidBody2D的\ :ref:`Shape2D<class_Shape2D>`\ 的索引，由\ :ref:`Physics2DServer<class_Physics2DServer>`\ 使用。用\ ``self.shape_owner_get_owner(local_shape_index)``\ 获取\ :ref:`CollisionShape2D<class_CollisionShape2D>`\ 节点。

----

.. _class_RigidBody2D_signal_sleeping_state_changed:

- **sleeping_state_changed** **(** **)**

当物理引擎改变物体的睡眠状态时发出。

\ **注意：**\ 改变\ :ref:`sleeping<class_RigidBody2D_property_sleeping>`\ 的值不会触发这个信号。只有当物理引擎改变了睡眠状态或者使用了\ ``emit_signal("sleeping_state_changed")``\ 时，它才会被发出。

枚举
----

.. _enum_RigidBody2D_Mode:

.. _class_RigidBody2D_constant_MODE_RIGID:

.. _class_RigidBody2D_constant_MODE_STATIC:

.. _class_RigidBody2D_constant_MODE_CHARACTER:

.. _class_RigidBody2D_constant_MODE_KINEMATIC:

enum **Mode**:

- **MODE_RIGID** = **0** --- 刚性模式。物体的行为就像一个物理物体。它与其他物体发生碰撞，并对施加在它身上的力做出反应。这是默认模式。

- **MODE_STATIC** = **1** --- 静态模式。物体的行为就像一个\ :ref:`StaticBody2D<class_StaticBody2D>`\ ，不会移动。

- **MODE_CHARACTER** = **2** --- 角色模式。与\ :ref:`MODE_RIGID<class_RigidBody2D_constant_MODE_RIGID>`\ 类似，但主体不能旋转。

- **MODE_KINEMATIC** = **3** --- 运动学模式。这个物体的行为就像一个\ :ref:`KinematicBody2D<class_KinematicBody2D>`\ ，必须通过代码来移动。

----

.. _enum_RigidBody2D_CCDMode:

.. _class_RigidBody2D_constant_CCD_MODE_DISABLED:

.. _class_RigidBody2D_constant_CCD_MODE_CAST_RAY:

.. _class_RigidBody2D_constant_CCD_MODE_CAST_SHAPE:

enum **CCDMode**:

- **CCD_MODE_DISABLED** = **0** --- 禁用连续碰撞检测。这是检测物体碰撞的最快方法，但可能会错过小型、快速移动的物体。

- **CCD_MODE_CAST_RAY** = **1** --- 使用射线投射启用连续碰撞检测。这比 shapecasting 快，但精度较低。

- **CCD_MODE_CAST_SHAPE** = **2** --- 使用 shapecasting 启用连续碰撞检测。这是最慢的 CCD 方法，也是最精确的。

属性说明
--------

.. _class_RigidBody2D_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+-----------+-------------------------+
| *Default* | ``-1.0``                |
+-----------+-------------------------+
| *Setter*  | set_angular_damp(value) |
+-----------+-------------------------+
| *Getter*  | get_angular_damp()      |
+-----------+-------------------------+

对物体的 :ref:`angular_velocity<class_RigidBody2D_property_angular_velocity>`\ 进行阻尼运算。如果 ``-1``\ ，物体将使用\ **项目 > 项目设置 > Physics > 2d** 中定义的 **Default Angular Damp**\ （默认角度阻尼）。

有关阻尼的更多详细信息，请参阅 :ref:`ProjectSettings.physics/2d/default_angular_damp<class_ProjectSettings_property_physics/2d/default_angular_damp>`\ 。

----

.. _class_RigidBody2D_property_angular_velocity:

- :ref:`float<class_float>` **angular_velocity**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_angular_velocity(value) |
+-----------+-----------------------------+
| *Getter*  | get_angular_velocity()      |
+-----------+-----------------------------+

物体的旋转速度，单位为\ *弧度*\ 每秒。

----

.. _class_RigidBody2D_property_applied_force:

- :ref:`Vector2<class_Vector2>` **applied_force**

+-----------+--------------------------+
| *Default* | ``Vector2( 0, 0 )``      |
+-----------+--------------------------+
| *Setter*  | set_applied_force(value) |
+-----------+--------------------------+
| *Getter*  | get_applied_force()      |
+-----------+--------------------------+

对物体施加的合力。

----

.. _class_RigidBody2D_property_applied_torque:

- :ref:`float<class_float>` **applied_torque**

+-----------+---------------------------+
| *Default* | ``0.0``                   |
+-----------+---------------------------+
| *Setter*  | set_applied_torque(value) |
+-----------+---------------------------+
| *Getter*  | get_applied_torque()      |
+-----------+---------------------------+

对物体施加总力矩。

----

.. _class_RigidBody2D_property_bounce:

- :ref:`float<class_float>` **bounce**

+----------+-------------------+
| *Setter* | set_bounce(value) |
+----------+-------------------+
| *Getter* | get_bounce()      |
+----------+-------------------+

实体的弹性。值范围从\ ``0``\ （无弹跳）到\ ``1``\ （完全弹跳）。

已被废弃，请通过\ :ref:`physics_material_override<class_RigidBody2D_property_physics_material_override>`\ 使用\ :ref:`PhysicsMaterial.bounce<class_PhysicsMaterial_property_bounce>`\ 代替。

----

.. _class_RigidBody2D_property_can_sleep:

- :ref:`bool<class_bool>` **can_sleep**

+-----------+----------------------+
| *Default* | ``true``             |
+-----------+----------------------+
| *Setter*  | set_can_sleep(value) |
+-----------+----------------------+
| *Getter*  | is_able_to_sleep()   |
+-----------+----------------------+

如果\ ``true``\ ，身体可以在没有运动的情况下进入睡眠模式。见\ :ref:`sleeping<class_RigidBody2D_property_sleeping>`\ 。

\ **注意：** RigidBody2D 的\ :ref:`mode<class_RigidBody2D_property_mode>` 为\ :ref:`MODE_CHARACTER<class_RigidBody2D_constant_MODE_CHARACTER>` 时不会自动进入休眠模式。仍然可以通过将其 :ref:`sleeping<class_RigidBody2D_property_sleeping>` 属性设置为 ``true`` 来手动使其休眠。

----

.. _class_RigidBody2D_property_contact_monitor:

- :ref:`bool<class_bool>` **contact_monitor**

+-----------+------------------------------+
| *Default* | ``false``                    |
+-----------+------------------------------+
| *Setter*  | set_contact_monitor(value)   |
+-----------+------------------------------+
| *Getter*  | is_contact_monitor_enabled() |
+-----------+------------------------------+

如果\ ``true``\ ，则物体在与另一个RigidBody2D碰撞时会发出信号。参阅\ :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>`\ 。

----

.. _class_RigidBody2D_property_contacts_reported:

- :ref:`int<class_int>` **contacts_reported**

+-----------+----------------------------------+
| *Default* | ``0``                            |
+-----------+----------------------------------+
| *Setter*  | set_max_contacts_reported(value) |
+-----------+----------------------------------+
| *Getter*  | get_max_contacts_reported()      |
+-----------+----------------------------------+

将被记录的最大接触次数。需要将 :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>` 设置为 ``true``\ 。

\ **注：**\ 接触次数与碰撞次数不同。平行边之间的碰撞将意味着两个接触（每端一个），平行面之间的碰撞将意味着四个接触（每个角一个）。

----

.. _class_RigidBody2D_property_continuous_cd:

- :ref:`CCDMode<enum_RigidBody2D_CCDMode>` **continuous_cd**

+-----------+------------------------------------------------+
| *Default* | ``0``                                          |
+-----------+------------------------------------------------+
| *Setter*  | set_continuous_collision_detection_mode(value) |
+-----------+------------------------------------------------+
| *Getter*  | get_continuous_collision_detection_mode()      |
+-----------+------------------------------------------------+

连续碰撞检测模式。

连续碰撞检测尝试预测一个移动的物体会在哪里碰撞，而不是移动它并在碰撞后纠正它的运动。连续碰撞检测速度较慢，但更精确，并且与快速移动的小物体发生碰撞时遗漏更少。可以使用光线投射和形状投射方法。有关详细信息，请参阅 :ref:`CCDMode<enum_RigidBody2D_CCDMode>`\ 。

----

.. _class_RigidBody2D_property_custom_integrator:

- :ref:`bool<class_bool>` **custom_integrator**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_use_custom_integrator(value) |
+-----------+----------------------------------+
| *Getter*  | is_using_custom_integrator()     |
+-----------+----------------------------------+

如果 ``true``\ ，则禁用该物体的内力积分。除了碰撞响应，物体只会按照 :ref:`_integrate_forces<class_RigidBody2D_method__integrate_forces>` 函数确定的方式移动。

----

.. _class_RigidBody2D_property_friction:

- :ref:`float<class_float>` **friction**

+----------+---------------------+
| *Setter* | set_friction(value) |
+----------+---------------------+
| *Getter* | get_friction()      |
+----------+---------------------+

物体的摩擦。取值范围从\ ``0``\ (无摩擦)到\ ``1``\ (最大摩擦)。

已弃用，通过 :ref:`physics_material_override<class_RigidBody2D_property_physics_material_override>` 使用 :ref:`PhysicsMaterial.friction<class_PhysicsMaterial_property_friction>`\ 。

----

.. _class_RigidBody2D_property_gravity_scale:

- :ref:`float<class_float>` **gravity_scale**

+-----------+--------------------------+
| *Default* | ``1.0``                  |
+-----------+--------------------------+
| *Setter*  | set_gravity_scale(value) |
+-----------+--------------------------+
| *Getter*  | get_gravity_scale()      |
+-----------+--------------------------+

乘以施加在物体上的重力。物体的重力是由\ **项目 > 项目设置 > Physics > 2d**\ 中的 **Default Gravity**\ （默认重力）值和/或任何由 :ref:`Area2D<class_Area2D>` 应用的额外重力矢量计算出来的。

----

.. _class_RigidBody2D_property_inertia:

- :ref:`float<class_float>` **inertia**

+----------+--------------------+
| *Setter* | set_inertia(value) |
+----------+--------------------+
| *Getter* | get_inertia()      |
+----------+--------------------+

物体的惯性力矩。这就像质量，但对于旋转来说：它决定了旋转物体需要多大的力矩。惯性力矩通常是由质量和形状自动计算出来的，但是这个函数允许你设置一个自定义值。设置0惯性会切换回自动计算。

----

.. _class_RigidBody2D_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+-----------+------------------------+
| *Default* | ``-1.0``               |
+-----------+------------------------+
| *Setter*  | set_linear_damp(value) |
+-----------+------------------------+
| *Getter*  | get_linear_damp()      |
+-----------+------------------------+

对物体的\ :ref:`linear_velocity<class_RigidBody2D_property_linear_velocity>`\ 进行阻尼运算。如果\ ``-1``\ ，物体将使用\ **项目 > 项目设置 > Physics > 2d** 中的 **Default Linear Damp**\ （默认线性阻尼）。

有关阻尼的更多详细信息，请参阅 :ref:`ProjectSettings.physics/2d/default_linear_damp<class_ProjectSettings_property_physics/2d/default_linear_damp>`\ 。

----

.. _class_RigidBody2D_property_linear_velocity:

- :ref:`Vector2<class_Vector2>` **linear_velocity**

+-----------+----------------------------+
| *Default* | ``Vector2( 0, 0 )``        |
+-----------+----------------------------+
| *Setter*  | set_linear_velocity(value) |
+-----------+----------------------------+
| *Getter*  | get_linear_velocity()      |
+-----------+----------------------------+

物体的线速度，单位为像素每秒。可以偶尔使用，但是\ **不要每一帧都设置它**\ ，因为物理可能在另一个线程中运行，并且以不同的间隔。使用 :ref:`_integrate_forces<class_RigidBody2D_method__integrate_forces>` 作为你的进程循环，以精确控制物体状态。

----

.. _class_RigidBody2D_property_mass:

- :ref:`float<class_float>` **mass**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_mass(value) |
+-----------+-----------------+
| *Getter*  | get_mass()      |
+-----------+-----------------+

实体的质量。

----

.. _class_RigidBody2D_property_mode:

- :ref:`Mode<enum_RigidBody2D_Mode>` **mode**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_mode(value) |
+-----------+-----------------+
| *Getter*  | get_mode()      |
+-----------+-----------------+

物体的模式。可能的值见\ :ref:`Mode<enum_RigidBody2D_Mode>`\ 。

----

.. _class_RigidBody2D_property_physics_material_override:

- :ref:`PhysicsMaterial<class_PhysicsMaterial>` **physics_material_override**

+----------+--------------------------------------+
| *Setter* | set_physics_material_override(value) |
+----------+--------------------------------------+
| *Getter* | get_physics_material_override()      |
+----------+--------------------------------------+

物体的物理材质。

如果为该属性指定了一种材质，则将使用该材质代替任何其他物理材质，例如继承的材质。

----

.. _class_RigidBody2D_property_sleeping:

- :ref:`bool<class_bool>` **sleeping**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_sleeping(value) |
+-----------+---------------------+
| *Getter*  | is_sleeping()       |
+-----------+---------------------+

如果 ``true``\ ，物体不会移动并且不会计算力，直到被另一个物体唤醒，例如碰撞，或使用 :ref:`apply_impulse<class_RigidBody2D_method_apply_impulse>` 或 :ref:`add_force<class_RigidBody2D_method_add_force>` 方法。

----

.. _class_RigidBody2D_property_weight:

- :ref:`float<class_float>` **weight**

+-----------+-------------------+
| *Default* | ``9.8``           |
+-----------+-------------------+
| *Setter*  | set_weight(value) |
+-----------+-------------------+
| *Getter*  | get_weight()      |
+-----------+-------------------+

物体的重量基于其质量和\ **项目 > 项目设置 > Physics > 2d** 中的 **Default Gravity**\ （默认重力）值。

方法说明
--------

.. _class_RigidBody2D_method__integrate_forces:

- void **_integrate_forces** **(** :ref:`Physics2DDirectBodyState<class_Physics2DDirectBodyState>` state **)** |virtual|

允许你读取并安全地修改对象的模拟状态。如果你需要直接改变物体的\ ``position``\ 或其他物理属性，请使用它代替\ :ref:`Node._physics_process<class_Node_method__physics_process>`\ 。默认情况下，它是在通常的物理行为之外工作的，但是\ :ref:`custom_integrator<class_RigidBody2D_property_custom_integrator>`\ 允许你禁用默认行为并为一个物体编写自定义的合力。

----

.. _class_RigidBody2D_method_add_central_force:

- void **add_central_force** **(** :ref:`Vector2<class_Vector2>` force **)**

增加一个恒定的方向力，而不影响旋转。

----

.. _class_RigidBody2D_method_add_force:

- void **add_force** **(** :ref:`Vector2<class_Vector2>` offset, :ref:`Vector2<class_Vector2>` force **)**

向实体添加有作用点的力。力和相对于主体原点的偏移都在全局坐标中。

----

.. _class_RigidBody2D_method_add_torque:

- void **add_torque** **(** :ref:`float<class_float>` torque **)**

添加恒定的旋转力。

----

.. _class_RigidBody2D_method_apply_central_impulse:

- void **apply_central_impulse** **(** :ref:`Vector2<class_Vector2>` impulse **)**

在不影响旋转的情况下施加一个方向性的冲量。

----

.. _class_RigidBody2D_method_apply_impulse:

- void **apply_impulse** **(** :ref:`Vector2<class_Vector2>` offset, :ref:`Vector2<class_Vector2>` impulse **)**

对物体施加一个有向的冲量。冲量是与时间无关的。每一帧应用一个冲量会有一个与帧相关的力。由于这个原因，它只应该在模拟一次性冲击时使用（否则就使用"_force "函数）。位置使用全局坐标系的旋转，但以物体的原点为中心。

----

.. _class_RigidBody2D_method_apply_torque_impulse:

- void **apply_torque_impulse** **(** :ref:`float<class_float>` torque **)**

对物体施加旋转冲量。

----

.. _class_RigidBody2D_method_get_colliding_bodies:

- :ref:`Array<class_Array>` **get_colliding_bodies** **(** **)** |const|

返回一个与此碰撞的物体的列表。要求\ :ref:`contact_monitor<class_RigidBody2D_property_contact_monitor>`\ 设置为\ ``true``\ ，\ :ref:`contacts_reported<class_RigidBody2D_property_contacts_reported>`\ 设置得足够高，以检测所有碰撞。

\ **注意：** 在移动物体后，这个测试的结果不是立即的。为了性能，碰撞列表每帧在物理运算之前更新一次。可以考虑使用信号来代替。

----

.. _class_RigidBody2D_method_set_axis_velocity:

- void **set_axis_velocity** **(** :ref:`Vector2<class_Vector2>` axis_velocity **)**

设置物体在给定轴上的速度。给定矢量轴上的速度将设置为给定向量长度。这对于跳跃行为很有用。

----

.. _class_RigidBody2D_method_test_motion:

- :ref:`bool<class_bool>` **test_motion** **(** :ref:`Vector2<class_Vector2>` motion, :ref:`bool<class_bool>` infinite_inertia=true, :ref:`float<class_float>` margin=0.08, :ref:`Physics2DTestMotionResult<class_Physics2DTestMotionResult>` result=null **)**

如果在给定的向量中移动会导致碰撞，则返回 ``true``\ 。\ ``margin``\ 增加参与碰撞检测的形状的大小，\ ``result`` 是一个 :ref:`Physics2DTestMotionResult<class_Physics2DTestMotionResult>` 类型的对象，它包含关于碰撞的额外信息（如果有的话）。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
