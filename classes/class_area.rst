:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Area.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Area:

Area
====

**Inherits:** :ref:`CollisionObject<class_CollisionObject>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

用于检测和物理及音频影响的3D区域。

描述
----

检测\ :ref:`CollisionObject<class_CollisionObject>`\ 节点重叠、进入或退出的3D区域。还可以改变或覆盖局部物理参数（重力、阻尼），并将音频路由到自定义音频总线。

教程
----

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `GUI in 3D Demo <https://godotengine.org/asset-library/asset/127>`__

属性
----

+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`angular_damp<class_Area_property_angular_damp>`                     | ``0.1``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`String<class_String>`                   | :ref:`audio_bus_name<class_Area_property_audio_bus_name>`                 | ``"Master"``            |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                       | :ref:`audio_bus_override<class_Area_property_audio_bus_override>`         | ``false``               |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`gravity<class_Area_property_gravity>`                               | ``9.8``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`gravity_distance_scale<class_Area_property_gravity_distance_scale>` | ``0.0``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                       | :ref:`gravity_point<class_Area_property_gravity_point>`                   | ``false``               |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>`                 | :ref:`gravity_vec<class_Area_property_gravity_vec>`                       | ``Vector3( 0, -1, 0 )`` |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`linear_damp<class_Area_property_linear_damp>`                       | ``0.1``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                       | :ref:`monitorable<class_Area_property_monitorable>`                       | ``true``                |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                       | :ref:`monitoring<class_Area_property_monitoring>`                         | ``true``                |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`priority<class_Area_property_priority>`                             | ``0.0``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`reverb_bus_amount<class_Area_property_reverb_bus_amount>`           | ``0.0``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                       | :ref:`reverb_bus_enable<class_Area_property_reverb_bus_enable>`           | ``false``               |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`String<class_String>`                   | :ref:`reverb_bus_name<class_Area_property_reverb_bus_name>`               | ``"Master"``            |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                     | :ref:`reverb_bus_uniformity<class_Area_property_reverb_bus_uniformity>`   | ``0.0``                 |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+
| :ref:`SpaceOverride<enum_Area_SpaceOverride>` | :ref:`space_override<class_Area_property_space_override>`                 | ``0``                   |
+-----------------------------------------------+---------------------------------------------------------------------------+-------------------------+

方法
----

+---------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_areas<class_Area_method_get_overlapping_areas>` **(** **)** |const|              |
+---------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_bodies<class_Area_method_get_overlapping_bodies>` **(** **)** |const|            |
+---------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_area<class_Area_method_overlaps_area>` **(** :ref:`Node<class_Node>` area **)** |const| |
+---------------------------+--------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_body<class_Area_method_overlaps_body>` **(** :ref:`Node<class_Node>` body **)** |const| |
+---------------------------+--------------------------------------------------------------------------------------------------------+

信号
----

.. _class_Area_signal_area_entered:

- **area_entered** **(** :ref:`Area<class_Area>` area **)**

当另一个 Area 进入这个 Area 时触发。需要将监控 :ref:`monitoring<class_Area_property_monitoring>` 设置为 ``true``\ 。

\ ``area`` 参数是另外一个 Area。

----

.. _class_Area_signal_area_exited:

- **area_exited** **(** :ref:`Area<class_Area>` area **)**

当另一个区域退出这个区域时发出的。要求监控\ :ref:`monitoring<class_Area_property_monitoring>`\ 被设置为\ ``true``\ 。

\ ``area``\ 参数是另外一个Area。

----

.. _class_Area_signal_area_shape_entered:

- **area_shape_entered** **(** :ref:`RID<class_RID>` area_rid, :ref:`Area<class_Area>` area, :ref:`int<class_int>` area_shape_index, :ref:`int<class_int>` local_shape_index **)**

当另一个区域的一个\ :ref:`Shape<class_Shape>`\ 进入这个区域的一个\ :ref:`Shape<class_Shape>`\ 时发出的。要求\ :ref:`monitoring<class_Area_property_monitoring>` 被设置为\ ``true``\ 。

\ ``area_rid`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的其他区域的\ :ref:`CollisionObject<class_CollisionObject>`\ 的\ :ref:`RID<class_RID>`\ 。

\ ``area`` 其他区域。

\ ``area_shape_index`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的其他区域的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``area.shape_owner_get_owner(area_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

\ ``local_shape_index``\ 是\ :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的该区域的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``self.shape_owner_get_owner(local_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

----

.. _class_Area_signal_area_shape_exited:

- **area_shape_exited** **(** :ref:`RID<class_RID>` area_rid, :ref:`Area<class_Area>` area, :ref:`int<class_int>` area_shape_index, :ref:`int<class_int>` local_shape_index **)**

当另一个区域的一个\ :ref:`Shape<class_Shape>`\ 进入这个区域的一个\ :ref:`Shape<class_Shape>`\ 时发出的。要求\ :ref:`monitoring<class_Area_property_monitoring>` 被设置为\ ``true``\ 。

\ ``area_rid`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的其他区域的\ :ref:`CollisionObject<class_CollisionObject>`\ 的\ :ref:`RID<class_RID>`\ 。

\ ``area`` 其他区域。

\ ``area_shape_index`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的其他区域的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``area.shape_owner_get_owner(area_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

\ ``local_shape_index``\ 是\ :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的该区域的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``self.shape_owner_get_owner(local_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

----

.. _class_Area_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

当\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 进入这个区域时发出的。需要将监控\ :ref:`monitoring<class_Area_property_monitoring>`\ 设置为\ ``true``\ 。如果\ :ref:`MeshLibrary<class_MeshLibrary>`\ 有碰撞形状\ :ref:`Shape<class_Shape>`\ ，就会检测到\ :ref:`GridMap<class_GridMap>`\ 。

\ ``body``, 如果它存在于场景树中, 是另一个\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 节点\ :ref:`Node<class_Node>`\ 。

----

.. _class_Area_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

当\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 离开这个Area时发出的。需要将监控\ :ref:`monitoring<class_Area_property_monitoring>`\ 设置为\ ``true``\ 。如果\ :ref:`MeshLibrary<class_MeshLibrary>`\ 有碰撞形状\ :ref:`Shape<class_Shape>`\ ，就会检测到\ :ref:`GridMap<class_GridMap>`\ 。

\ ``body``, 如果它存在于场景树中, 是其他\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的\ :ref:`Node<class_Node>`\ 。

----

.. _class_Area_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

当\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的一个\ :ref:`Shape<class_Shape>`\ 进入这个区域的一个\ :ref:`Shape<class_Shape>`\ 时触发。需要将\ :ref:`monitoring<class_Area_property_monitoring>`\ 设置为\ ``true``\ 。如果\ :ref:`MeshLibrary<class_MeshLibrary>`\ 有碰撞\ :ref:`Shape<class_Shape>`\ ，就会检测到\ :ref:`GridMap<class_GridMap>`\ 。

\ ``body_rid`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`MeshLibrary<class_MeshLibrary>`\ 的\ :ref:`CollisionObject<class_CollisionObject>`\ 的\ :ref:`RID<class_RID>`\ 。

\ ``body`` :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的\ :ref:`Node<class_Node>`\ ，如果它存在于树中的话。

\ ``body_shape_index`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``body.shape_owner_get_owner(body_shape_index)``\ 获取\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

\ ``local_shape_index``\ 这个区域的\ :ref:`Shape<class_Shape>`\ 的索引，由\ :ref:`PhysicsServer<class_PhysicsServer>`\ 使用。用\ ``self.shape_owner_get_owner(local_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

----

.. _class_Area_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

当\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的一个\ :ref:`Shape<class_Shape>`\ 进入这个区域的一个\ :ref:`Shape<class_Shape>`\ 时触发。需要将\ :ref:`monitoring<class_Area_property_monitoring>`\ 设置为\ ``true``\ 。如果\ :ref:`MeshLibrary<class_MeshLibrary>`\ 有碰撞\ :ref:`Shape<class_Shape>`\ ，就会检测到\ :ref:`GridMap<class_GridMap>`\ 。

\ ``body_rid`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`MeshLibrary<class_MeshLibrary>`\ 的\ :ref:`CollisionObject<class_CollisionObject>`\ 的\ :ref:`RID<class_RID>`\ 。

\ ``body`` :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的\ :ref:`Node<class_Node>`\ ，如果它存在于树中的话。

\ ``body_shape_index`` :ref:`PhysicsServer<class_PhysicsServer>`\ 使用的\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或\ :ref:`GridMap<class_GridMap>`\ 的\ :ref:`Shape<class_Shape>`\ 的索引。用\ ``body.shape_owner_get_owner(body_shape_index)``\ 获取\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

\ ``local_shape_index``\ 这个区域的\ :ref:`Shape<class_Shape>`\ 的索引，由\ :ref:`PhysicsServer<class_PhysicsServer>`\ 使用。用\ ``self.shape_owner_get_owner(local_shape_index)``\ 获得\ :ref:`CollisionShape<class_CollisionShape>`\ 节点。

枚举
----

.. _enum_Area_SpaceOverride:

.. _class_Area_constant_SPACE_OVERRIDE_DISABLED:

.. _class_Area_constant_SPACE_OVERRIDE_COMBINE:

.. _class_Area_constant_SPACE_OVERRIDE_COMBINE_REPLACE:

.. _class_Area_constant_SPACE_OVERRIDE_REPLACE:

.. _class_Area_constant_SPACE_OVERRIDE_REPLACE_COMBINE:

enum **SpaceOverride**:

- **SPACE_OVERRIDE_DISABLED** = **0** --- 这个区域不影响重力/阻尼。

- **SPACE_OVERRIDE_COMBINE** = **1** --- 该区域将其重力/阻尼值加到迄今为止计算出的任何值上（按 :ref:`priority<class_Area_property_priority>` 排序）。

- **SPACE_OVERRIDE_COMBINE_REPLACE** = **2** --- 该区域将其重力/阻尼值添加到到目前为止已计算的任何内容（按 :ref:`priority<class_Area_property_priority>` 顺序），而忽略任何较低优先级的区域。

- **SPACE_OVERRIDE_REPLACE** = **3** --- 该区域将替换所有重力/阻尼，甚至是默认值，而忽略任何较低优先级的区域。

- **SPACE_OVERRIDE_REPLACE_COMBINE** = **4** --- 这个区域取代了到目前为止计算出的任何重力/阻尼（按 :ref:`priority<class_Area_property_priority>` 顺序），但继续计算其余的区域。

属性说明
--------

.. _class_Area_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+-----------+-------------------------+
| *Default* | ``0.1``                 |
+-----------+-------------------------+
| *Setter*  | set_angular_damp(value) |
+-----------+-------------------------+
| *Getter*  | get_angular_damp()      |
+-----------+-------------------------+

物体在此区域停止旋转的速度。代表每秒损失的角速度.

关于阻尼的更多细节，见\ :ref:`ProjectSettings.physics/3d/default_angular_damp<class_ProjectSettings_property_physics/3d/default_angular_damp>`\ 。

----

.. _class_Area_property_audio_bus_name:

- :ref:`String<class_String>` **audio_bus_name**

+-----------+----------------------+
| *Default* | ``"Master"``         |
+-----------+----------------------+
| *Setter*  | set_audio_bus(value) |
+-----------+----------------------+
| *Getter*  | get_audio_bus()      |
+-----------+----------------------+

该区域音频总线的名称。

----

.. _class_Area_property_audio_bus_override:

- :ref:`bool<class_bool>` **audio_bus_override**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_audio_bus_override(value) |
+-----------+-------------------------------+
| *Getter*  | is_overriding_audio_bus()     |
+-----------+-------------------------------+

为 ``true`` 时该区域的音频总线将覆盖默认的音频总线。

----

.. _class_Area_property_gravity:

- :ref:`float<class_float>` **gravity**

+-----------+--------------------+
| *Default* | ``9.8``            |
+-----------+--------------------+
| *Setter*  | set_gravity(value) |
+-----------+--------------------+
| *Getter*  | get_gravity()      |
+-----------+--------------------+

该区域内的重力强度（单位：m/s^2）。这个值是重力向量的倍数。这个量在改变引力大小而不改变其方向很有用。

----

.. _class_Area_property_gravity_distance_scale:

- :ref:`float<class_float>` **gravity_distance_scale**

+-----------+-----------------------------------+
| *Default* | ``0.0``                           |
+-----------+-----------------------------------+
| *Setter*  | set_gravity_distance_scale(value) |
+-----------+-----------------------------------+
| *Getter*  | get_gravity_distance_scale()      |
+-----------+-----------------------------------+

点重力的衰减系数。该值越大，重力值随距离下降的速度就越快。

----

.. _class_Area_property_gravity_point:

- :ref:`bool<class_bool>` **gravity_point**

+-----------+-----------------------------+
| *Default* | ``false``                   |
+-----------+-----------------------------+
| *Setter*  | set_gravity_is_point(value) |
+-----------+-----------------------------+
| *Getter*  | is_gravity_a_point()        |
+-----------+-----------------------------+

如果 ``true``\ ，则从一个点计算重力（通过 :ref:`gravity_vec<class_Area_property_gravity_vec>` 设置）。参阅 :ref:`space_override<class_Area_property_space_override>`\ 。

----

.. _class_Area_property_gravity_vec:

- :ref:`Vector3<class_Vector3>` **gravity_vec**

+-----------+---------------------------+
| *Default* | ``Vector3( 0, -1, 0 )``   |
+-----------+---------------------------+
| *Setter*  | set_gravity_vector(value) |
+-----------+---------------------------+
| *Getter*  | get_gravity_vector()      |
+-----------+---------------------------+

区域的未归一化的重力向量。如果重力作用在一个点上，则它将是引力点。请参阅 :ref:`gravity_point<class_Area_property_gravity_point>`\ 。

----

.. _class_Area_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+-----------+------------------------+
| *Default* | ``0.1``                |
+-----------+------------------------+
| *Setter*  | set_linear_damp(value) |
+-----------+------------------------+
| *Getter*  | get_linear_damp()      |
+-----------+------------------------+

物体在此区域减速的速率。代表每秒损失的线速度。

关于阻尼的更多细节，见\ :ref:`ProjectSettings.physics/3d/default_linear_damp<class_ProjectSettings_property_physics/3d/default_linear_damp>`\ 。

----

.. _class_Area_property_monitorable:

- :ref:`bool<class_bool>` **monitorable**

+-----------+------------------------+
| *Default* | ``true``               |
+-----------+------------------------+
| *Setter*  | set_monitorable(value) |
+-----------+------------------------+
| *Getter*  | is_monitorable()       |
+-----------+------------------------+

为 ``true`` 时其他监测区域可以检测到这个区域。

----

.. _class_Area_property_monitoring:

- :ref:`bool<class_bool>` **monitoring**

+-----------+-----------------------+
| *Default* | ``true``              |
+-----------+-----------------------+
| *Setter*  | set_monitoring(value) |
+-----------+-----------------------+
| *Getter*  | is_monitoring()       |
+-----------+-----------------------+

为 ``true`` 时该区域能够检测到进入和退出该区域的实体或区域。

----

.. _class_Area_property_priority:

- :ref:`float<class_float>` **priority**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_priority(value) |
+-----------+---------------------+
| *Getter*  | get_priority()      |
+-----------+---------------------+

该区域的优先级。将优先处理优先级较高的区域。

----

.. _class_Area_property_reverb_bus_amount:

- :ref:`float<class_float>` **reverb_bus_amount**

+-----------+--------------------------+
| *Default* | ``0.0``                  |
+-----------+--------------------------+
| *Setter*  | set_reverb_amount(value) |
+-----------+--------------------------+
| *Getter*  | get_reverb_amount()      |
+-----------+--------------------------+

该区域对其相关音频应用混响的程度。范围从 ``0`` 到 ``1``\ ，精度为 ``0.1``\ 。

----

.. _class_Area_property_reverb_bus_enable:

- :ref:`bool<class_bool>` **reverb_bus_enable**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_use_reverb_bus(value) |
+-----------+---------------------------+
| *Getter*  | is_using_reverb_bus()     |
+-----------+---------------------------+

为 ``true`` 时该区域会将混响应用于其相关音频。

----

.. _class_Area_property_reverb_bus_name:

- :ref:`String<class_String>` **reverb_bus_name**

+-----------+-----------------------+
| *Default* | ``"Master"``          |
+-----------+-----------------------+
| *Setter*  | set_reverb_bus(value) |
+-----------+-----------------------+
| *Getter*  | get_reverb_bus()      |
+-----------+-----------------------+

该区域的相关音频要使用的混响总线名称。

----

.. _class_Area_property_reverb_bus_uniformity:

- :ref:`float<class_float>` **reverb_bus_uniformity**

+-----------+------------------------------+
| *Default* | ``0.0``                      |
+-----------+------------------------------+
| *Setter*  | set_reverb_uniformity(value) |
+-----------+------------------------------+
| *Getter*  | get_reverb_uniformity()      |
+-----------+------------------------------+

该区域的混响效果均匀的程度。范围从 ``0`` 到 ``1``\ ，精度为 ``0.1``\ 。

----

.. _class_Area_property_space_override:

- :ref:`SpaceOverride<enum_Area_SpaceOverride>` **space_override**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_space_override_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_space_override_mode()      |
+-----------+--------------------------------+

该区域内重力和阻尼计算的覆盖模式。可能的值见\ :ref:`SpaceOverride<enum_Area_SpaceOverride>`\ 。

方法说明
--------

.. _class_Area_method_get_overlapping_areas:

- :ref:`Array<class_Array>` **get_overlapping_areas** **(** **)** |const|

返回相交的\ ``Area``\ 的列表。重叠区域的\ :ref:`CollisionObject.collision_layer<class_CollisionObject_property_collision_layer>`\ 必须是这个区域\ :ref:`CollisionObject.collision_mask<class_CollisionObject_property_collision_mask>`\ 的一部分，这样才能被检测到。

出于性能的考虑，因碰撞都是同时处理的，这个列表在物理步骤中只修改一次，而不是在物体被移动后立即修改。考虑使用信号来代替。

----

.. _class_Area_method_get_overlapping_bodies:

- :ref:`Array<class_Array>` **get_overlapping_bodies** **(** **)** |const|

返回相交的\ :ref:`PhysicsBody<class_PhysicsBody>`\ 的列表。重叠物体的\ :ref:`CollisionObject.collision_layer<class_CollisionObject_property_collision_layer>`\ 必须是这个区域\ :ref:`CollisionObject.collision_mask<class_CollisionObject_property_collision_mask>`\ 的一部分，这样才能被检测到。

出于性能的考虑，因碰撞都是同时处理的，这个列表在物理步骤中只修改一次，而不是在物体被移动后立即修改。考虑使用信号来代替。

----

.. _class_Area_method_overlaps_area:

- :ref:`bool<class_bool>` **overlaps_area** **(** :ref:`Node<class_Node>` area **)** |const|

如果 ``true``\ ，则给定区域与该区域重叠.

\ **注意：**\ 在移动物体后，这个测试的结果不是即时的。为了性能，重叠列表在每一帧和物理步骤之前更新一次。可以考虑用信号代替。

----

.. _class_Area_method_overlaps_body:

- :ref:`bool<class_bool>` **overlaps_body** **(** :ref:`Node<class_Node>` body **)** |const|

如果为\ ``true``\ ，则给定的物理体与该区域重叠.

\ **注意：**\ 在移动物体后，这个测试的结果不是即时的。为了提高性能，重叠列表在每一帧和物理步骤之前更新一次。可以考虑使用信号来代替。

\ ``body``\ 参数可以是一个\ :ref:`PhysicsBody<class_PhysicsBody>`\ 或一个\ :ref:`GridMap<class_GridMap>`\ 实例（虽然GridMaps本身不是物理体，但它们用碰撞形状注册它们的瓦片(tiles)作为一个虚拟物理体）。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
