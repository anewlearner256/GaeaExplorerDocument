:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the SceneTree.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_SceneTree:

SceneTree
=========

**Inherits:** :ref:`MainLoop<class_MainLoop>` **<** :ref:`Object<class_Object>`

通过节点层次结构管理游戏循环。

描述
----

作为最重要的类之一，\ ``SceneTree`` 管理着场景中节点的层次结构以及场景本身。节点可以被添加、检索和删除。整个场景树可以被暂停，包括当前场景。场景可以被加载、切换和重新加载。

你也可以使用 ``SceneTree`` 将你的节点组织成组，每个节点都可以被分配到你想要创建的组，例如“敌人”组。然后你可以遍历这些组，甚至可以统一对所有组成员调用方法并设置属性。

\ ``SceneTree`` 是场景所使用的默认 :ref:`MainLoop<class_MainLoop>` 实现，因此掌控着游戏循环。

教程
----

- :doc:`../tutorials/scripting/scene_tree`

- :doc:`../tutorials/rendering/multiple_resolutions`

属性
----

+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                                         | :ref:`current_scene<class_SceneTree_property_current_scene>`                                   |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`debug_collisions_hint<class_SceneTree_property_debug_collisions_hint>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`debug_navigation_hint<class_SceneTree_property_debug_navigation_hint>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                                         | :ref:`edited_scene_root<class_SceneTree_property_edited_scene_root>`                           |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>`                     | :ref:`multiplayer<class_SceneTree_property_multiplayer>`                                       |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`multiplayer_poll<class_SceneTree_property_multiplayer_poll>`                             | ``true``  |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` | :ref:`network_peer<class_SceneTree_property_network_peer>`                                     |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`paused<class_SceneTree_property_paused>`                                                 | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`refuse_new_network_connections<class_SceneTree_property_refuse_new_network_connections>` | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Viewport<class_Viewport>`                                 | :ref:`root<class_SceneTree_property_root>`                                                     |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`use_font_oversampling<class_SceneTree_property_use_font_oversampling>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+

方法
----

+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group<class_SceneTree_method_call_group>` **(** :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` **(** :ref:`int<class_int>` flags, :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|                                                                             |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene<class_SceneTree_method_change_scene>` **(** :ref:`String<class_String>` path **)**                                                                                                                                                                     |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene_to<class_SceneTree_method_change_scene_to>` **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**                                                                                                                                             |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneTreeTimer<class_SceneTreeTimer>` | :ref:`create_timer<class_SceneTree_method_create_timer>` **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` pause_mode_process=true **)**                                                                                                                  |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_frame<class_SceneTree_method_get_frame>` **(** **)** |const|                                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`     | :ref:`get_network_connected_peers<class_SceneTree_method_get_network_connected_peers>` **(** **)** |const|                                                                                                                                                                |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_network_unique_id<class_SceneTree_method_get_network_unique_id>` **(** **)** |const|                                                                                                                                                                            |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_node_count<class_SceneTree_method_get_node_count>` **(** **)** |const|                                                                                                                                                                                          |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`get_nodes_in_group<class_SceneTree_method_get_nodes_in_group>` **(** :ref:`String<class_String>` group **)**                                                                                                                                                        |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_rpc_sender_id<class_SceneTree_method_get_rpc_sender_id>` **(** **)** |const|                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`has_group<class_SceneTree_method_has_group>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                                                   |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`has_network_peer<class_SceneTree_method_has_network_peer>` **(** **)** |const|                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`is_input_handled<class_SceneTree_method_is_input_handled>` **(** **)**                                                                                                                                                                                              |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`is_network_server<class_SceneTree_method_is_network_server>` **(** **)** |const|                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group<class_SceneTree_method_notify_group>` **(** :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**                                                                                                                                |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group_flags<class_SceneTree_method_notify_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**                                                                                  |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`queue_delete<class_SceneTree_method_queue_delete>` **(** :ref:`Object<class_Object>` obj **)**                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`quit<class_SceneTree_method_quit>` **(** :ref:`int<class_int>` exit_code=-1 **)**                                                                                                                                                                                   |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`reload_current_scene<class_SceneTree_method_reload_current_scene>` **(** **)**                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_auto_accept_quit<class_SceneTree_method_set_auto_accept_quit>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group<class_SceneTree_method_set_group>` **(** :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                                               |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group_flags<class_SceneTree_method_set_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                 |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_input_as_handled<class_SceneTree_method_set_input_as_handled>` **(** **)**                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                                                        |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_screen_stretch<class_SceneTree_method_set_screen_stretch>` **(** :ref:`StretchMode<enum_SceneTree_StretchMode>` mode, :ref:`StretchAspect<enum_SceneTree_StretchAspect>` aspect, :ref:`Vector2<class_Vector2>` minsize, :ref:`float<class_float>` scale=1 **)** |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_SceneTree_signal_connected_to_server:

- **connected_to_server** **(** **)**

当这个\ ``SceneTree``\ 的\ :ref:`network_peer<class_SceneTree_property_network_peer>`\ 成功连接到一个服务器时发出。只在客户端发出。

----

.. _class_SceneTree_signal_connection_failed:

- **connection_failed** **(** **)**

每当此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 无法与服务器建立连接时发出。仅在客户端上发出。

----

.. _class_SceneTree_signal_files_dropped:

- **files_dropped** **(** :ref:`PoolStringArray<class_PoolStringArray>` files, :ref:`int<class_int>` screen **)**

当文件从操作系统的文件管理器中被拖到游戏窗口中时发出。参数是一个文件路径列表和拖动文件的屏幕标识符。

----

.. _class_SceneTree_signal_global_menu_action:

- **global_menu_action** **(** :ref:`Variant<class_Variant>` id, :ref:`Variant<class_Variant>` meta **)**

每当单击全局菜单项时触发。

----

.. _class_SceneTree_signal_idle_frame:

- **idle_frame** **(** **)**

在对\ ``SceneTree``\ 中的每个节点调用\ :ref:`Node._process<class_Node_method__process>`\ 之前立即发出。

----

.. _class_SceneTree_signal_network_peer_connected:

- **network_peer_connected** **(** :ref:`int<class_int>` id **)**

当这个\ ``SceneTree``\ 的\ :ref:`network_peer<class_SceneTree_property_network_peer>`\ 与一个新的对等体连接时发出。ID是新对等体的对等体ID。当其他客户端连接到同一个服务器时，客户端会得到通知。当连接到一个服务器时，客户端也会收到该服务器的这个信号（ID为1）。

----

.. _class_SceneTree_signal_network_peer_disconnected:

- **network_peer_disconnected** **(** :ref:`int<class_int>` id **)**

每当此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 与对等方断开连接时发出。当其他客户端与同一服务器断开连接时，客户端会收到通知。

----

.. _class_SceneTree_signal_node_added:

- **node_added** **(** :ref:`Node<class_Node>` node **)**

当将节点添加到 ``SceneTree`` 时发出。

----

.. _class_SceneTree_signal_node_configuration_warning_changed:

- **node_configuration_warning_changed** **(** :ref:`Node<class_Node>` node **)**

当节点的配置更改时发出。仅在 ``tool`` 模式下发射。

----

.. _class_SceneTree_signal_node_removed:

- **node_removed** **(** :ref:`Node<class_Node>` node **)**

当从 ``SceneTree`` 中删除节点时发出。

----

.. _class_SceneTree_signal_node_renamed:

- **node_renamed** **(** :ref:`Node<class_Node>` node **)**

当节点重命名时发出。

----

.. _class_SceneTree_signal_physics_frame:

- **physics_frame** **(** **)**

在 ``SceneTree`` 中的每个节点上调用 :ref:`Node._physics_process<class_Node_method__physics_process>` 之前立即发出。

----

.. _class_SceneTree_signal_screen_resized:

- **screen_resized** **(** **)**

当屏幕分辨率（全屏）或窗口大小（窗口化）改变时发出。

----

.. _class_SceneTree_signal_server_disconnected:

- **server_disconnected** **(** **)**

当此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 与服务器断开连接时发出。仅在客户端上发出。

----

.. _class_SceneTree_signal_tree_changed:

- **tree_changed** **(** **)**

当 ``SceneTree`` 层次结构发生变化（移动或重命名子项等）时发出。

枚举
----

.. _enum_SceneTree_GroupCallFlags:

.. _class_SceneTree_constant_GROUP_CALL_DEFAULT:

.. _class_SceneTree_constant_GROUP_CALL_REVERSE:

.. _class_SceneTree_constant_GROUP_CALL_REALTIME:

.. _class_SceneTree_constant_GROUP_CALL_UNIQUE:

enum **GroupCallFlags**:

- **GROUP_CALL_DEFAULT** = **0** --- 调用没有标志的组（默认）。

- **GROUP_CALL_REVERSE** = **1** --- 以相反的场景顺序调用组。

- **GROUP_CALL_REALTIME** = **2** --- 立即调用一个组（调用通常在空闲时进行）。

- **GROUP_CALL_UNIQUE** = **4** --- 即使调用多次执行，也只调用一次组。

----

.. _enum_SceneTree_StretchMode:

.. _class_SceneTree_constant_STRETCH_MODE_DISABLED:

.. _class_SceneTree_constant_STRETCH_MODE_2D:

.. _class_SceneTree_constant_STRETCH_MODE_VIEWPORT:

enum **StretchMode**:

- **STRETCH_MODE_DISABLED** = **0** --- 未拉伸。

- **STRETCH_MODE_2D** = **1** --- 以更高的分辨率渲染拉伸（插值）。

- **STRETCH_MODE_VIEWPORT** = **2** --- 保持指定的显示分辨率。没有插值。内容可能会出现像素化。

----

.. _enum_SceneTree_StretchAspect:

.. _class_SceneTree_constant_STRETCH_ASPECT_IGNORE:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP_WIDTH:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP_HEIGHT:

.. _class_SceneTree_constant_STRETCH_ASPECT_EXPAND:

enum **StretchAspect**:

- **STRETCH_ASPECT_IGNORE** = **0** --- 用拉伸的内容填充窗口以覆盖过多的空间。内容可能会被拉伸。

- **STRETCH_ASPECT_KEEP** = **1** --- 在任意轴上用黑条填充来保持相同的长宽比。这可以防止失真。

- **STRETCH_ASPECT_KEEP_WIDTH** = **2** --- 垂直展开。如果窗口太宽，可能会出现左/右黑条。

- **STRETCH_ASPECT_KEEP_HEIGHT** = **3** --- 水平展开。如果窗口太高，可能会出现顶部/底部黑条。

- **STRETCH_ASPECT_EXPAND** = **4** --- 在两个方向上扩展，保持相同的纵横比。这可以防止失真，同时避免黑条。

属性说明
--------

.. _class_SceneTree_property_current_scene:

- :ref:`Node<class_Node>` **current_scene**

+----------+--------------------------+
| *Setter* | set_current_scene(value) |
+----------+--------------------------+
| *Getter* | get_current_scene()      |
+----------+--------------------------+

当前场景。

----

.. _class_SceneTree_property_debug_collisions_hint:

- :ref:`bool<class_bool>` **debug_collisions_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_collisions_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_collisions_hint()   |
+-----------+----------------------------------+

如果 ``true``\ ，以调试为目的从编辑器运行游戏时，碰撞形状将是可见的。

----

.. _class_SceneTree_property_debug_navigation_hint:

- :ref:`bool<class_bool>` **debug_navigation_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_navigation_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_navigation_hint()   |
+-----------+----------------------------------+

如果 ``true``\ ，以调试为目的从编辑器运行游戏时，导航多边形将是可见的。

----

.. _class_SceneTree_property_edited_scene_root:

- :ref:`Node<class_Node>` **edited_scene_root**

+----------+------------------------------+
| *Setter* | set_edited_scene_root(value) |
+----------+------------------------------+
| *Getter* | get_edited_scene_root()      |
+----------+------------------------------+

编辑场景的根。

----

.. _class_SceneTree_property_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

+----------+------------------------+
| *Setter* | set_multiplayer(value) |
+----------+------------------------+
| *Getter* | get_multiplayer()      |
+----------+------------------------+

此 ``SceneTree`` 的默认 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 实例。

----

.. _class_SceneTree_property_multiplayer_poll:

- :ref:`bool<class_bool>` **multiplayer_poll**

+-----------+-------------------------------------+
| *Default* | ``true``                            |
+-----------+-------------------------------------+
| *Setter*  | set_multiplayer_poll_enabled(value) |
+-----------+-------------------------------------+
| *Getter*  | is_multiplayer_poll_enabled()       |
+-----------+-------------------------------------+

如果 ``true``\ （默认值），则在 :ref:`idle_frame<class_SceneTree_signal_idle_frame>` 期间启用此 SceneTree 的 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 自动轮询。

如果\ ``false``\ ，则需要手动调用\ :ref:`MultiplayerAPI.poll<class_MultiplayerAPI_method_poll>`\ 来处理网络数据包并投递RPCs/RSETs。这允许在不同的循环（例如物理、线程、特定时间步长）中运行 RPC/RSET，并在从线程访问 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 时进行手动 :ref:`Mutex<class_Mutex>` 保护。

----

.. _class_SceneTree_property_network_peer:

- :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **network_peer**

+----------+-------------------------+
| *Setter* | set_network_peer(value) |
+----------+-------------------------+
| *Getter* | get_network_peer()      |
+----------+-------------------------+

处理 RPC 系统的对等对象（设置后有效地启用网络）。根据peer本身的不同，\ ``SceneTree``\ 将成为网络服务器（检查\ :ref:`is_network_server<class_SceneTree_method_is_network_server>`\ ）并将根节点的网络模式设置为master，或者它将成为根节点被设置为puppet的普通对等体。所有子节点默认设置为继承网络模式。与网络相关的事件（连接、断开连接、新客户端）的处理是通过连接到 ``SceneTree`` 的信号来完成的。

----

.. _class_SceneTree_property_paused:

- :ref:`bool<class_bool>` **paused**

+-----------+------------------+
| *Default* | ``false``        |
+-----------+------------------+
| *Setter*  | set_pause(value) |
+-----------+------------------+
| *Getter*  | is_paused()      |
+-----------+------------------+

如果\ ``true``\ ，\ ``SceneTree``\ 会暂停。这样做会有以下行为:

- 2D和3D物理将停止。这包括信号和碰撞检测。

- 节点不再调用\ :ref:`Node._process<class_Node_method__process>`\ 、\ :ref:`Node._physics_process<class_Node_method__physics_process>`\ 和\ :ref:`Node._input<class_Node_method__input>`\ 。

----

.. _class_SceneTree_property_refuse_new_network_connections:

- :ref:`bool<class_bool>` **refuse_new_network_connections**

+-----------+-------------------------------------------+
| *Default* | ``false``                                 |
+-----------+-------------------------------------------+
| *Setter*  | set_refuse_new_network_connections(value) |
+-----------+-------------------------------------------+
| *Getter*  | is_refusing_new_network_connections()     |
+-----------+-------------------------------------------+

如果 ``true``\ ，则 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 拒绝新的传入连接。

----

.. _class_SceneTree_property_root:

- :ref:`Viewport<class_Viewport>` **root**

+----------+------------+
| *Getter* | get_root() |
+----------+------------+

``SceneTree`` 的根 :ref:`Viewport<class_Viewport>`\ 。

----

.. _class_SceneTree_property_use_font_oversampling:

- :ref:`bool<class_bool>` **use_font_oversampling**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_use_font_oversampling(value) |
+-----------+----------------------------------+
| *Getter*  | is_using_font_oversampling()     |
+-----------+----------------------------------+

为 ``true`` 时启用字体过采样。这意味着根据视窗的缩放比例不同，\ :ref:`DynamicFont<class_DynamicFont>` 渲染的大小会比配置大小更高或更低。例如，如果视窗的缩放系数为 1.5，那么配置为 14 号大小的字体将会按照 21 号大小渲染（\ ``14 * 1.5``\ ）。

\ **注意：**\ 字体过采样仅在视窗拉伸模式为 :ref:`STRETCH_MODE_VIEWPORT<class_SceneTree_constant_STRETCH_MODE_VIEWPORT>` 且拉伸比例模式不是 :ref:`STRETCH_ASPECT_IGNORE<class_SceneTree_constant_STRETCH_ASPECT_IGNORE>` 时有效。

\ **注意：**\ 项目启动时会为活动的 ``SceneTree`` 自动设置该属性，取值为 :ref:`ProjectSettings<class_ProjectSettings>` 的 ``rendering/quality/dynamic_fonts/use_oversampling``\ 。不过运行时可以根据需要对该属性进行覆盖。

方法说明
--------

.. _class_SceneTree_method_call_group:

- :ref:`Variant<class_Variant>` **call_group** **(** :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|

对给定组的每个成员调用 ``method``\ 。您可以通过在方法调用结束时指定参数来将参数传递给 ``method``\ 。此方法等效于使用 :ref:`GROUP_CALL_DEFAULT<class_SceneTree_constant_GROUP_CALL_DEFAULT>` 标志调用 :ref:`call_group_flags<class_SceneTree_method_call_group_flags>`\ 。

\ **注：** ``method``\ 最多只能有5个参数（总共7个参数传递给这个方法）。

\ **注意：** 由于设计限制，如果参数之一为 ``null``\ ，\ :ref:`call_group<class_SceneTree_method_call_group>` 将静默失败。

\ **注意：** :ref:`call_group<class_SceneTree_method_call_group>` 将始终调用具有一帧延迟的方法，其方式类似于 :ref:`Object.call_deferred<class_Object_method_call_deferred>`\ 。要立即调用方法，请将 :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` 与 :ref:`GROUP_CALL_REALTIME<class_SceneTree_constant_GROUP_CALL_REALTIME>` 标志一起使用。

----

.. _class_SceneTree_method_call_group_flags:

- :ref:`Variant<class_Variant>` **call_group_flags** **(** :ref:`int<class_int>` flags, :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|

对给定组的每个成员调用 ``method``\ ，遵从给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。您可以通过在方法调用结束时指定参数来将参数传递给 ``method``\ 。

\ **注：** ``method``\ 最多只能有5个参数（总共8个参数传递给这个方法）。

\ **注意：** 由于设计限制，如果参数之一为 ``null``\ ，\ :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` 将静默失败。

::

    # 立即以相反的顺序调用该方法。
    get_tree().call_group_flags(SceneTree.GROUP_CALL_REALTIME | SceneTree.GROUP_CALL_REVERSE, "bases", "destroy")

----

.. _class_SceneTree_method_change_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene** **(** :ref:`String<class_String>` path **)**

将正在运行的场景改变为指定的\ ``path``\ 中的场景，在将其加载到\ :ref:`PackedScene<class_PackedScene>`\ 中并创建一个新的实例。

成功时返回\ :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，如果\ ``path``\ 不能被加载到一个\ :ref:`PackedScene<class_PackedScene>`\ 中，，该场景不能被实例化，则返回\ :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ 。

\ **注意：**\ 场景改变有延迟，即新的场景节点是在下一个空闲帧中添加。在\ :ref:`change_scene<class_SceneTree_method_change_scene>`\ 调用之后，你不能立即访问它。

----

.. _class_SceneTree_method_change_scene_to:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene_to** **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**

将正在运行的场景改变为给定的\ :ref:`PackedScene<class_PackedScene>`\ 的新实例。

成功时返回\ :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，如果场景不能被实例化，则返回\ :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ 。

\ **注意：** 场景的改变是延迟的，新的场景节点是在下一个空闲帧中添加。在调用\ :ref:`change_scene_to<class_SceneTree_method_change_scene_to>`\ 之后，你不能立即访问它。

----

.. _class_SceneTree_method_create_timer:

- :ref:`SceneTreeTimer<class_SceneTreeTimer>` **create_timer** **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` pause_mode_process=true **)**

返回一个 :ref:`SceneTreeTimer<class_SceneTreeTimer>`\ ，在这个 ``SceneTree`` 中经过给定的时间（秒）后，将发出 :ref:`SceneTreeTimer.timeout<class_SceneTreeTimer_signal_timeout>` 信号。如果 ``pause_mode_process`` 被设置为 ``false``\ ，暂停 ``SceneTree`` 也将暂停该定时器。

常用于创建一次性的延迟定时器，如下面的例子:

::

    func some_function():
        print("开始")
        yield(get_tree().create_timer(1.0), "timeout")
        print("结束")

计时器将在其时间结束后被自动释放。

----

.. _class_SceneTree_method_get_frame:

- :ref:`int<class_int>` **get_frame** **(** **)** |const|

返回当前的帧数，即自应用程序启动以来的总帧数。

----

.. _class_SceneTree_method_get_network_connected_peers:

- :ref:`PoolIntArray<class_PoolIntArray>` **get_network_connected_peers** **(** **)** |const|

返回此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 的所有连接对等方的对等 ID。

----

.. _class_SceneTree_method_get_network_unique_id:

- :ref:`int<class_int>` **get_network_unique_id** **(** **)** |const|

返回此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 的唯一对等 ID。

----

.. _class_SceneTree_method_get_node_count:

- :ref:`int<class_int>` **get_node_count** **(** **)** |const|

返回此\ ``SceneTree``\ 中的节点数。

----

.. _class_SceneTree_method_get_nodes_in_group:

- :ref:`Array<class_Array>` **get_nodes_in_group** **(** :ref:`String<class_String>` group **)**

返回一个分配给给定组的所有节点的列表。

----

.. _class_SceneTree_method_get_rpc_sender_id:

- :ref:`int<class_int>` **get_rpc_sender_id** **(** **)** |const|

返回最近收到的RPC调用的发送者的对等ID。

----

.. _class_SceneTree_method_has_group:

- :ref:`bool<class_bool>` **has_group** **(** :ref:`String<class_String>` name **)** |const|

如果给定的组存在，返回\ ``true``\ 。

----

.. _class_SceneTree_method_has_network_peer:

- :ref:`bool<class_bool>` **has_network_peer** **(** **)** |const|

如果有一个\ :ref:`network_peer<class_SceneTree_property_network_peer>`\ 设置，返回\ ``true``\ 。

----

.. _class_SceneTree_method_is_input_handled:

- :ref:`bool<class_bool>` **is_input_handled** **(** **)**

如果最近的 :ref:`InputEvent<class_InputEvent>` 被使用 :ref:`set_input_as_handled<class_SceneTree_method_set_input_as_handled>` 设置为已处理，返回 ``true``\ 。

----

.. _class_SceneTree_method_is_network_server:

- :ref:`bool<class_bool>` **is_network_server** **(** **)** |const|

如果此 ``SceneTree`` 的 :ref:`network_peer<class_SceneTree_property_network_peer>` 处于服务器模式（侦听连接），则返回 ``true``\ 。

----

.. _class_SceneTree_method_notify_group:

- void **notify_group** **(** :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**

将给定的通知发送给 ``group`` 的所有成员。

----

.. _class_SceneTree_method_notify_group_flags:

- void **notify_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**

将给定的通知发送给 ``group`` 的所有成员，遵从给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。

----

.. _class_SceneTree_method_queue_delete:

- void **queue_delete** **(** :ref:`Object<class_Object>` obj **)**

将给定的对象排队准备删除，即在当前帧之后调用 :ref:`Object.free<class_Object_method_free>` 。

----

.. _class_SceneTree_method_quit:

- void **quit** **(** :ref:`int<class_int>` exit_code=-1 **)**

在当前迭代结束时退出应用程序。进程的 ``exit_code`` 可以选择性地作为参数传递。如果这个参数大于等于 ``0``\ ，它将覆盖在退出应用程序之前定义的 :ref:`OS.exit_code<class_OS_property_exit_code>`\ 。

\ **注意：**\ 这个方法在 iOS 上不起作用。根据《iOS 人机界面指南》中的建议，用户应该通过 Home 键来关闭应用程序。

----

.. _class_SceneTree_method_reload_current_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **reload_current_scene** **(** **)**

重新加载当前活动的场景。

成功时返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，如果尚未定义 :ref:`current_scene<class_SceneTree_property_current_scene>`\ ，则返回 :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>`\ ，如果 :ref:`current_scene<class_SceneTree_property_current_scene>` 无法加载到 :ref:`PackedScene<class_PackedScene>` 中，则返回 :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>`\ ，如果场景无法加载，则返回 :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ 。

----

.. _class_SceneTree_method_set_auto_accept_quit:

- void **set_auto_accept_quit** **(** :ref:`bool<class_bool>` enabled **)**

为 ``true`` 时应用程序将自动接受退出。默认启用。

对于移动平台，请参阅 :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>`\ 。

----

.. _class_SceneTree_method_set_group:

- void **set_group** **(** :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

在给定组的所有成员上将给定的属性 ``property`` 设置为 ``value``\ 。

----

.. _class_SceneTree_method_set_group_flags:

- void **set_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

将给定的 ``property`` 设置为给定组的所有成员的 ``value``\ ，尊重给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。

----

.. _class_SceneTree_method_set_input_as_handled:

- void **set_input_as_handled** **(** **)**

将最新的 :ref:`InputEvent<class_InputEvent>` 标记为已处理。

----

.. _class_SceneTree_method_set_quit_on_go_back:

- void **set_quit_on_go_back** **(** :ref:`bool<class_bool>` enabled **)**

为 ``true`` 时应用程序将在返回时自动退出（例如在 Android 上）。默认启用。

要在这个选项被禁用时处理“返回”按钮，请使用 :ref:`MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST<class_MainLoop_constant_NOTIFICATION_WM_GO_BACK_REQUEST>`\ 。

----

.. _class_SceneTree_method_set_screen_stretch:

- void **set_screen_stretch** **(** :ref:`StretchMode<enum_SceneTree_StretchMode>` mode, :ref:`StretchAspect<enum_SceneTree_StretchAspect>` aspect, :ref:`Vector2<class_Vector2>` minsize, :ref:`float<class_float>` scale=1 **)**

将屏幕拉伸配置为给定的 :ref:`StretchMode<enum_SceneTree_StretchMode>`\ 、\ :ref:`StretchAspect<enum_SceneTree_StretchAspect>`\ 、最小尺寸和 ``scale``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
