:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the WebSocketClient.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebSocketClient:

WebSocketClient
===============

**Inherits:** :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>` **<** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

WebSocket客户端的实现。

描述
----

该类实现了一个与任何符合RFC 6455的WebSocket服务器兼容的WebSocket客户端。

这个客户端可以选择性地作为\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 的网络对等体使用。

在启动客户端后（\ :ref:`connect_to_url<class_WebSocketClient_method_connect_to_url>`\ ），你需要\ :ref:`NetworkedMultiplayerPeer.poll<class_NetworkedMultiplayerPeer_method_poll>`\ 它以固定的时间间隔，例如在\ :ref:`Node._process<class_Node_method__process>`\ 内。

当连接、断开连接或有新数据时，你将收到适当的信号。

属性
----

+-----------------------------------------------+----------------------------------------------------------------------------------------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`trusted_ssl_certificate<class_WebSocketClient_property_trusted_ssl_certificate>` |
+-----------------------------------------------+----------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`verify_ssl<class_WebSocketClient_property_verify_ssl>`                           |
+-----------------------------------------------+----------------------------------------------------------------------------------------+

方法
----

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`connect_to_url<class_WebSocketClient_method_connect_to_url>` **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ) **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`disconnect_from_host<class_WebSocketClient_method_disconnect_from_host>` **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**                                                                                                                                                      |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_connected_host<class_WebSocketClient_method_get_connected_host>` **(** **)** |const|                                                                                                                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_connected_port<class_WebSocketClient_method_get_connected_port>` **(** **)** |const|                                                                                                                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_WebSocketClient_signal_connection_closed:

- **connection_closed** **(** :ref:`bool<class_bool>` was_clean_close **)**

当与服务器的连接被关闭时触发。\ ``was_clean_close`` 将是\ ``true`` 如果连接完全关闭。

----

.. _class_WebSocketClient_signal_connection_error:

- **connection_error** **(** **)**

当与服务器的连接失败时触发。

----

.. _class_WebSocketClient_signal_connection_established:

- **connection_established** **(** :ref:`String<class_String>` protocol **)**

当与服务器建立连接时触发，\ ``protocol``\ 协议将包含与服务器达成一致的子协议。

----

.. _class_WebSocketClient_signal_data_received:

- **data_received** **(** **)**

当收到WebSocket消息时触发。

\ **注意：**\ 当作为高级别的多人对等体使用时，这个信号\ *not*\ 不发射。

----

.. _class_WebSocketClient_signal_server_close_request:

- **server_close_request** **(** :ref:`int<class_int>` code, :ref:`String<class_String>` reason **)**

当服务器请求完全关闭时触发。你应该继续进行轮询，直到获得\ :ref:`connection_closed<class_WebSocketClient_signal_connection_closed>`\ 信号，以实现彻底的关闭。更多细节参阅\ :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>`\ 。

属性说明
--------

.. _class_WebSocketClient_property_trusted_ssl_certificate:

- :ref:`X509Certificate<class_X509Certificate>` **trusted_ssl_certificate**

+----------+------------------------------------+
| *Setter* | set_trusted_ssl_certificate(value) |
+----------+------------------------------------+
| *Getter* | get_trusted_ssl_certificate()      |
+----------+------------------------------------+

如果指定，该\ :ref:`X509Certificate<class_X509Certificate>`\ 将是连接到SSL主机时唯一接受的证书。任何由服务器提供的其他证书将被视为无效。

\ **注意：**\ 由于浏览器的限制，在HTML5导出中不支持指定一个自定义的\ ``trusted_ssl_certificate``\ 。

----

.. _class_WebSocketClient_property_verify_ssl:

- :ref:`bool<class_bool>` **verify_ssl**

+----------+-------------------------------+
| *Setter* | set_verify_ssl_enabled(value) |
+----------+-------------------------------+
| *Getter* | is_verify_ssl_enabled()       |
+----------+-------------------------------+

如果 ``true``\ ，则启用 SSL 证书验证。

\ **注意：** 你必须在项目设置中指定要使用的证书，以便在导出时发挥作用。

方法说明
--------

.. _class_WebSocketClient_method_connect_to_url:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_to_url** **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ) **)**

连接到给定的URL，请求给定的\ ``protocols``\ 之一作为子协议。如果列表为空，默认为空，将不请求子协议。

如果\ ``true``\ 作为\ ``gd_mp_api``\ 被传递，客户端将表现得像\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 的网络对等体，与非GaaeExplorer服务器的连接将不工作，并且\ :ref:`data_received<class_WebSocketClient_signal_data_received>`\ 将不被触发。

如果\ ``false``\ 被传递，默认传递，你必须调用\ :ref:`PacketPeer<class_PacketPeer>`\ 函数，\ ``put_packet``, ``get_packet``\ 等，对通过\ ``get_peer(1)``\ 返回的\ :ref:`WebSocketPeer<class_WebSocketPeer>`\ ，而不是直接对该对象，例如，\ ``get_peer(1).put_packet(data)``\ 。

你可以选择传递一个\ ``custom_headers``\ 的列表，以添加到握手的HTTP请求中。

\ **注意：** 为了避免HTML5中的混合内容警告或错误，须使用以\ ``wss://``\ （安全）开头的\ ``url``\ ，而不是\ ``ws://``\ 。这样做时，确保使用与服务器的SSL证书中定义的完全合格的域名。不要直接通过IP地址进行\ ``wss://``\ 连接，因为它不会与SSL证书相匹配。

\ **注意：**\ 由于浏览器的限制，指定\ ``custom_headers``\ 在HTML5导出中不被支持。

----

.. _class_WebSocketClient_method_disconnect_from_host:

- void **disconnect_from_host** **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**

断开此客户端与所连接主机的连接。更多信息参阅\ :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>`\ 。

----

.. _class_WebSocketClient_method_get_connected_host:

- :ref:`String<class_String>` **get_connected_host** **(** **)** |const|

返回当前连接的主机的IP地址。

----

.. _class_WebSocketClient_method_get_connected_port:

- :ref:`int<class_int>` **get_connected_port** **(** **)** |const|

返回当前连接的主机的IP端口。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
