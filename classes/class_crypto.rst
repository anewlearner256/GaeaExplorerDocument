:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Crypto.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Crypto:

Crypto
======

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

访问高级加密功能。

描述
----

Crypto类允许您访问GaaeExplorer中的一些更高级的加密功能。

目前，这包括生成加密安全的随机字节，RSA密钥和自签名X509证书生成，非对称密钥加密/解密以及签名/验证。

::

    extends Node
    
    var crypto = Crypto.new()
    var key = CryptoKey.new()
    var cert = X509Certificate.new()
    
    func _ready():
        # Generate new RSA key.
        key = crypto.generate_rsa(4096)
        # Generate new self-signed certificate with the given key.
        cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")
        # Save key and certificate in the user folder.
        key.save("user://generated.key")
        cert.save("user://generated.crt")
        # Encryption
        var data = "Some data"
        var encrypted = crypto.encrypt(key, data.to_utf8())
        # Decryption
        var decrypted = crypto.decrypt(key, encrypted)
        # Signing
        var signature = crypto.sign(HashingContext.HASH_SHA256, data.sha256_buffer(), key)
        # Verifying
        var verified = crypto.verify(HashingContext.HASH_SHA256, data.sha256_buffer(), signature, key)
        # Checks
        assert(verified)
        assert(data.to_utf8() == decrypted)

\ **注意：**\ 在HTML5导出中不可用。

方法
----

+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`constant_time_compare<class_Crypto_method_constant_time_compare>` **(** :ref:`PoolByteArray<class_PoolByteArray>` trusted, :ref:`PoolByteArray<class_PoolByteArray>` received **)**                                                                                                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`     | :ref:`decrypt<class_Crypto_method_decrypt>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`PoolByteArray<class_PoolByteArray>` ciphertext **)**                                                                                                                                                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`     | :ref:`encrypt<class_Crypto_method_encrypt>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`PoolByteArray<class_PoolByteArray>` plaintext **)**                                                                                                                                                                                            |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`     | :ref:`generate_random_bytes<class_Crypto_method_generate_random_bytes>` **(** :ref:`int<class_int>` size **)**                                                                                                                                                                                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`CryptoKey<class_CryptoKey>`             | :ref:`generate_rsa<class_Crypto_method_generate_rsa>` **(** :ref:`int<class_int>` size **)**                                                                                                                                                                                                                                                  |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`generate_self_signed_certificate<class_Crypto_method_generate_self_signed_certificate>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`String<class_String>` issuer_name="CN=myserver,O=myorganisation,C=IT", :ref:`String<class_String>` not_before="20140101000000", :ref:`String<class_String>` not_after="20340101000000" **)** |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`     | :ref:`hmac_digest<class_Crypto_method_hmac_digest>` **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` key, :ref:`PoolByteArray<class_PoolByteArray>` msg **)**                                                                                                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`     | :ref:`sign<class_Crypto_method_sign>` **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` hash, :ref:`CryptoKey<class_CryptoKey>` key **)**                                                                                                                                              |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`verify<class_Crypto_method_verify>` **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` hash, :ref:`PoolByteArray<class_PoolByteArray>` signature, :ref:`CryptoKey<class_CryptoKey>` key **)**                                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_Crypto_method_constant_time_compare:

- :ref:`bool<class_bool>` **constant_time_compare** **(** :ref:`PoolByteArray<class_PoolByteArray>` trusted, :ref:`PoolByteArray<class_PoolByteArray>` received **)**

比较两个\ :ref:`PoolByteArray<class_PoolByteArray>`\ 是否相等，而不泄露时间信息，以防止计时攻击。

更多信息参阅\ `这篇博文 <https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy>`__\ 。

----

.. _class_Crypto_method_decrypt:

- :ref:`PoolByteArray<class_PoolByteArray>` **decrypt** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`PoolByteArray<class_PoolByteArray>` ciphertext **)**

用提供的私人\ ``key``\ 解密给定的\ ``ciphertext``\ 。

\ **注意：**\ 所接受的密码文本的最大尺寸受到密钥大小限制。

----

.. _class_Crypto_method_encrypt:

- :ref:`PoolByteArray<class_PoolByteArray>` **encrypt** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`PoolByteArray<class_PoolByteArray>` plaintext **)**

用提供的公钥 ``key`` 加密给定的\ ``plaintext``\ 。

\ **注意：**\ 接受的明文的最大尺寸受到密钥大小的限制。

----

.. _class_Crypto_method_generate_random_bytes:

- :ref:`PoolByteArray<class_PoolByteArray>` **generate_random_bytes** **(** :ref:`int<class_int>` size **)**

生成具有给定 ``size`` 的加密安全随机字节的 :ref:`PoolByteArray<class_PoolByteArray>`\ 。

----

.. _class_Crypto_method_generate_rsa:

- :ref:`CryptoKey<class_CryptoKey>` **generate_rsa** **(** :ref:`int<class_int>` size **)**

生成可用于创建自签名证书并传递给\ :ref:`StreamPeerSSL.accept_stream<class_StreamPeerSSL_method_accept_stream>`\ 的RSA :ref:`CryptoKey<class_CryptoKey>`\ 。

----

.. _class_Crypto_method_generate_self_signed_certificate:

- :ref:`X509Certificate<class_X509Certificate>` **generate_self_signed_certificate** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`String<class_String>` issuer_name="CN=myserver,O=myorganisation,C=IT", :ref:`String<class_String>` not_before="20140101000000", :ref:`String<class_String>` not_after="20340101000000" **)**

根据给定的\ :ref:`CryptoKey<class_CryptoKey>`\ 和\ ``issuer_name``\ 生成自签名的\ :ref:`X509Certificate<class_X509Certificate>`\ 。证书的有效性将由\ ``not_before``\ 和\ ``not_after``\ （第一个有效日期和最后一个有效日期）定义。 ``issuer_name``\ 必须至少包含“ CN =“（通用名称，即域名），“ O =”（组织，即您的公司名称），“ C =“（国家，即2个字母的ISO） -3166组织所在国家/地区的代码）。

一个生成RSA密钥和X509自签名证书的小示例。

::

    var crypto = Crypto.new()
    # Generate 4096 bits RSA key.
    var key = crypto.generate_rsa(4096)
    # Generate self-signed certificate using the given key.
    var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")

----

.. _class_Crypto_method_hmac_digest:

- :ref:`PoolByteArray<class_PoolByteArray>` **hmac_digest** **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` key, :ref:`PoolByteArray<class_PoolByteArray>` msg **)**

使用 ``key`` 生成 ``msg`` 的 `HMAC <https://en.wikipedia.org/wiki/HMAC>`__ 摘要。 ``hash_type`` 参数是用于内部和外部哈希的哈希算法。

目前仅支持 :ref:`HashingContext.HASH_SHA256<class_HashingContext_constant_HASH_SHA256>` 和 :ref:`HashingContext.HASH_SHA1<class_HashingContext_constant_HASH_SHA1>`\ 。

----

.. _class_Crypto_method_sign:

- :ref:`PoolByteArray<class_PoolByteArray>` **sign** **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` hash, :ref:`CryptoKey<class_CryptoKey>` key **)**

使用提供的私有\ ``key``\ 对类型为\ ``hash_type``\ 的给定的\ ``hash``\ 进行签名。

----

.. _class_Crypto_method_verify:

- :ref:`bool<class_bool>` **verify** **(** :ref:`HashType<enum_HashingContext_HashType>` hash_type, :ref:`PoolByteArray<class_PoolByteArray>` hash, :ref:`PoolByteArray<class_PoolByteArray>` signature, :ref:`CryptoKey<class_CryptoKey>` key **)**

对照提供的公共\ ``key``\ 验证类型为\ ``hash_type``\ 的\ ``hash_type``\ 的给定\ ``签名``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
