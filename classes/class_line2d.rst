:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Line2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Line2D:

Line2D
======

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

一条2D线。

描述
----

在 2D 空间中通过几个点的线。

\ **注意：**\ 默认情况下，GaaeExplorer一次最多只能绘制 4,096 个多边形点。要增加这个限制，请打开项目设置，增加 :ref:`ProjectSettings.rendering/limits/buffers/canvas_polygon_buffer_size_kb<class_ProjectSettings_property_rendering/limits/buffers/canvas_polygon_buffer_size_kb>` 和 :ref:`ProjectSettings.rendering/limits/buffers/canvas_polygon_index_buffer_size_kb<class_ProjectSettings_property_rendering/limits/buffers/canvas_polygon_index_buffer_size_kb>`\ 。

教程
----

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

属性
----

+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`bool<class_bool>`                             | :ref:`antialiased<class_Line2D_property_antialiased>`         | ``false``                   |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`LineCapMode<enum_Line2D_LineCapMode>`         | :ref:`begin_cap_mode<class_Line2D_property_begin_cap_mode>`   | ``0``                       |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`Color<class_Color>`                           | :ref:`default_color<class_Line2D_property_default_color>`     | ``Color( 0.4, 0.5, 1, 1 )`` |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`LineCapMode<enum_Line2D_LineCapMode>`         | :ref:`end_cap_mode<class_Line2D_property_end_cap_mode>`       | ``0``                       |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`Gradient<class_Gradient>`                     | :ref:`gradient<class_Line2D_property_gradient>`               |                             |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`LineJointMode<enum_Line2D_LineJointMode>`     | :ref:`joint_mode<class_Line2D_property_joint_mode>`           | ``0``                       |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>`     | :ref:`points<class_Line2D_property_points>`                   | ``PoolVector2Array(  )``    |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`int<class_int>`                               | :ref:`round_precision<class_Line2D_property_round_precision>` | ``8``                       |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`float<class_float>`                           | :ref:`sharp_limit<class_Line2D_property_sharp_limit>`         | ``2.0``                     |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`Texture<class_Texture>`                       | :ref:`texture<class_Line2D_property_texture>`                 |                             |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`LineTextureMode<enum_Line2D_LineTextureMode>` | :ref:`texture_mode<class_Line2D_property_texture_mode>`       | ``0``                       |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`float<class_float>`                           | :ref:`width<class_Line2D_property_width>`                     | ``10.0``                    |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+
| :ref:`Curve<class_Curve>`                           | :ref:`width_curve<class_Line2D_property_width_curve>`         |                             |
+-----------------------------------------------------+---------------------------------------------------------------+-----------------------------+

方法
----

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_point<class_Line2D_method_add_point>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`int<class_int>` at_position=-1 **)**      |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`clear_points<class_Line2D_method_clear_points>` **(** **)**                                                                             |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_point_count<class_Line2D_method_get_point_count>` **(** **)** |const|                                                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_point_position<class_Line2D_method_get_point_position>` **(** :ref:`int<class_int>` i **)** |const|                                 |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`remove_point<class_Line2D_method_remove_point>` **(** :ref:`int<class_int>` i **)**                                                     |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_point_position<class_Line2D_method_set_point_position>` **(** :ref:`int<class_int>` i, :ref:`Vector2<class_Vector2>` position **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Line2D_LineJointMode:

.. _class_Line2D_constant_LINE_JOINT_SHARP:

.. _class_Line2D_constant_LINE_JOINT_BEVEL:

.. _class_Line2D_constant_LINE_JOINT_ROUND:

enum **LineJointMode**:

- **LINE_JOINT_SHARP** = **0** --- 这条线的接头将是尖的。如果\ ``sharp_limit``\ 大于关节的旋转，则它将变为斜角关节。

- **LINE_JOINT_BEVEL** = **1** --- 线的接头将斜切/倒角。

- **LINE_JOINT_ROUND** = **2** --- 该线的接头将为圆形。

----

.. _enum_Line2D_LineCapMode:

.. _class_Line2D_constant_LINE_CAP_NONE:

.. _class_Line2D_constant_LINE_CAP_BOX:

.. _class_Line2D_constant_LINE_CAP_ROUND:

enum **LineCapMode**:

- **LINE_CAP_NONE** = **0** --- 不能在线帽上绘制。

- **LINE_CAP_BOX** = **1** --- 将线帽绘制为长方体。

- **LINE_CAP_ROUND** = **2** --- 将线帽绘制为圆。

----

.. _enum_Line2D_LineTextureMode:

.. _class_Line2D_constant_LINE_TEXTURE_NONE:

.. _class_Line2D_constant_LINE_TEXTURE_TILE:

.. _class_Line2D_constant_LINE_TEXTURE_STRETCH:

enum **LineTextureMode**:

- **LINE_TEXTURE_NONE** = **0** --- 获取纹理的左侧像素并在整个线条上渲染它。

- **LINE_TEXTURE_TILE** = **1** --- 在线条上平铺纹理。导入纹理时必须启用\ **Repeat**\ 才能正常工作。

- **LINE_TEXTURE_STRETCH** = **2** --- 沿直线拉伸纹理。导入禁用\ **重复**\ 的纹理以获得最佳效果。

属性说明
--------

.. _class_Line2D_property_antialiased:

- :ref:`bool<class_bool>` **antialiased**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_antialiased(value) |
+-----------+------------------------+
| *Getter*  | get_antialiased()      |
+-----------+------------------------+

如果\ ``true``\ ，线条的边界将抗锯齿。

\ **注意:** Line2D在抗锯齿时不会被批量加速。

----

.. _class_Line2D_property_begin_cap_mode:

- :ref:`LineCapMode<enum_Line2D_LineCapMode>` **begin_cap_mode**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_begin_cap_mode(value) |
+-----------+---------------------------+
| *Getter*  | get_begin_cap_mode()      |
+-----------+---------------------------+

控制直线的第一个点的样式。使用\ :ref:`LineCapMode<enum_Line2D_LineCapMode>`\ 线帽模式常数。

----

.. _class_Line2D_property_default_color:

- :ref:`Color<class_Color>` **default_color**

+-----------+-----------------------------+
| *Default* | ``Color( 0.4, 0.5, 1, 1 )`` |
+-----------+-----------------------------+
| *Setter*  | set_default_color(value)    |
+-----------+-----------------------------+
| *Getter*  | get_default_color()         |
+-----------+-----------------------------+

线条的颜色。如果设置了渐变，则不会生效。

----

.. _class_Line2D_property_end_cap_mode:

- :ref:`LineCapMode<enum_Line2D_LineCapMode>` **end_cap_mode**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_end_cap_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_end_cap_mode()      |
+-----------+-------------------------+

控制线条最后一点的样式。使用\ :ref:`LineCapMode<enum_Line2D_LineCapMode>`\ 常数。

----

.. _class_Line2D_property_gradient:

- :ref:`Gradient<class_Gradient>` **gradient**

+----------+---------------------+
| *Setter* | set_gradient(value) |
+----------+---------------------+
| *Getter* | get_gradient()      |
+----------+---------------------+

从头到尾贯穿整条线的渐变色。如果设置了渐变，则不会使用默认颜色。

----

.. _class_Line2D_property_joint_mode:

- :ref:`LineJointMode<enum_Line2D_LineJointMode>` **joint_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_joint_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_joint_mode()      |
+-----------+-----------------------+

起点和终点之间点的样式。

----

.. _class_Line2D_property_points:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **points**

+-----------+--------------------------+
| *Default* | ``PoolVector2Array(  )`` |
+-----------+--------------------------+
| *Setter*  | set_points(value)        |
+-----------+--------------------------+
| *Getter*  | get_points()             |
+-----------+--------------------------+

构成线条的点。在此数组中设置的每个点之间绘制线。点被解释为局部向量。

----

.. _class_Line2D_property_round_precision:

- :ref:`int<class_int>` **round_precision**

+-----------+----------------------------+
| *Default* | ``8``                      |
+-----------+----------------------------+
| *Setter*  | set_round_precision(value) |
+-----------+----------------------------+
| *Getter*  | get_round_precision()      |
+-----------+----------------------------+

圆形接头和盖子的平滑度。仅当盖子或接头设置为圆形时才使用此选项。

----

.. _class_Line2D_property_sharp_limit:

- :ref:`float<class_float>` **sharp_limit**

+-----------+------------------------+
| *Default* | ``2.0``                |
+-----------+------------------------+
| *Setter*  | set_sharp_limit(value) |
+-----------+------------------------+
| *Getter*  | get_sharp_limit()      |
+-----------+------------------------+

The direction difference in radians between vector points. This value is only used if :ref:`joint_mode<class_Line2D_property_joint_mode>` is set to :ref:`LINE_JOINT_SHARP<class_Line2D_constant_LINE_JOINT_SHARP>`.

----

.. _class_Line2D_property_texture:

- :ref:`Texture<class_Texture>` **texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

用于线条纹理的纹理。使用\ ``texture_mode``\ 作为绘图样式。

----

.. _class_Line2D_property_texture_mode:

- :ref:`LineTextureMode<enum_Line2D_LineTextureMode>` **texture_mode**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_texture_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_texture_mode()      |
+-----------+-------------------------+

在线条上渲染\ ``texture``\ 的样式。使用\ :ref:`LineTextureMode<enum_Line2D_LineTextureMode>`\ 常量。

----

.. _class_Line2D_property_width:

- :ref:`float<class_float>` **width**

+-----------+------------------+
| *Default* | ``10.0``         |
+-----------+------------------+
| *Setter*  | set_width(value) |
+-----------+------------------+
| *Getter*  | get_width()      |
+-----------+------------------+

线的宽度。

----

.. _class_Line2D_property_width_curve:

- :ref:`Curve<class_Curve>` **width_curve**

+----------+------------------+
| *Setter* | set_curve(value) |
+----------+------------------+
| *Getter* | get_curve()      |
+----------+------------------+

线条的宽度随曲线的变化而变化。原始宽度只需乘以曲线的值即可。

方法说明
--------

.. _class_Line2D_method_add_point:

- void **add_point** **(** :ref:`Vector2<class_Vector2>` position, :ref:`int<class_int>` at_position=-1 **)**

在\ ``position``\ 添加点。将点追加到直线的末尾。

如果给定了位置\ ``at_position``\ ，则在位置\ ``at_position``\ 之前插入该点，并将该点（以及之后的每个点）移动到插入点之后。如果未给出位置处的\ ``at_position``\ ，或者是非法值（\ ``at_position <0``\ 或位置处的\ ``>=[method get_point_count]``\ ），则该点将追加到点列表的末尾。

----

.. _class_Line2D_method_clear_points:

- void **clear_points** **(** **)**

移除直线上的所有点。

----

.. _class_Line2D_method_get_point_count:

- :ref:`int<class_int>` **get_point_count** **(** **)** |const|

返回在Line2D上点的数量。

----

.. _class_Line2D_method_get_point_position:

- :ref:`Vector2<class_Vector2>` **get_point_position** **(** :ref:`int<class_int>` i **)** |const|

返回点\ ``i``\ 的位置。

----

.. _class_Line2D_method_remove_point:

- void **remove_point** **(** :ref:`int<class_int>` i **)**

将索引\ ``i``\ 处的点从直线中移除。

----

.. _class_Line2D_method_set_point_position:

- void **set_point_position** **(** :ref:`int<class_int>` i, :ref:`Vector2<class_Vector2>` position **)**

用提供的\ ``position``\ 位置覆盖索引\ ``i``\ 处点的位置。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
