:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Particles2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Particles2D:

Particles2D
===========

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

基于GPU的2D粒子发射器。

描述
----

用于创建各种粒子系统和效果的 2D 粒子节点。 ``Particles2D`` 具有一个发射器，可以以给定的速率生成一定数量的粒子。

使用 ``process_material`` 属性添加 :ref:`ParticlesMaterial<class_ParticlesMaterial>` 以配置粒子外观和行为。或者，您可以添加将应用于所有粒子的 :ref:`ShaderMaterial<class_ShaderMaterial>`\ 。

\ **注意：**\ ``Particles2D`` 仅在使用 GLES3 渲染器时有效。如果使用 GLES2 渲染器，请改用 :ref:`CPUParticles2D<class_CPUParticles2D>`\ 。您可以通过选择节点将 ``Particles2D`` 转换为 :ref:`CPUParticles2D<class_CPUParticles2D>`\ ，单击 2D 编辑器视口顶部的\ **粒子**\ 菜单，然后选择\ **转换为 CPUParticles2D**\ 。

\ **注意：**\ 在粒子节点上工作后，记得通过选择它来更新它的 :ref:`visibility_rect<class_Particles2D_property_visibility_rect>`\ ，单击 2D 编辑器视口顶部的\ **粒子**\ 菜单，然后选择\ **生成可见矩形**\ 。否则，根据相机位置和角度，粒子可能会突然消失。

\ **注意：**\ 与\ :ref:`CPUParticles2D<class_CPUParticles2D>`\ 不同，\ ``Particles2D``\ 目前忽略\ :ref:`AtlasTexture<class_AtlasTexture>`\ s中定义的纹理区域。

教程
----

- :doc:`Particle systems (2D) <../tutorials/2d/particle_systems_2d>`

- `2D Dodge The Creeps Demo <https://godotengine.org/asset-library/asset/515>`__

属性
----

+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`                        | :ref:`amount<class_Particles2D_property_amount>`                     | ``8``                             |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`DrawOrder<enum_Particles2D_DrawOrder>` | :ref:`draw_order<class_Particles2D_property_draw_order>`             | ``0``                             |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`emitting<class_Particles2D_property_emitting>`                 | ``true``                          |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`                    | :ref:`explosiveness<class_Particles2D_property_explosiveness>`       | ``0.0``                           |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`                        | :ref:`fixed_fps<class_Particles2D_property_fixed_fps>`               | ``0``                             |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`fract_delta<class_Particles2D_property_fract_delta>`           | ``true``                          |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`                    | :ref:`lifetime<class_Particles2D_property_lifetime>`                 | ``1.0``                           |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`local_coords<class_Particles2D_property_local_coords>`         | ``true``                          |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`Texture<class_Texture>`                | :ref:`normal_map<class_Particles2D_property_normal_map>`             |                                   |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`one_shot<class_Particles2D_property_one_shot>`                 | ``false``                         |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`                    | :ref:`preprocess<class_Particles2D_property_preprocess>`             | ``0.0``                           |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`Material<class_Material>`              | :ref:`process_material<class_Particles2D_property_process_material>` |                                   |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`                    | :ref:`randomness<class_Particles2D_property_randomness>`             | ``0.0``                           |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`float<class_float>`                    | :ref:`speed_scale<class_Particles2D_property_speed_scale>`           | ``1.0``                           |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`Texture<class_Texture>`                | :ref:`texture<class_Particles2D_property_texture>`                   |                                   |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+
| :ref:`Rect2<class_Rect2>`                    | :ref:`visibility_rect<class_Particles2D_property_visibility_rect>`   | ``Rect2( -100, -100, 200, 200 )`` |
+----------------------------------------------+----------------------------------------------------------------------+-----------------------------------+

方法
----

+---------------------------+--------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>` | :ref:`capture_rect<class_Particles2D_method_capture_rect>` **(** **)** |const| |
+---------------------------+--------------------------------------------------------------------------------+
| void                      | :ref:`restart<class_Particles2D_method_restart>` **(** **)**                   |
+---------------------------+--------------------------------------------------------------------------------+

枚举
----

.. _enum_Particles2D_DrawOrder:

.. _class_Particles2D_constant_DRAW_ORDER_INDEX:

.. _class_Particles2D_constant_DRAW_ORDER_LIFETIME:

enum **DrawOrder**:

- **DRAW_ORDER_INDEX** = **0** --- 粒子按发射顺序绘制。

- **DRAW_ORDER_LIFETIME** = **1** --- 按照剩余寿命的顺序绘制粒子。

属性说明
--------

.. _class_Particles2D_property_amount:

- :ref:`int<class_int>` **amount**

+-----------+-------------------+
| *Default* | ``8``             |
+-----------+-------------------+
| *Setter*  | set_amount(value) |
+-----------+-------------------+
| *Getter*  | get_amount()      |
+-----------+-------------------+

在一个发射周期内排放的粒子数（对应于\ :ref:`lifetime<class_Particles2D_property_lifetime>`\ ）。

\ **注意：**\ 改变\ :ref:`amount<class_Particles2D_property_amount>`\ 将重置粒子发射，因此，在改变\ :ref:`amount<class_Particles2D_property_amount>`\ 之前已经排放的所有粒子将被移除。

----

.. _class_Particles2D_property_draw_order:

- :ref:`DrawOrder<enum_Particles2D_DrawOrder>` **draw_order**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_draw_order(value) |
+-----------+-----------------------+
| *Getter*  | get_draw_order()      |
+-----------+-----------------------+

粒子绘制顺序。使用\ :ref:`DrawOrder<enum_Particles2D_DrawOrder>`\ 值。

----

.. _class_Particles2D_property_emitting:

- :ref:`bool<class_bool>` **emitting**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_emitting(value) |
+-----------+---------------------+
| *Getter*  | is_emitting()       |
+-----------+---------------------+

如果\ ``true``\ ，则正在发射粒子。

----

.. _class_Particles2D_property_explosiveness:

- :ref:`float<class_float>` **explosiveness**

+-----------+--------------------------------+
| *Default* | ``0.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_explosiveness_ratio(value) |
+-----------+--------------------------------+
| *Getter*  | get_explosiveness_ratio()      |
+-----------+--------------------------------+

粒子在一个发射周期中的发射速度有多快。如果大于\ ``0``\ ，则在下一个循环开始之前会有排放量缺口。

----

.. _class_Particles2D_property_fixed_fps:

- :ref:`int<class_int>` **fixed_fps**

+-----------+----------------------+
| *Default* | ``0``                |
+-----------+----------------------+
| *Setter*  | set_fixed_fps(value) |
+-----------+----------------------+
| *Getter*  | get_fixed_fps()      |
+-----------+----------------------+

粒子系统的帧速率固定为一个值。例如，将值更改为2将使粒子以每秒2帧的速度渲染。注意，这不会减慢粒子系统本身的仿真速度。

----

.. _class_Particles2D_property_fract_delta:

- :ref:`bool<class_bool>` **fract_delta**

+-----------+-----------------------------+
| *Default* | ``true``                    |
+-----------+-----------------------------+
| *Setter*  | set_fractional_delta(value) |
+-----------+-----------------------------+
| *Getter*  | get_fractional_delta()      |
+-----------+-----------------------------+

如果\ ``true``\ ，将导致分数增量计算，该显示具有更平滑的粒子显示效果。

----

.. _class_Particles2D_property_lifetime:

- :ref:`float<class_float>` **lifetime**

+-----------+---------------------+
| *Default* | ``1.0``             |
+-----------+---------------------+
| *Setter*  | set_lifetime(value) |
+-----------+---------------------+
| *Getter*  | get_lifetime()      |
+-----------+---------------------+

每个粒子存在的时间，以秒为单位。

----

.. _class_Particles2D_property_local_coords:

- :ref:`bool<class_bool>` **local_coords**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_use_local_coordinates(value) |
+-----------+----------------------------------+
| *Getter*  | get_use_local_coordinates()      |
+-----------+----------------------------------+

如果\ ``true``\ ，则粒子将使用父节点的坐标空间。如果\ ``false``\ ，则使用全局坐标。

----

.. _class_Particles2D_property_normal_map:

- :ref:`Texture<class_Texture>` **normal_map**

+----------+-----------------------+
| *Setter* | set_normal_map(value) |
+----------+-----------------------+
| *Getter* | get_normal_map()      |
+----------+-----------------------+

用于\ :ref:`texture<class_Particles2D_property_texture>`\ 属性的法线贴图。

\ **注意：** GaaeExplorer希望法线贴图使用X +，Y-和Z +坐标。请参阅\ `this page <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates>`__\ ，以比较流行引擎期望的法线地图坐标。

----

.. _class_Particles2D_property_one_shot:

- :ref:`bool<class_bool>` **one_shot**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_one_shot(value) |
+-----------+---------------------+
| *Getter*  | get_one_shot()      |
+-----------+---------------------+

如果 ``true``\ ，则只发生一个排放周期。如果在周期内设置 ``true``\ ，则排放将在周期结束时停止。

----

.. _class_Particles2D_property_preprocess:

- :ref:`float<class_float>` **preprocess**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_pre_process_time(value) |
+-----------+-----------------------------+
| *Getter*  | get_pre_process_time()      |
+-----------+-----------------------------+

粒子系统启动时就好像已经运行了这么多秒一样。

----

.. _class_Particles2D_property_process_material:

- :ref:`Material<class_Material>` **process_material**

+----------+-----------------------------+
| *Setter* | set_process_material(value) |
+----------+-----------------------------+
| *Getter* | get_process_material()      |
+----------+-----------------------------+

用于处理粒子的 :ref:`Material<class_Material>` 。可以是一个 :ref:`ParticlesMaterial<class_ParticlesMaterial>` 或一个 :ref:`ShaderMaterial<class_ShaderMaterial>` 。

----

.. _class_Particles2D_property_randomness:

- :ref:`float<class_float>` **randomness**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_randomness_ratio(value) |
+-----------+-----------------------------+
| *Getter*  | get_randomness_ratio()      |
+-----------+-----------------------------+

发射寿命随机率。

----

.. _class_Particles2D_property_speed_scale:

- :ref:`float<class_float>` **speed_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_speed_scale(value) |
+-----------+------------------------+
| *Getter*  | get_speed_scale()      |
+-----------+------------------------+

粒子系统的运行速度缩放比例。值\ ``0``\ 可用于暂停粒子。

----

.. _class_Particles2D_property_texture:

- :ref:`Texture<class_Texture>` **texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

粒子纹理。如果\ ``null``\ ，则粒子将为正方形。

----

.. _class_Particles2D_property_visibility_rect:

- :ref:`Rect2<class_Rect2>` **visibility_rect**

+-----------+-----------------------------------+
| *Default* | ``Rect2( -100, -100, 200, 200 )`` |
+-----------+-----------------------------------+
| *Setter*  | set_visibility_rect(value)        |
+-----------+-----------------------------------+
| *Getter*  | get_visibility_rect()             |
+-----------+-----------------------------------+

:ref:`Rect2<class_Rect2>` 确定节点的区域，该区域需要在屏幕上可见才能使粒子系统处于活动状态。

如果当节点进入/退出屏幕时粒子突然出现/消失，则增长矩形。 :ref:`Rect2<class_Rect2>` 可以通过代码或使用 **Particles → Generate Visibility Rect** 编辑器工具生成。

方法说明
--------

.. _class_Particles2D_method_capture_rect:

- :ref:`Rect2<class_Rect2>` **capture_rect** **(** **)** |const|

返回一个包含所有现存粒子位置的矩形。

----

.. _class_Particles2D_method_restart:

- void **restart** **(** **)**

重新启动所有现有的粒子。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
