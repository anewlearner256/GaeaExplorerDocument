:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the WebRTCMultiplayer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebRTCMultiplayer:

WebRTCMultiplayer
=================

**Inherits:** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

简单的接口，用于创建由\ :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>`\ 组成的点对点网状网络，与\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 兼容。

描述
----

这个类构建了一个完整的\ :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>`\ 网状结构（每个对等体有一个连接），可以作为\ :ref:`MultiplayerAPI.network_peer<class_MultiplayerAPI_property_network_peer>`\ 使用。

你可以通过\ :ref:`add_peer<class_WebRTCMultiplayer_method_add_peer>`\ 添加每个\ :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>`\ ，或者通过\ :ref:`remove_peer<class_WebRTCMultiplayer_method_remove_peer>`\ 删除它们。对等体必须在\ :ref:`WebRTCPeerConnection.STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>`\ 状态下添加，以允许它创建适当的通道。这个类不会创建提交也不会设置描述，它只会轮询，并通知连接和断开。

除非在\ :ref:`initialize<class_WebRTCMultiplayer_method_initialize>`\ 中\ ``server_compatibility``\ 为\ ``true``\ ，否则\ :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>`\ 和\ :ref:`NetworkedMultiplayerPeer.server_disconnected<class_NetworkedMultiplayerPeer_signal_server_disconnected>`\ 将不会被触发。除此之外，数据传输的工作方式类似于 :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>`\ 。

属性
----

+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                         | refuse_new_connections | ``false`` (overrides :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer_property_refuse_new_connections>`) |
+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` | transfer_mode          | ``2`` (overrides :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer_property_transfer_mode>`)              |
+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+

方法
----

+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`add_peer<class_WebRTCMultiplayer_method_add_peer>` **(** :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` peer, :ref:`int<class_int>` peer_id, :ref:`int<class_int>` unreliable_lifetime=1 **)** |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`close<class_WebRTCMultiplayer_method_close>` **(** **)**                                                                                                                                                |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_peer<class_WebRTCMultiplayer_method_get_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_peers<class_WebRTCMultiplayer_method_get_peers>` **(** **)**                                                                                                                                        |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_peer<class_WebRTCMultiplayer_method_has_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`initialize<class_WebRTCMultiplayer_method_initialize>` **(** :ref:`int<class_int>` peer_id, :ref:`bool<class_bool>` server_compatibility=false **)**                                                    |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`remove_peer<class_WebRTCMultiplayer_method_remove_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_WebRTCMultiplayer_method_add_peer:

- :ref:`Error<enum_@GlobalScope_Error>` **add_peer** **(** :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` peer, :ref:`int<class_int>` peer_id, :ref:`int<class_int>` unreliable_lifetime=1 **)**

以给定的\ ``peer_id``\ 添加一个新的对等体到网状结构。该\ :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>`\ 必须处于\ :ref:`WebRTCPeerConnection.STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>`\ 状态。

将为可靠的、不可靠的和有序的传输创建三个通道。在创建不可靠和有序通道时，\ ``unreliable_lifetime``\ 的值将被传递给\ ``maxPacketLifetime``\ 选项，参阅\ :ref:`WebRTCPeerConnection.create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>`\ 。

----

.. _class_WebRTCMultiplayer_method_close:

- void **close** **(** **)**

关闭所有添加的对等体连接和通道，释放所有资源。

----

.. _class_WebRTCMultiplayer_method_get_peer:

- :ref:`Dictionary<class_Dictionary>` **get_peer** **(** :ref:`int<class_int>` peer_id **)**

返回一个具有给定\ ``peer_id``\ 的对等体的字典表示，有三个键。\ ``connection``\ 包含到这个对等体的\ :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>`\ ，\ ``channels``\ 三个\ :ref:`WebRTCDataChannel<class_WebRTCDataChannel>`\ 的数组，以及\ ``connected``\ 一个布尔值，表示对等体连接是否当前已连接，注，所有三个通道都打开。

----

.. _class_WebRTCMultiplayer_method_get_peers:

- :ref:`Dictionary<class_Dictionary>` **get_peers** **(** **)**

返回一个字典，其键是对等体的id，其值是对等体的表示，如\ :ref:`get_peer<class_WebRTCMultiplayer_method_get_peer>`\ 。

----

.. _class_WebRTCMultiplayer_method_has_peer:

- :ref:`bool<class_bool>` **has_peer** **(** :ref:`int<class_int>` peer_id **)**

如果给定的\ ``peer_id``\ 在对等体映射中，则返回\ ``true``\ ，尽管它可能没有连接。

----

.. _class_WebRTCMultiplayer_method_initialize:

- :ref:`Error<enum_@GlobalScope_Error>` **initialize** **(** :ref:`int<class_int>` peer_id, :ref:`bool<class_bool>` server_compatibility=false **)**

用给定的\ ``peer_id``\ （必须在1和2147483647之间）初始化多人游戏对等体。

如果\ ``server_compatibilty``\ 是\ ``false``\ （默认），多人对等体将立即处于\ :ref:`NetworkedMultiplayerPeer.CONNECTION_CONNECTED<class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED>`\ 状态，\ :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>`\ 将不会被发射出来。

如果\ ``server_compatibilty``\ 为\ ``true``\ ，对等体将抑制所有\ :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>`\ 信号，直到一个id为\ :ref:`NetworkedMultiplayerPeer.TARGET_PEER_SERVER<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER>`\ 的对等体连接，然后发出\ :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>`\ 。之后将对每个已经连接的对等体和可能连接的任何新对等体发出\ :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>`\ 的信号。如果服务器对等体在此之后断开连接，信号\ :ref:`NetworkedMultiplayerPeer.server_disconnected<class_NetworkedMultiplayerPeer_signal_server_disconnected>`\ 将被发出，状态将变成\ :ref:`NetworkedMultiplayerPeer.CONNECTION_CONNECTED<class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED>`\ 。

----

.. _class_WebRTCMultiplayer_method_remove_peer:

- void **remove_peer** **(** :ref:`int<class_int>` peer_id **)**

从网格中移除给定的\ ``peer_id``\ 的对等体。如果对等体是连接的，并为其发出\ :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>`\ ，那么\ :ref:`NetworkedMultiplayerPeer.peer_disconnected<class_NetworkedMultiplayerPeer_signal_peer_disconnected>`\ 将被发出。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
