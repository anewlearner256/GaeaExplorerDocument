:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the AudioEffectPitchShift.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AudioEffectPitchShift:

AudioEffectPitchShift
=====================

**Inherits:** :ref:`AudioEffect<class_AudioEffect>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

为音频总线添加音调变换的音频效果。

升高或降低原始声音的音调。

描述
----

允许独立于速度调制音调。所有频率都可以增加或减少，而对瞬态的影响最小。

属性
----

+------------------------------------------------------+------------------------------------------------------------------------+---------+
| :ref:`FFT_Size<enum_AudioEffectPitchShift_FFT_Size>` | :ref:`fft_size<class_AudioEffectPitchShift_property_fft_size>`         | ``3``   |
+------------------------------------------------------+------------------------------------------------------------------------+---------+
| :ref:`int<class_int>`                                | :ref:`oversampling<class_AudioEffectPitchShift_property_oversampling>` | ``4``   |
+------------------------------------------------------+------------------------------------------------------------------------+---------+
| :ref:`float<class_float>`                            | :ref:`pitch_scale<class_AudioEffectPitchShift_property_pitch_scale>`   | ``1.0`` |
+------------------------------------------------------+------------------------------------------------------------------------+---------+

枚举
----

.. _enum_AudioEffectPitchShift_FFT_Size:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_256:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_512:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_1024:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_2048:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_4096:

.. _class_AudioEffectPitchShift_constant_FFT_SIZE_MAX:

enum **FFT_Size**:

- **FFT_SIZE_256** = **0** --- 使用 256 个样品的缓冲器进行快速傅里叶变换。最低延迟，但随着时间的推移最不稳定。

- **FFT_SIZE_512** = **1** --- 使用 512 个样本的缓冲器进行快速傅里叶变换。低延迟，但随着时间的推移不太稳定。

- **FFT_SIZE_1024** = **2** --- 使用 1024 个样本的缓冲器进行快速傅里叶变换。随着时间的推移，这是延迟和稳定性之间的折衷。

- **FFT_SIZE_2048** = **3** --- 使用 2048 个样品的缓冲器进行快速傅里叶变换。随着时间的推移，延迟高但稳定。

- **FFT_SIZE_4096** = **4** --- 使用 4096 个样品的缓冲器进行快速傅里叶变换。随着时间的推移，延迟最高但最稳定。

- **FFT_SIZE_MAX** = **5** --- 表示\ :ref:`FFT_Size<enum_AudioEffectPitchShift_FFT_Size>`\ 枚举的大小。

属性说明
--------

.. _class_AudioEffectPitchShift_property_fft_size:

- :ref:`FFT_Size<enum_AudioEffectPitchShift_FFT_Size>` **fft_size**

+-----------+---------------------+
| *Default* | ``3``               |
+-----------+---------------------+
| *Setter*  | set_fft_size(value) |
+-----------+---------------------+
| *Getter*  | get_fft_size()      |
+-----------+---------------------+

`快速傅里叶变换 <https://en.wikipedia.org/wiki/Fast_Fourier_transform>`__\ 缓冲区的大小。较高的数值可以使效果随时间平滑，但有较大的延迟。这种较高的延迟对有突然幅度变化的声音的影响特别明显。

----

.. _class_AudioEffectPitchShift_property_oversampling:

- :ref:`int<class_int>` **oversampling**

+-----------+-------------------------+
| *Default* | ``4``                   |
+-----------+-------------------------+
| *Setter*  | set_oversampling(value) |
+-----------+-------------------------+
| *Getter*  | get_oversampling()      |
+-----------+-------------------------+

要使用的过采样系数。更高的值会带来更好的质量，但对CPU的要求更高，如果CPU跟不上，可能会导致音频破裂。

----

.. _class_AudioEffectPitchShift_property_pitch_scale:

- :ref:`float<class_float>` **pitch_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_pitch_scale(value) |
+-----------+------------------------+
| *Getter*  | get_pitch_scale()      |
+-----------+------------------------+

要使用的音阶。\ ``1.0``\ 是默认的音高，播放的声音没有改变。\ :ref:`pitch_scale<class_AudioEffectPitchShift_property_pitch_scale>`\ 的范围从\ ``0.0``\ （无限低的音调，听不见）到\ ``16``\ （比初始音调高16倍）。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
