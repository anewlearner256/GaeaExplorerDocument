:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Directory.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Directory:

Directory
=========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

用于处理文件系统的类型。

描述
----

目录类型。用于管理目录及其内容（并不仅限于项目文件夹）。

新建 ``Directory`` 时，其默认打开的目录为 ``res://``\ 。这在将来可能会改变，因此建议始终使用 :ref:`open<class_Directory_method_open>` 将您要操作的 ``Directory`` 初始化至想要操作的位置，并进行显式的错误检查。

\ **注意：**\ 很多资源类型是经过导入的（例如纹理或声音文件），导出后的游戏中不会包含源素材，只会使用导入后的版本。请使用 :ref:`ResourceLoader<class_ResourceLoader>` 访问导入后的资源。

下面是一个关于如何遍历目录文件的示例：

::

    func dir_contents(path):
        var dir = Directory.new()
        if dir.open(path) == OK:
            dir.list_dir_begin()
            var file_name = dir.get_next()
            while file_name != "":
                if dir.current_is_dir():
                    print("发现目录：" + file_name)
                else:
                    print("发现文件：" + file_name)
                file_name = dir.get_next()
        else:
            print("尝试访问路径时出错。")

教程
----

- :doc:`../tutorials/scripting/filesystem`

方法
----

+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`change_dir<class_Directory_method_change_dir>` **(** :ref:`String<class_String>` todir **)**                                                                  |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`copy<class_Directory_method_copy>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**                                               |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`current_is_dir<class_Directory_method_current_is_dir>` **(** **)** |const|                                                                                    |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`dir_exists<class_Directory_method_dir_exists>` **(** :ref:`String<class_String>` path **)**                                                                   |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`file_exists<class_Directory_method_file_exists>` **(** :ref:`String<class_String>` path **)**                                                                 |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_current_dir<class_Directory_method_get_current_dir>` **(** **)**                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_current_drive<class_Directory_method_get_current_drive>` **(** **)**                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_drive<class_Directory_method_get_drive>` **(** :ref:`int<class_int>` idx **)**                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_drive_count<class_Directory_method_get_drive_count>` **(** **)**                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_next<class_Directory_method_get_next>` **(** **)**                                                                                                        |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_space_left<class_Directory_method_get_space_left>` **(** **)**                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`list_dir_begin<class_Directory_method_list_dir_begin>` **(** :ref:`bool<class_bool>` skip_navigational=false, :ref:`bool<class_bool>` skip_hidden=false **)** |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`list_dir_end<class_Directory_method_list_dir_end>` **(** **)**                                                                                                |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`make_dir<class_Directory_method_make_dir>` **(** :ref:`String<class_String>` path **)**                                                                       |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`make_dir_recursive<class_Directory_method_make_dir_recursive>` **(** :ref:`String<class_String>` path **)**                                                   |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`open<class_Directory_method_open>` **(** :ref:`String<class_String>` path **)**                                                                               |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`remove<class_Directory_method_remove>` **(** :ref:`String<class_String>` path **)**                                                                           |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`rename<class_Directory_method_rename>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**                                           |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_Directory_method_change_dir:

- :ref:`Error<enum_@GlobalScope_Error>` **change_dir** **(** :ref:`String<class_String>` todir **)**

将当前打开的目录改为参数传递的目录。参数可以是相对于当前目录的(例如 ``newdir`` 或 ``.../newdir``)，也可以是绝对路径(例如 ``/tmp/newdir`` 或 ``res://somedir/newdir``)。

返回 :ref:`Error<enum_@GlobalScope_Error>` 代码常量之一 (``OK`` 成功时)。

----

.. _class_Directory_method_copy:

- :ref:`Error<enum_@GlobalScope_Error>` **copy** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**

将 ``from`` 文件复制到 ``to`` 目标位置。两个参数都应该是相对或绝对文件的路径。如果目标文件存在且没有访问保护，则会被覆盖。

返回\ :ref:`Error<enum_@GlobalScope_Error>`\ 代码常量之一(成功时返回\ ``OK``)。

----

.. _class_Directory_method_current_is_dir:

- :ref:`bool<class_bool>` **current_is_dir** **(** **)** |const|

返回上一次 :ref:`get_next<class_Directory_method_get_next>` 调用处理的当前项目是否为目录（\ ``.``\ 和\ ``.``\ 被认为是目录）。

----

.. _class_Directory_method_dir_exists:

- :ref:`bool<class_bool>` **dir_exists** **(** :ref:`String<class_String>` path **)**

返回目标目录是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。

----

.. _class_Directory_method_file_exists:

- :ref:`bool<class_bool>` **file_exists** **(** :ref:`String<class_String>` path **)**

返回目标文件是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。

----

.. _class_Directory_method_get_current_dir:

- :ref:`String<class_String>` **get_current_dir** **(** **)**

Returns the absolute path to the currently opened directory (e.g. ``res://folder`` or ``C:\tmp\folder``).

----

.. _class_Directory_method_get_current_drive:

- :ref:`int<class_int>` **get_current_drive** **(** **)**

返回当前打开的目录的驱动器索引。请参阅\ :ref:`get_drive<class_Directory_method_get_drive>`\ 将返回的索引转换为驱动器的名称。

----

.. _class_Directory_method_get_drive:

- :ref:`String<class_String>` **get_drive** **(** :ref:`int<class_int>` idx **)**

On Windows, returns the name of the drive (partition) passed as an argument (e.g. ``C:``).

On macOS, returns the path to the mounted volume passed as an argument.

On Linux, returns the path to the mounted volume or GTK 3 bookmark passed as an argument.

On other platforms, or if the requested drive does not exist, the method returns an empty String.

----

.. _class_Directory_method_get_drive_count:

- :ref:`int<class_int>` **get_drive_count** **(** **)**

On Windows, returns the number of drives (partitions) mounted on the current filesystem.

On macOS, returns the number of mounted volumes.

On Linux, returns the number of mounted volumes and GTK 3 bookmarks.

On other platforms, the method returns 0.

----

.. _class_Directory_method_get_next:

- :ref:`String<class_String>` **get_next** **(** **)**

返回当前目录中的下一个元素（文件或目录）（包括\ ``.``\ 和\ ``.``\ ，除非\ ``skip_navigational``\ 被赋予\ :ref:`list_dir_begin<class_Directory_method_list_dir_begin>`\ ）。

返回的是文件或目录的名称（而不是它的完整路径）。一旦流被完全处理，该方法返回一个空的String，并自动关闭流（即在这种情况下，\ :ref:`list_dir_end<class_Directory_method_list_dir_end>`\ 将不是强制性的）。

----

.. _class_Directory_method_get_space_left:

- :ref:`int<class_int>` **get_space_left** **(** **)**

在UNIX桌面系统上，返回当前目录磁盘上的可用空间。在其他平台上，此信息不可用，该方法返回0或-1。

----

.. _class_Directory_method_list_dir_begin:

- :ref:`Error<enum_@GlobalScope_Error>` **list_dir_begin** **(** :ref:`bool<class_bool>` skip_navigational=false, :ref:`bool<class_bool>` skip_hidden=false **)**

初始化用于列出所有文件和目录的流，使用 :ref:`get_next<class_Directory_method_get_next>` 函数，如果需要，可关闭当前打开的流。一旦流被处理完毕，通常应该用 :ref:`list_dir_end<class_Directory_method_list_dir_end>` 关闭。

\ ``skip_navigational`` 为 ``true`` 时会过滤掉 ``.`` 和 ``..``\ 。

\ ``skip_hidden`` 为 ``true`` 时会过滤掉隐藏文件。

----

.. _class_Directory_method_list_dir_end:

- void **list_dir_end** **(** **)**

关闭用\ :ref:`list_dir_begin<class_Directory_method_list_dir_begin>`\ 打开的当前流，并不关注是否已经用\ :ref:`get_next<class_Directory_method_get_next>`\ 完成处理。

----

.. _class_Directory_method_make_dir:

- :ref:`Error<enum_@GlobalScope_Error>` **make_dir** **(** :ref:`String<class_String>` path **)**

创建一个目录。参数可以是当前目录的相对路径，也可以是绝对路径。目标目录应该放置在一个已经存在的目录中（如果要递归创建完整的路径，请参阅\ :ref:`make_dir_recursive<class_Directory_method_make_dir_recursive>`\ ）。

返回 :ref:`Error<enum_@GlobalScope_Error>` 代码常量之一（成功时返回 ``OK``\ ）。

----

.. _class_Directory_method_make_dir_recursive:

- :ref:`Error<enum_@GlobalScope_Error>` **make_dir_recursive** **(** :ref:`String<class_String>` path **)**

通过递归调用 :ref:`make_dir<class_Directory_method_make_dir>`\ 方法，创建一个目标目录和其路径中所有必要的中间目录。参数可以是相对于当前目录的，也可以是绝对路径。

返回\ :ref:`Error<enum_@GlobalScope_Error>`\ 代码常量之一(成功时返回\ ``OK``)。

----

.. _class_Directory_method_open:

- :ref:`Error<enum_@GlobalScope_Error>` **open** **(** :ref:`String<class_String>` path **)**

Opens an existing directory of the filesystem. The ``path`` argument can be within the project tree (``res://folder``), the user directory (``user://folder``) or an absolute path of the user filesystem (e.g. ``/tmp/folder`` or ``C:\tmp\folder``).

Returns one of the :ref:`Error<enum_@GlobalScope_Error>` code constants (``OK`` on success).

----

.. _class_Directory_method_remove:

- :ref:`Error<enum_@GlobalScope_Error>` **remove** **(** :ref:`String<class_String>` path **)**

删除目标文件或空目录。参数可以是相对于当前目录的，也可以是绝对路径。如果目标目录不是空的，操作将失败。

返回\ :ref:`Error<enum_@GlobalScope_Error>`\ 代码常量之一(成功时返回\ ``OK``)。

----

.. _class_Directory_method_rename:

- :ref:`Error<enum_@GlobalScope_Error>` **rename** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**

将 ``from`` 文件或目录重命名且移动到 ``to`` 目标。两个参数都应该是文件或目录的相对路径或绝对路径。如果目标文件或目录存在且不受访问保护，它将被覆盖。

返回 :ref:`Error<enum_@GlobalScope_Error>` 代码常量之一，成功时返回 ``OK``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
