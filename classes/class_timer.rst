:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Timer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Timer:

Timer
=====

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

倒数计时器。

描述
----

可以设置为重复或 "一次性" 模式。

\ **注意：**\ 要创建一个一次性定时器而不需要实例化一个节点，请使用\ :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>`\ 。

教程
----

- `2D Dodge The Creeps Demo <https://godotengine.org/asset-library/asset/515>`__

属性
----

+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                              | :ref:`autostart<class_Timer_property_autostart>`       | ``false`` |
+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                              | :ref:`one_shot<class_Timer_property_one_shot>`         | ``false`` |
+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                              | :ref:`paused<class_Timer_property_paused>`             |           |
+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`TimerProcessMode<enum_Timer_TimerProcessMode>` | :ref:`process_mode<class_Timer_property_process_mode>` | ``1``     |
+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`float<class_float>`                            | :ref:`time_left<class_Timer_property_time_left>`       |           |
+------------------------------------------------------+--------------------------------------------------------+-----------+
| :ref:`float<class_float>`                            | :ref:`wait_time<class_Timer_property_wait_time>`       | ``1.0``   |
+------------------------------------------------------+--------------------------------------------------------+-----------+

方法
----

+-------------------------+------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`is_stopped<class_Timer_method_is_stopped>` **(** **)** |const|                     |
+-------------------------+------------------------------------------------------------------------------------------+
| void                    | :ref:`start<class_Timer_method_start>` **(** :ref:`float<class_float>` time_sec=-1 **)** |
+-------------------------+------------------------------------------------------------------------------------------+
| void                    | :ref:`stop<class_Timer_method_stop>` **(** **)**                                         |
+-------------------------+------------------------------------------------------------------------------------------+

信号
----

.. _class_Timer_signal_timeout:

- **timeout** **(** **)**

当计时器到 0 时发出。

枚举
----

.. _enum_Timer_TimerProcessMode:

.. _class_Timer_constant_TIMER_PROCESS_PHYSICS:

.. _class_Timer_constant_TIMER_PROCESS_IDLE:

enum **TimerProcessMode**:

- **TIMER_PROCESS_PHYSICS** = **0** --- 在每一帧的物理运算步骤中更新定时器，即固定帧率处理。

- **TIMER_PROCESS_IDLE** = **1** --- 在每一帧空闲时间内更新定时器。

属性说明
--------

.. _class_Timer_property_autostart:

- :ref:`bool<class_bool>` **autostart**

+-----------+----------------------+
| *Default* | ``false``            |
+-----------+----------------------+
| *Setter*  | set_autostart(value) |
+-----------+----------------------+
| *Getter*  | has_autostart()      |
+-----------+----------------------+

如果\ ``true``\ ，定时器将在进入场景树时自动启动。

\ **注意：**\ 在定时器进入场景树并启动后，该属性会自动设置为\ ``false``\ 。

----

.. _class_Timer_property_one_shot:

- :ref:`bool<class_bool>` **one_shot**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_one_shot(value) |
+-----------+---------------------+
| *Getter*  | is_one_shot()       |
+-----------+---------------------+

如果\ ``true``\ ，定时器将在达到0时停止。 如果\ ``false``\ ，它将重新启动。

----

.. _class_Timer_property_paused:

- :ref:`bool<class_bool>` **paused**

+----------+-------------------+
| *Setter* | set_paused(value) |
+----------+-------------------+
| *Getter* | is_paused()       |
+----------+-------------------+

如果\ ``true``\ ，定时器会被暂停，并且不再处理，即使调用\ :ref:`start<class_Timer_method_start>`\ ，直到它被取消暂停。

----

.. _class_Timer_property_process_mode:

- :ref:`TimerProcessMode<enum_Timer_TimerProcessMode>` **process_mode**

+-----------+-------------------------------+
| *Default* | ``1``                         |
+-----------+-------------------------------+
| *Setter*  | set_timer_process_mode(value) |
+-----------+-------------------------------+
| *Getter*  | get_timer_process_mode()      |
+-----------+-------------------------------+

处理模式。参阅\ :ref:`TimerProcessMode<enum_Timer_TimerProcessMode>`\ 。

----

.. _class_Timer_property_time_left:

- :ref:`float<class_float>` **time_left**

+----------+-----------------+
| *Getter* | get_time_left() |
+----------+-----------------+

定时器的剩余时间，单位是秒。如果定时器处于非激活状态，则返回0。

\ **注意：** 你不能设置这个值。要改变定时器的剩余时间，请使用\ :ref:`start<class_Timer_method_start>`\ 。

----

.. _class_Timer_property_wait_time:

- :ref:`float<class_float>` **wait_time**

+-----------+----------------------+
| *Default* | ``1.0``              |
+-----------+----------------------+
| *Setter*  | set_wait_time(value) |
+-----------+----------------------+
| *Getter*  | get_wait_time()      |
+-----------+----------------------+

等待的秒数。

\ **注意：** 计时器在一个渲染帧中最多只能触发一次（如果 :ref:`process_mode<class_Timer_property_process_mode>` 为 :ref:`TIMER_PROCESS_PHYSICS<class_Timer_constant_TIMER_PROCESS_PHYSICS>`\ ，则是在一个物理帧中最多一次）。也就是说，非常低的等待时间（小于 0.05 秒）会根据渲染帧率的不同而产生不同的行为。如果等待时间非常小，建议在脚本中使用 process 循环，不要用 Timer 节点。

方法说明
--------

.. _class_Timer_method_is_stopped:

- :ref:`bool<class_bool>` **is_stopped** **(** **)** |const|

如果定时器被停止，返回\ ``true``\ 。

----

.. _class_Timer_method_start:

- void **start** **(** :ref:`float<class_float>` time_sec=-1 **)**

启动定时器。如果\ ``time_sec>0``\ ，将\ ``wait_time``\ 设置为\ ``time_sec``\ 。这也会将剩余时间重置为\ ``wait_time``\ 。

\ **注意：** 这个方法不会恢复一个暂停的定时器。参阅 :ref:`paused<class_Timer_property_paused>`\ 。

----

.. _class_Timer_method_stop:

- void **stop** **(** **)**

停止定时器。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
