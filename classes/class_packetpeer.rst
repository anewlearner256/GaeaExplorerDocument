:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the PacketPeer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PacketPeer:

PacketPeer
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>`, :ref:`PacketPeerDTLS<class_PacketPeerDTLS>`, :ref:`PacketPeerGDNative<class_PacketPeerGDNative>`, :ref:`PacketPeerStream<class_PacketPeerStream>`, :ref:`PacketPeerUDP<class_PacketPeerUDP>`, :ref:`WebRTCDataChannel<class_WebRTCDataChannel>`, :ref:`WebSocketPeer<class_WebSocketPeer>`

基于包的协议的抽象和基类。

描述
----

PacketPeer是基于数据包的协议（如UDP）的抽象和基类。它提供了一个API，用于发送和接收作为原始数据或变量的数据包。这使得通过协议传输数据变得很容易，而不必将数据编码为低级字节或担心网络顺序。

属性
----

+-------------------------+---------------------------------------------------------------------------------+-------------+
| :ref:`bool<class_bool>` | :ref:`allow_object_decoding<class_PacketPeer_property_allow_object_decoding>`   | ``false``   |
+-------------------------+---------------------------------------------------------------------------------+-------------+
| :ref:`int<class_int>`   | :ref:`encode_buffer_max_size<class_PacketPeer_property_encode_buffer_max_size>` | ``8388608`` |
+-------------------------+---------------------------------------------------------------------------------+-------------+

方法
----

+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_available_packet_count<class_PacketPeer_method_get_available_packet_count>` **(** **)** |const|                                 |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`get_packet<class_PacketPeer_method_get_packet>` **(** **)**                                                                         |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`get_packet_error<class_PacketPeer_method_get_packet_error>` **(** **)** |const|                                                     |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`             | :ref:`get_var<class_PacketPeer_method_get_var>` **(** :ref:`bool<class_bool>` allow_objects=false **)**                                   |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`put_packet<class_PacketPeer_method_put_packet>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                        |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`put_var<class_PacketPeer_method_put_var>` **(** :ref:`Variant<class_Variant>` var, :ref:`bool<class_bool>` full_objects=false **)** |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_PacketPeer_property_allow_object_decoding:

- :ref:`bool<class_bool>` **allow_object_decoding**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_allow_object_decoding(value) |
+-----------+----------------------------------+
| *Getter*  | is_object_decoding_allowed()     |
+-----------+----------------------------------+

*已废弃。* 你应该使用 ``get_var`` 和 ``put_var`` 参数来代替它。

如果\ ``true``\ ，多人游戏API将允许在RPC/RSETs期间对对象进行编码和解码。

\ **警告：** 反序列化的对象可能包含会被执行的代码。如果序列化的对象来自不受信任的来源，请不要使用这个选项，以避免潜在的安全威胁，如远程代码执行。

----

.. _class_PacketPeer_property_encode_buffer_max_size:

- :ref:`int<class_int>` **encode_buffer_max_size**

+-----------+-----------------------------------+
| *Default* | ``8388608``                       |
+-----------+-----------------------------------+
| *Setter*  | set_encode_buffer_max_size(value) |
+-----------+-----------------------------------+
| *Getter*  | get_encode_buffer_max_size()      |
+-----------+-----------------------------------+

编码\ :ref:`Variant<class_Variant>`\ 时允许的最大缓冲区大小。提高此值以支持更大的内存分配。

\ :ref:`put_var<class_PacketPeer_method_put_var>`\ 方法在堆栈上分配内存，使用的缓冲区将自动增长到最接近的二次方，以匹配\ :ref:`Variant<class_Variant>`\ 的大小。如果\ :ref:`Variant<class_Variant>`\ 大于 ``encode_buffer_max_size``\ ，则该方法将以\ :ref:`@GlobalScope.ERR_OUT_OF_MEMORY<class_@GlobalScope_constant_ERR_OUT_OF_MEMORY>`\ 出错。

方法说明
--------

.. _class_PacketPeer_method_get_available_packet_count:

- :ref:`int<class_int>` **get_available_packet_count** **(** **)** |const|

返回环形缓冲区中当前可用的数据包数。

----

.. _class_PacketPeer_method_get_packet:

- :ref:`PoolByteArray<class_PoolByteArray>` **get_packet** **(** **)**

获取原始数据包。

----

.. _class_PacketPeer_method_get_packet_error:

- :ref:`Error<enum_@GlobalScope_Error>` **get_packet_error** **(** **)** |const|

返回最后接收的数据包的错误状态（通过\ :ref:`get_packet<class_PacketPeer_method_get_packet>`\ 和\ :ref:`get_var<class_PacketPeer_method_get_var>`\ ）。

----

.. _class_PacketPeer_method_get_var:

- :ref:`Variant<class_Variant>` **get_var** **(** :ref:`bool<class_bool>` allow_objects=false **)**

获取一个变量。如果\ ``allow_objects`` 或 :ref:`allow_object_decoding<class_PacketPeer_property_allow_object_decoding>`\ 为\ ``true``\ ，则允许对对象进行解码。

\ **警告：**\ 反序列化对象可能包含执行的代码。如果序列化对象来自不受信任的源，请不要使用此选项，以避免潜在的安全威胁，如远程代码执行。

----

.. _class_PacketPeer_method_put_packet:

- :ref:`Error<enum_@GlobalScope_Error>` **put_packet** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

发送一个原始数据包。

----

.. _class_PacketPeer_method_put_var:

- :ref:`Error<enum_@GlobalScope_Error>` **put_var** **(** :ref:`Variant<class_Variant>` var, :ref:`bool<class_bool>` full_objects=false **)**

将\ :ref:`Variant<class_Variant>`\ 作为数据包发送。如果\ ``full_objects`` 或 :ref:`allow_object_decoding<class_PacketPeer_property_allow_object_decoding>`\ 为\ ``true``\ ，则允许对对象进行编码（并且可能包含代码）。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
