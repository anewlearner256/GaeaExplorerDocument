:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the InputEventKey.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_InputEventKey:

InputEventKey
=============

**Inherits:** :ref:`InputEventWithModifiers<class_InputEventWithModifiers>` **<** :ref:`InputEvent<class_InputEvent>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

键盘事件的输入事件类型。

描述
----

存储键盘上的按键。支持按键、按键释放和\ :ref:`echo<class_InputEventKey_property_echo>`\ 回显事件。

教程
----

- :doc:`../tutorials/inputs/inputevent`

属性
----

+-------------------------+--------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`echo<class_InputEventKey_property_echo>`                           | ``false`` |
+-------------------------+--------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`   | :ref:`physical_scancode<class_InputEventKey_property_physical_scancode>` | ``0``     |
+-------------------------+--------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`pressed<class_InputEventKey_property_pressed>`                     | ``false`` |
+-------------------------+--------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`   | :ref:`scancode<class_InputEventKey_property_scancode>`                   | ``0``     |
+-------------------------+--------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`   | :ref:`unicode<class_InputEventKey_property_unicode>`                     | ``0``     |
+-------------------------+--------------------------------------------------------------------------+-----------+

方法
----

+-----------------------+----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>` | :ref:`get_physical_scancode_with_modifiers<class_InputEventKey_method_get_physical_scancode_with_modifiers>` **(** **)** |const| |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>` | :ref:`get_scancode_with_modifiers<class_InputEventKey_method_get_scancode_with_modifiers>` **(** **)** |const|                   |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_InputEventKey_property_echo:

- :ref:`bool<class_bool>` **echo**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_echo(value) |
+-----------+-----------------+
| *Getter*  | is_echo()       |
+-----------+-----------------+

如果 ``true``\ ，则该键在此事件之前已被按下。这意味着用户正在按住该键。

----

.. _class_InputEventKey_property_physical_scancode:

- :ref:`int<class_int>` **physical_scancode**

+-----------+------------------------------+
| *Default* | ``0``                        |
+-----------+------------------------------+
| *Setter*  | set_physical_scancode(value) |
+-----------+------------------------------+
| *Getter*  | get_physical_scancode()      |
+-----------+------------------------------+

键的物理编码，对应于 :ref:`KeyList<enum_@GlobalScope_KeyList>` 常量之一。表示 101/102 键美国 QWERTY 键盘上按键的物理位置。

要获得 ``InputEventKey`` 的人类可读表示，请使用 ``OS.get_scancode_string(event.physical_scancode)`` 其中 ``event`` 是 ``InputEventKey``\ 。

----

.. _class_InputEventKey_property_pressed:

- :ref:`bool<class_bool>` **pressed**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_pressed(value) |
+-----------+--------------------+
| *Getter*  | is_pressed()       |
+-----------+--------------------+

如果\ ``true``\ ，按键的状态是被按下。如果\ ``false``\ ，该键的状态被释放。

----

.. _class_InputEventKey_property_scancode:

- :ref:`int<class_int>` **scancode**

+-----------+---------------------+
| *Default* | ``0``               |
+-----------+---------------------+
| *Setter*  | set_scancode(value) |
+-----------+---------------------+
| *Getter*  | get_scancode()      |
+-----------+---------------------+

键码，对应于 :ref:`KeyList<enum_@GlobalScope_KeyList>` 常量之一。表示当前键盘布局中的键。

要获得 ``InputEventKey`` 的人类可读表示，请使用 ``OS.get_scancode_string(event.scancode)`` 其中 ``event`` 是 ``InputEventKey``\ 。

----

.. _class_InputEventKey_property_unicode:

- :ref:`int<class_int>` **unicode**

+-----------+--------------------+
| *Default* | ``0``              |
+-----------+--------------------+
| *Setter*  | set_unicode(value) |
+-----------+--------------------+
| *Getter*  | get_unicode()      |
+-----------+--------------------+

Unicode键标识符（如果相关）。除非 IME 输入模式处于激活状态，否则复合字符和复杂脚本的 Unicode 标识符可能无法使用。更多信息参阅\ :ref:`OS.set_ime_active<class_OS_method_set_ime_active>`\ 。

方法说明
--------

.. _class_InputEventKey_method_get_physical_scancode_with_modifiers:

- :ref:`int<class_int>` **get_physical_scancode_with_modifiers** **(** **)** |const|

返回与修改键组合的物理键码，例如 ``Shift`` 或 ``Alt``\ 。参阅\ :ref:`InputEventWithModifiers<class_InputEventWithModifiers>`\ 。

要获得带有修饰符的 ``InputEventKey`` 的人类可读表示，请使用 ``OS.get_scancode_string(event.get_physical_scancode_with_modifiers())`` 其中 ``event`` 是 ``InputEventKey``\ 。

----

.. _class_InputEventKey_method_get_scancode_with_modifiers:

- :ref:`int<class_int>` **get_scancode_with_modifiers** **(** **)** |const|

返回与 ``Shift`` 或 ``Alt`` 等修饰键组合的键码。参阅\ :ref:`InputEventWithModifiers<class_InputEventWithModifiers>`\ 。

要获得带有修饰符的 ``InputEventKey`` 的人类可读表示，请使用 ``OS.get_scancode_string(event.get_scancode_with_modifiers())`` 其中 ``event`` 是 ``InputEventKey``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
