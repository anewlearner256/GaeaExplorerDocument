:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the RoomGroup.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RoomGroup:

RoomGroup
=========

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

将 :ref:`Room<class_Room>` 组合在一起以实现通用功能。

描述
----

尽管可以单独指定 :ref:`Room<class_Room>` 行为，但有时为一组空间编写功能会更快更方便。

\ ``RoomGroup`` 应作为\ **空间列表**\ （您的 :ref:`Room<class_Room>` 的父 :ref:`Node<class_Node>`\ ）的子项而设置，而 :ref:`Room<class_Room>` 应作为 ``RoomGroup`` 的子项依次设置以便将它们分配给 RoomGroup。

例如，\ ``RoomGroup`` 可用于指定\ **处于外部**\ 的 :ref:`Room<class_Room>`\ ，并在玩家进入/退出该区域时打开或关闭定向光、天空或雨效果。

当 ``gameplay_monitor`` 开启时，\ ``RoomGroup`` 收到\ **游戏回调**\ ，在他们进入和退出\ **游戏区域**\ 时，以\ ``信号``\ 或\ ``通知``\ 的形式（详见 :ref:`RoomManager<class_RoomManager>`\ ）。

属性
----

+-----------------------+------------------------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`roomgroup_priority<class_RoomGroup_property_roomgroup_priority>` | ``0`` |
+-----------------------+------------------------------------------------------------------------+-------+

属性说明
--------

.. _class_RoomGroup_property_roomgroup_priority:

- :ref:`int<class_int>` **roomgroup_priority**

+-----------+-------------------------------+
| *Default* | ``0``                         |
+-----------+-------------------------------+
| *Setter*  | set_roomgroup_priority(value) |
+-----------+-------------------------------+
| *Getter*  | get_roomgroup_priority()      |
+-----------+-------------------------------+

此优先级将应用于组内的 :ref:`Room<class_Room>`\ 。可以使用 :ref:`Room<class_Room>` 优先级来制作\ **内部房间**\ ，即位于房间\ *内*\ 的另一个房间或多个房间。

当 :ref:`Camera<class_Camera>` 位于多个（常规和内部）房间内时，优先级较高的房间将优先处理。因此，例如，在地形“房间”内的房屋，您可以使房屋具有更高的优先级，以便当相机在房屋内时，房屋用作源空间，但在房屋外，将改为使用地形房间。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
