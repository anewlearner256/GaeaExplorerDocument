:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the StreamPeerTCP.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_StreamPeerTCP:

StreamPeerTCP
=============

**Inherits:** :ref:`StreamPeer<class_StreamPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

TCP流对等体。

描述
----

TCP 流对等体。此对象可用于连接到 TCP 服务器，也可由 TCP 服务器返回。

方法
----

+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`    | :ref:`connect_to_host<class_StreamPeerTCP_method_connect_to_host>` **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)** |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| void                                     | :ref:`disconnect_from_host<class_StreamPeerTCP_method_disconnect_from_host>` **(** **)**                                                    |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`              | :ref:`get_connected_host<class_StreamPeerTCP_method_get_connected_host>` **(** **)** |const|                                                |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                    | :ref:`get_connected_port<class_StreamPeerTCP_method_get_connected_port>` **(** **)** |const|                                                |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Status<enum_StreamPeerTCP_Status>` | :ref:`get_status<class_StreamPeerTCP_method_get_status>` **(** **)**                                                                        |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                  | :ref:`is_connected_to_host<class_StreamPeerTCP_method_is_connected_to_host>` **(** **)** |const|                                            |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| void                                     | :ref:`set_no_delay<class_StreamPeerTCP_method_set_no_delay>` **(** :ref:`bool<class_bool>` enabled **)**                                    |
+------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_StreamPeerTCP_Status:

.. _class_StreamPeerTCP_constant_STATUS_NONE:

.. _class_StreamPeerTCP_constant_STATUS_CONNECTING:

.. _class_StreamPeerTCP_constant_STATUS_CONNECTED:

.. _class_StreamPeerTCP_constant_STATUS_ERROR:

enum **Status**:

- **STATUS_NONE** = **0** --- ``StreamPeerTCP``\ 的初始状态。这也是断开连接后的状态。

- **STATUS_CONNECTING** = **1** --- 表示连接到主机的 ``StreamPeerTCP`` 的状态。

- **STATUS_CONNECTED** = **2** --- 表示连接到主机的 :ref:`StreamPeerSSL<class_StreamPeerSSL>` 的状态。

- **STATUS_ERROR** = **3** --- 表示处于错误状态的 ``StreamPeerTCP`` 的状态。

方法说明
--------

.. _class_StreamPeerTCP_method_connect_to_host:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_to_host** **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**

连接到指定的 ``host:port`` 对。如果有效，将解析主机名。成功或失败时返回\ :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 或\ :ref:`@GlobalScope.FAILED<class_@GlobalScope_constant_FAILED>`\ 。

----

.. _class_StreamPeerTCP_method_disconnect_from_host:

- void **disconnect_from_host** **(** **)**

与主机断开连接。

----

.. _class_StreamPeerTCP_method_get_connected_host:

- :ref:`String<class_String>` **get_connected_host** **(** **)** |const|

返回该对等体的IP。

----

.. _class_StreamPeerTCP_method_get_connected_port:

- :ref:`int<class_int>` **get_connected_port** **(** **)** |const|

返回该对等体的端口。

----

.. _class_StreamPeerTCP_method_get_status:

- :ref:`Status<enum_StreamPeerTCP_Status>` **get_status** **(** **)**

返回连接的状态，见\ :ref:`Status<enum_StreamPeerTCP_Status>`\ 。

----

.. _class_StreamPeerTCP_method_is_connected_to_host:

- :ref:`bool<class_bool>` **is_connected_to_host** **(** **)** |const|

当本对等体当前已连接到主机或者正在连接主机，则返回 ``true``\ ，否则返回 ``false``\ 。

----

.. _class_StreamPeerTCP_method_set_no_delay:

- void **set_no_delay** **(** :ref:`bool<class_bool>` enabled **)**

如果 ``enabled`` 为 ``true`` 时，数据包会立即发送。如果 ``enabled`` 为 ``false`` 时（默认如此），数据包会延迟发送，使用 `纳格算法 <https://zh.wikipedia.org/wiki/%E7%B4%8D%E6%A0%BC%E7%AE%97%E6%B3%95>`__\ 合并。

\ **注意：** 如果你的应用所传输的数据包很大，或者需要传输大量数据，建议将本属性保持禁用，因为启用后可能降低总体可用带宽。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
