:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Node.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Node:

Node
====

**Inherits:** :ref:`Object<class_Object>`

**Inherited By:** :ref:`AnimationPlayer<class_AnimationPlayer>`, :ref:`AnimationTree<class_AnimationTree>`, :ref:`AnimationTreePlayer<class_AnimationTreePlayer>`, :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`, :ref:`CanvasItem<class_CanvasItem>`, :ref:`CanvasLayer<class_CanvasLayer>`, :ref:`EditorFileSystem<class_EditorFileSystem>`, :ref:`EditorInterface<class_EditorInterface>`, :ref:`EditorPlugin<class_EditorPlugin>`, :ref:`EditorResourcePreview<class_EditorResourcePreview>`, :ref:`HTTPRequest<class_HTTPRequest>`, :ref:`InstancePlaceholder<class_InstancePlaceholder>`, :ref:`ResourcePreloader<class_ResourcePreloader>`, :ref:`SkeletonIK<class_SkeletonIK>`, :ref:`Spatial<class_Spatial>`, :ref:`Timer<class_Timer>`, :ref:`Tween<class_Tween>`, :ref:`Viewport<class_Viewport>`, :ref:`WorldEnvironment<class_WorldEnvironment>`

所有\ *场景*\ 对象的基类。

描述
----

节点是 GaaeExplorer 的构建模块。它们可以被指定为另一个节点的子节点，从而形成树状排列。一个给定的节点可以包含任意数量的节点作为子节点，要求所有的兄弟节点（即该节点的直接子节点）的名字唯一。

节点树被称为\ *场景*\ 。场景可以被保存到磁盘上，然后被实例化到其他场景中。这使得 GaaeExplorer 项目的架构和数据模型具有非常高的灵活性。

\ **场景树：** :ref:`SceneTree<class_SceneTree>` 包含活动的节点树。当一个节点被添加到场景树中时，它将收到 :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` 通知，并触发其 :ref:`_enter_tree<class_Node_method__enter_tree>` 回调。子节点总是在其父节点\ *之后*\ 被添加，即父节点的 :ref:`_enter_tree<class_Node_method__enter_tree>` 回调将在其子节点的之前被触发。

一旦所有的节点被添加到场景树中，它们就会收到 :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` 通知，其各自的 :ref:`_ready<class_Node_method__ready>` 回调被触发。对于一组节点，\ :ref:`_ready<class_Node_method__ready>` 回调是按相反的顺序调用的，从子节点开始，向上移动到父节点。

这意味着，当把一个节点添加到场景树中时，将使用下面的顺序进行回调：父节点的 :ref:`_enter_tree<class_Node_method__enter_tree>`\ 、子节点的 :ref:`_enter_tree<class_Node_method__enter_tree>`\ 、子节点的 :ref:`_ready<class_Node_method__ready>`\ ，最后是父节点的 :ref:`_ready<class_Node_method__ready>`\ （对整个场景树进行递归）。

\ **处理：** 节点可以覆盖“处理”状态，以便它们在每一帧上都收到回调，要求它们进行处理（做一些事情）。普通处理（回调 :ref:`_process<class_Node_method__process>`\ ，可以使用 :ref:`set_process<class_Node_method_set_process>` 开关）会尽可能快地发生，并且取决于帧率，所以处理时间 *delta*\ （单位为秒）会作为参数传入。物理处理（回调 :ref:`_physics_process<class_Node_method__physics_process>`\ ，可以使用 :ref:`set_physics_process<class_Node_method_set_physics_process>` 开关）每秒发生固定次数（默认为 60），对物理引擎相关的代码很有用。

节点也可以处理输入事件。存在 :ref:`_input<class_Node_method__input>` 函数时，程序每收到一次输入都会去调用它。在许多情况下，这么做是大材小用了（除非是用于简单的项目），用 :ref:`_unhandled_input<class_Node_method__unhandled_input>` 函数可能更合适；当输入事件没有被其他节点（通常是 GUI :ref:`Control<class_Control>` 节点）处理时，才会调用这个函数，可以确保节点只接收到它该收到的事件。

为了记录场景的层次结构（尤其是在将场景实例化到其他场景时）可以用 :ref:`owner<class_Node_property_owner>` 属性为节点设置一个“所有者”。它记录的是谁实例化了什么。这在编写编辑器和工具时非常有用。

最后，当一个节点被 :ref:`Object.free<class_Object_method_free>` 或 :ref:`queue_free<class_Node_method_queue_free>` 释放时，它也将释放它的所有子节点。

\ **分组：** 节点可以被添加到很多的组中，以方便管理，你可以根据自己游戏的需要来创建类似“敌人”或“收集品”这样的组。参阅 :ref:`add_to_group<class_Node_method_add_to_group>`\ 、\ :ref:`is_in_group<class_Node_method_is_in_group>` 和 :ref:`remove_from_group<class_Node_method_remove_from_group>`\ 。加入组后，你可以检索这些组中的所有节点，对它们进行迭代，甚至通过 :ref:`SceneTree<class_SceneTree>` 中的方法调用组内方法。

\ **节点的网络编程：** 在连接到服务器（或制作服务器，参阅 :ref:`NetworkedMultiplayerENet<class_NetworkedMultiplayerENet>`\ ）之后，可以使用内置的 RPC（远程过程调用）系统在网络上进行通信。在调用 :ref:`rpc<class_Node_method_rpc>` 时传入方法名，将在本地和所有已连接的对等体中调用对应的方法（对等体=客户端和接受连接的服务器）。为了识别哪个节点收到 RPC 调用，GaaeExplorer 将使用它的 :ref:`NodePath<class_NodePath>`\ （请确保所有对等体上的节点名称相同）。另外，请参阅高级网络教程和相应的演示。

教程
----

- :doc:`Nodes and Scenes <../getting_started/step_by_step/nodes_and_scenes>`

- `All Demos <https://github.com/godotengine/godot-demo-projects/>`__

属性
----

+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`custom_multiplayer<class_Node_property_custom_multiplayer>` |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`String<class_String>`                 | :ref:`filename<class_Node_property_filename>`                     |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`multiplayer<class_Node_property_multiplayer>`               |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`String<class_String>`                 | :ref:`name<class_Node_property_name>`                             |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`Node<class_Node>`                     | :ref:`owner<class_Node_property_owner>`                           |       |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`PauseMode<enum_Node_PauseMode>`       | :ref:`pause_mode<class_Node_property_pause_mode>`                 | ``0`` |
+---------------------------------------------+-------------------------------------------------------------------+-------+
| :ref:`int<class_int>`                       | :ref:`process_priority<class_Node_property_process_priority>`     | ``0`` |
+---------------------------------------------+-------------------------------------------------------------------+-------+

方法
----

+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_enter_tree<class_Node_method__enter_tree>` **(** **)** |virtual|                                                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_exit_tree<class_Node_method__exit_tree>` **(** **)** |virtual|                                                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`       | :ref:`_get_configuration_warning<class_Node_method__get_configuration_warning>` **(** **)** |virtual|                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_input<class_Node_method__input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_physics_process<class_Node_method__physics_process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_process<class_Node_method__process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_ready<class_Node_method__ready>` **(** **)** |virtual|                                                                                                                                       |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_unhandled_input<class_Node_method__unhandled_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` **(** :ref:`InputEventKey<class_InputEventKey>` event **)** |virtual|                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`add_child<class_Node_method_add_child>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` legible_unique_name=false **)**                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`add_child_below_node<class_Node_method_add_child_below_node>` **(** :ref:`Node<class_Node>` node, :ref:`Node<class_Node>` child_node, :ref:`bool<class_bool>` legible_unique_name=false **)** |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`add_to_group<class_Node_method_add_to_group>` **(** :ref:`String<class_String>` group, :ref:`bool<class_bool>` persistent=false **)**                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`can_process<class_Node_method_can_process>` **(** **)** |const|                                                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`duplicate<class_Node_method_duplicate>` **(** :ref:`int<class_int>` flags=15 **)** |const|                                                                                                    |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`find_node<class_Node_method_find_node>` **(** :ref:`String<class_String>` mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`find_parent<class_Node_method_find_parent>` **(** :ref:`String<class_String>` mask **)** |const|                                                                                              |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`get_child<class_Node_method_get_child>` **(** :ref:`int<class_int>` idx **)** |const|                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_child_count<class_Node_method_get_child_count>` **(** **)** |const|                                                                                                                       |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`get_children<class_Node_method_get_children>` **(** **)** |const|                                                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`get_groups<class_Node_method_get_groups>` **(** **)** |const|                                                                                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_index<class_Node_method_get_index>` **(** **)** |const|                                                                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_network_master<class_Node_method_get_network_master>` **(** **)** |const|                                                                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`get_node<class_Node_method_get_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`get_node_and_resource<class_Node_method_get_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)**                                                                              |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`get_node_or_null<class_Node_method_get_node_or_null>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`           | :ref:`get_parent<class_Node_method_get_parent>` **(** **)** |const|                                                                                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`NodePath<class_NodePath>`   | :ref:`get_path<class_Node_method_get_path>` **(** **)** |const|                                                                                                                                     |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`NodePath<class_NodePath>`   | :ref:`get_path_to<class_Node_method_get_path_to>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                  |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`         | :ref:`get_physics_process_delta_time<class_Node_method_get_physics_process_delta_time>` **(** **)** |const|                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_position_in_parent<class_Node_method_get_position_in_parent>` **(** **)** |const|                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`         | :ref:`get_process_delta_time<class_Node_method_get_process_delta_time>` **(** **)** |const|                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`get_scene_instance_load_placeholder<class_Node_method_get_scene_instance_load_placeholder>` **(** **)** |const|                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneTree<class_SceneTree>` | :ref:`get_tree<class_Node_method_get_tree>` **(** **)** |const|                                                                                                                                     |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Viewport<class_Viewport>`   | :ref:`get_viewport<class_Node_method_get_viewport>` **(** **)** |const|                                                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`has_node<class_Node_method_has_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`has_node_and_resource<class_Node_method_has_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_a_parent_of<class_Node_method_is_a_parent_of>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_displayed_folded<class_Node_method_is_displayed_folded>` **(** **)** |const|                                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_greater_than<class_Node_method_is_greater_than>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                          |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_in_group<class_Node_method_is_in_group>` **(** :ref:`String<class_String>` group **)** |const|                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_inside_tree<class_Node_method_is_inside_tree>` **(** **)** |const|                                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_network_master<class_Node_method_is_network_master>` **(** **)** |const|                                                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_physics_processing<class_Node_method_is_physics_processing>` **(** **)** |const|                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_physics_processing_internal<class_Node_method_is_physics_processing_internal>` **(** **)** |const|                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_processing<class_Node_method_is_processing>` **(** **)** |const|                                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_processing_input<class_Node_method_is_processing_input>` **(** **)** |const|                                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_processing_internal<class_Node_method_is_processing_internal>` **(** **)** |const|                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_processing_unhandled_input<class_Node_method_is_processing_unhandled_input>` **(** **)** |const|                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_processing_unhandled_key_input<class_Node_method_is_processing_unhandled_key_input>` **(** **)** |const|                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`move_child<class_Node_method_move_child>` **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_position **)**                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`print_stray_nodes<class_Node_method_print_stray_nodes>` **(** **)**                                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`print_tree<class_Node_method_print_tree>` **(** **)**                                                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`print_tree_pretty<class_Node_method_print_tree_pretty>` **(** **)**                                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`propagate_call<class_Node_method_propagate_call>` **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` args=[  ], :ref:`bool<class_bool>` parent_first=false **)**             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`propagate_notification<class_Node_method_propagate_notification>` **(** :ref:`int<class_int>` what **)**                                                                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`queue_free<class_Node_method_queue_free>` **(** **)**                                                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`raise<class_Node_method_raise>` **(** **)**                                                                                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`remove_and_skip<class_Node_method_remove_and_skip>` **(** **)**                                                                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`remove_child<class_Node_method_remove_child>` **(** :ref:`Node<class_Node>` node **)**                                                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`remove_from_group<class_Node_method_remove_from_group>` **(** :ref:`String<class_String>` group **)**                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`replace_by<class_Node_method_replace_by>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_data=false **)**                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`request_ready<class_Node_method_request_ready>` **(** **)**                                                                                                                                   |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`rpc<class_Node_method_rpc>` **(** :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rpc_config<class_Node_method_rpc_config>` **(** :ref:`String<class_String>` method, :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>` mode **)**                                                    |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`rpc_id<class_Node_method_rpc_id>` **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` method, ... **)** |vararg|                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`rpc_unreliable<class_Node_method_rpc_unreliable>` **(** :ref:`String<class_String>` method, ... **)** |vararg|                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`rpc_unreliable_id<class_Node_method_rpc_unreliable_id>` **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` method, ... **)** |vararg|                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rset<class_Node_method_rset>` **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rset_config<class_Node_method_rset_config>` **(** :ref:`String<class_String>` property, :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>` mode **)**                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rset_id<class_Node_method_rset_id>` **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rset_unreliable<class_Node_method_rset_unreliable>` **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                     |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`rset_unreliable_id<class_Node_method_rset_unreliable_id>` **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_display_folded<class_Node_method_set_display_folded>` **(** :ref:`bool<class_bool>` fold **)**                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_network_master<class_Node_method_set_network_master>` **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_physics_process<class_Node_method_set_physics_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_process<class_Node_method_set_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_process_input<class_Node_method_set_process_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_process_internal<class_Node_method_set_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                                      |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_scene_instance_load_placeholder<class_Node_method_set_scene_instance_load_placeholder>` **(** :ref:`bool<class_bool>` load_placeholder **)**                                              |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`update_configuration_warning<class_Node_method_update_configuration_warning>` **(** **)**                                                                                                     |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_Node_signal_ready:

- **ready** **(** **)**

当节点准备好时触发。

----

.. _class_Node_signal_renamed:

- **renamed** **(** **)**

在重命名节点时触发。

----

.. _class_Node_signal_tree_entered:

- **tree_entered** **(** **)**

当节点进入树时触发。

----

.. _class_Node_signal_tree_exited:

- **tree_exited** **(** **)**

在节点退出树之后触发，并且不再处于活动状态。

----

.. _class_Node_signal_tree_exiting:

- **tree_exiting** **(** **)**

当节点仍处于活动状态但即将退出树时发出。这是反初始化的正确位置（如果愿意，也可以称之为“析构函数”）。

枚举
----

.. _enum_Node_PauseMode:

.. _class_Node_constant_PAUSE_MODE_INHERIT:

.. _class_Node_constant_PAUSE_MODE_STOP:

.. _class_Node_constant_PAUSE_MODE_PROCESS:

enum **PauseMode**:

- **PAUSE_MODE_INHERIT** = **0** --- 继承节点的父节点的暂停模式。对于根节点，它相当于\ :ref:`PAUSE_MODE_STOP<class_Node_constant_PAUSE_MODE_STOP>`\ 。默认值。

- **PAUSE_MODE_STOP** = **1** --- 当 :ref:`SceneTree<class_SceneTree>` 被暂停时，停止 process。

- **PAUSE_MODE_PROCESS** = **2** --- 不管 :ref:`SceneTree<class_SceneTree>` 的暂停状态如何，继续 process。

----

.. _enum_Node_DuplicateFlags:

.. _class_Node_constant_DUPLICATE_SIGNALS:

.. _class_Node_constant_DUPLICATE_GROUPS:

.. _class_Node_constant_DUPLICATE_SCRIPTS:

.. _class_Node_constant_DUPLICATE_USE_INSTANCING:

enum **DuplicateFlags**:

- **DUPLICATE_SIGNALS** = **1** --- 复制该节点的信号。

- **DUPLICATE_GROUPS** = **2** --- 复制节点的组。

- **DUPLICATE_SCRIPTS** = **4** --- 复制该节点的脚本。

- **DUPLICATE_USE_INSTANCING** = **8** --- 使用实例化进行复制。

实例与原件保持链接，因此当原件发生变化时，实例也会发生变化。

常量
----

.. _class_Node_constant_NOTIFICATION_ENTER_TREE:

.. _class_Node_constant_NOTIFICATION_EXIT_TREE:

.. _class_Node_constant_NOTIFICATION_MOVED_IN_PARENT:

.. _class_Node_constant_NOTIFICATION_READY:

.. _class_Node_constant_NOTIFICATION_PAUSED:

.. _class_Node_constant_NOTIFICATION_UNPAUSED:

.. _class_Node_constant_NOTIFICATION_PHYSICS_PROCESS:

.. _class_Node_constant_NOTIFICATION_PROCESS:

.. _class_Node_constant_NOTIFICATION_PARENTED:

.. _class_Node_constant_NOTIFICATION_UNPARENTED:

.. _class_Node_constant_NOTIFICATION_INSTANCED:

.. _class_Node_constant_NOTIFICATION_DRAG_BEGIN:

.. _class_Node_constant_NOTIFICATION_DRAG_END:

.. _class_Node_constant_NOTIFICATION_PATH_CHANGED:

.. _class_Node_constant_NOTIFICATION_INTERNAL_PROCESS:

.. _class_Node_constant_NOTIFICATION_INTERNAL_PHYSICS_PROCESS:

.. _class_Node_constant_NOTIFICATION_POST_ENTER_TREE:

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_ENTER:

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_EXIT:

.. _class_Node_constant_NOTIFICATION_WM_FOCUS_IN:

.. _class_Node_constant_NOTIFICATION_WM_FOCUS_OUT:

.. _class_Node_constant_NOTIFICATION_WM_QUIT_REQUEST:

.. _class_Node_constant_NOTIFICATION_WM_GO_BACK_REQUEST:

.. _class_Node_constant_NOTIFICATION_WM_UNFOCUS_REQUEST:

.. _class_Node_constant_NOTIFICATION_OS_MEMORY_WARNING:

.. _class_Node_constant_NOTIFICATION_TRANSLATION_CHANGED:

.. _class_Node_constant_NOTIFICATION_WM_ABOUT:

.. _class_Node_constant_NOTIFICATION_CRASH:

.. _class_Node_constant_NOTIFICATION_OS_IME_UPDATE:

.. _class_Node_constant_NOTIFICATION_APP_RESUMED:

.. _class_Node_constant_NOTIFICATION_APP_PAUSED:

- **NOTIFICATION_ENTER_TREE** = **10** --- 当节点进入 :ref:`SceneTree<class_SceneTree>` 时收到该通知。

- **NOTIFICATION_EXIT_TREE** = **11** --- 当节点即将退出 :ref:`SceneTree<class_SceneTree>` 时收到该通知。

- **NOTIFICATION_MOVED_IN_PARENT** = **12** --- 在父节点中移动节点时收到该通知。

- **NOTIFICATION_READY** = **13** --- 当节点就绪时接收到通知。请参阅 :ref:`_ready<class_Node_method__ready>`\ 。

- **NOTIFICATION_PAUSED** = **14** --- 暂停节点时接收到的通知。

- **NOTIFICATION_UNPAUSED** = **15** --- 节点暂停时收到该通知。

- **NOTIFICATION_PHYSICS_PROCESS** = **16** --- 当 physics process flag 被设置时，每一帧都会收到该通知（见\ :ref:`set_physics_process<class_Node_method_set_physics_process>`\ ）。

- **NOTIFICATION_PROCESS** = **17** --- 当 process flag 被设置时，每一帧都收到通知（见\ :ref:`set_process<class_Node_method_set_process>`\ ）。

- **NOTIFICATION_PARENTED** = **18** --- 当一个节点被设置为另一个节点的子节点时收到该通知。

\ **注意:**\ 这并不意味着一个节点进入了\ :ref:`SceneTree<class_SceneTree>`\ 。

- **NOTIFICATION_UNPARENTED** = **19** --- 当节点失去父节点时收到的通知（父节点将其从子节点列表中删除）。

- **NOTIFICATION_INSTANCED** = **20** --- 节点被实例化时收到的通知。

- **NOTIFICATION_DRAG_BEGIN** = **21** --- 拖动开始时收到的通知。

- **NOTIFICATION_DRAG_END** = **22** --- 拖动结束时收到的通知。

- **NOTIFICATION_PATH_CHANGED** = **23** --- 当节点的 :ref:`NodePath<class_NodePath>` 改变时收到的通知。

- **NOTIFICATION_INTERNAL_PROCESS** = **25** --- 当 internal process flag 被设置时，每一帧都收到通知（见\ :ref:`set_process_internal<class_Node_method_set_process_internal>`\ ）。

- **NOTIFICATION_INTERNAL_PHYSICS_PROCESS** = **26** --- 当 internal physics process flag 被设置时，每一帧都会收到通知（见\ :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`\ ）。

- **NOTIFICATION_POST_ENTER_TREE** = **27** --- 在节点准备好时收到通知，就在收到\ :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>`\ 之前。与后者不同，它每次节点进入树时都会发送，而不是只发送一次。

- **NOTIFICATION_WM_MOUSE_ENTER** = **1002** --- 当鼠标进入游戏窗口时从操作系统收到的通知。

在桌面和网络平台上实现。

- **NOTIFICATION_WM_MOUSE_EXIT** = **1003** --- 当鼠标离开游戏窗口时从操作系统收到的通知。

在桌面和网络平台上实现。

- **NOTIFICATION_WM_FOCUS_IN** = **1004** --- 当游戏窗口获得焦点时，从操作系统收到的通知。

在所有平台上实现。

- **NOTIFICATION_WM_FOCUS_OUT** = **1005** --- 当游戏窗口未获得焦点时，从操作系统收到的通知。

在所有平台上实现。

- **NOTIFICATION_WM_QUIT_REQUEST** = **1006** --- 发出退出请求时，从操作系统收到的通知（例如用“关闭”按钮或 Alt+F4 关闭窗口）。

在桌面平台上实现。

- **NOTIFICATION_WM_GO_BACK_REQUEST** = **1007** --- 当发出返回请求时，从操作系统收到的通知（例如在 Android 系统上按下“返回”按钮）。

Android 平台特供。

- **NOTIFICATION_WM_UNFOCUS_REQUEST** = **1008** --- 当取消焦点的请求被发送时，从操作系统收到的通知（例如，另一个操作系统窗口想要得到焦点）。

目前没有支持的平台发送这个通知。

- **NOTIFICATION_OS_MEMORY_WARNING** = **1009** --- 当应用程序超过其分配的内存时，从操作系统收到的通知。

专用于 iOS 平台。

- **NOTIFICATION_TRANSLATION_CHANGED** = **1010** --- 当翻译可能发生变化时收到的通知。可以由用户改变区域设置来触发。可以用来响应语言的变化，例如，实时改变 UI 字符串。在使用内置的翻译支持时很有用，比如 :ref:`Object.tr<class_Object_method_tr>`\ 。

- **NOTIFICATION_WM_ABOUT** = **1011** --- 当发送“关于”信息的请求时，从操作系统收到的通知。

特定于 macOS 平台。

- **NOTIFICATION_CRASH** = **1012** --- 当引擎即将崩溃时，从GaaeExplorer的崩溃处理程序收到的通知。

如果崩溃处理程序被启用，这只会在桌面平台上实现。

- **NOTIFICATION_OS_IME_UPDATE** = **1013** --- 当输入法引擎发生更新时，从操作系统收到的通知（例如，IME光标位置或组成字符串的变化）。

特定于macOS平台。

- **NOTIFICATION_APP_RESUMED** = **1014** --- 恢复应用时从操作系统收到的通知。

特定于 Android 平台。

- **NOTIFICATION_APP_PAUSED** = **1015** --- 暂停应用时从操作系统收到的通知。

特定于 Android 平台。

属性说明
--------

.. _class_Node_property_custom_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **custom_multiplayer**

+----------+-------------------------------+
| *Setter* | set_custom_multiplayer(value) |
+----------+-------------------------------+
| *Getter* | get_custom_multiplayer()      |
+----------+-------------------------------+

对默认的\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 的重写。设置为\ ``null``\ 可以使用默认的\ :ref:`SceneTree<class_SceneTree>`\ 。

----

.. _class_Node_property_filename:

- :ref:`String<class_String>` **filename**

+----------+---------------------+
| *Setter* | set_filename(value) |
+----------+---------------------+
| *Getter* | get_filename()      |
+----------+---------------------+

如果场景是从文件实例化的，则其最顶层节点包含在 :ref:`filename<class_Node_property_filename>` 中加载它的绝对文件路径（例如 ``res://levels/1.tscn``\ ）。否则，\ :ref:`filename<class_Node_property_filename>` 设置为空字符串。

----

.. _class_Node_property_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

+----------+-------------------+
| *Getter* | get_multiplayer() |
+----------+-------------------+

与该节点相关的\ :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ 实例。要么是\ :ref:`custom_multiplayer<class_Node_property_custom_multiplayer>`\ ，要么是默认的SceneTree（如果在树内）。

----

.. _class_Node_property_name:

- :ref:`String<class_String>` **name**

+----------+-----------------+
| *Setter* | set_name(value) |
+----------+-----------------+
| *Getter* | get_name()      |
+----------+-----------------+

节点的名称。此名称在兄弟节点（来自同一父节点的其他子节点）中是唯一的。当设置为现有名称时，节点将自动重命名。

\ **注意：** 自动生成的名称可能包含 ``@`` 字符，在使用 :ref:`add_child<class_Node_method_add_child>` 时保留该字符用于唯一名称。手动设置名称时，将删除任何 ``@``\ 。

----

.. _class_Node_property_owner:

- :ref:`Node<class_Node>` **owner**

+----------+------------------+
| *Setter* | set_owner(value) |
+----------+------------------+
| *Getter* | get_owner()      |
+----------+------------------+

节点的所有者。节点可以使用任何其他节点作为其所有者（只要是能够沿着场景树向上追溯到的有效父节点、祖父节点等）。（使用 :ref:`PackedScene<class_PackedScene>`\ ）保存节点时，所有它拥有的节点也会随之保存。由此即可通过实例化和子实例化来创建复杂的 :ref:`SceneTree<class_SceneTree>`\ 。

----

.. _class_Node_property_pause_mode:

- :ref:`PauseMode<enum_Node_PauseMode>` **pause_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_pause_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_pause_mode()      |
+-----------+-----------------------+

暂停模式。暂停 :ref:`SceneTree<class_SceneTree>` 时该节点的行为。

----

.. _class_Node_property_process_priority:

- :ref:`int<class_int>` **process_priority**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_process_priority(value) |
+-----------+-----------------------------+
| *Getter*  | get_process_priority()      |
+-----------+-----------------------------+

节点在已启用的处理回调（即 :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ 、\ :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` 及其内部对应物）的执行顺序中的优先级。进程优先级值\ *较低*\ 的节点将首先执行其处理回调。

方法说明
--------

.. _class_Node_method__enter_tree:

- void **_enter_tree** **(** **)** |virtual|

当节点进入\ :ref:`SceneTree<class_SceneTree>`\ 时调用(例如实例化时，场景改变时，或者在脚本中调用\ :ref:`add_child<class_Node_method_add_child>`\ 后)。如果节点有子节点，则首先调用它的\ :ref:`_enter_tree<class_Node_method__enter_tree>`\ 回调函数，然后再调用子节点的回调函数。

对应于\ :ref:`Object._notification<class_Object_method__notification>`\ 中的\ :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>`\ 通知。

----

.. _class_Node_method__exit_tree:

- void **_exit_tree** **(** **)** |virtual|

当节点即将离开\ :ref:`SceneTree<class_SceneTree>`\ 时被调用（例如，在释放、场景改变或在脚本中调用\ :ref:`remove_child<class_Node_method_remove_child>`\ 后）。如果该节点有子节点，它的\ :ref:`_exit_tree<class_Node_method__exit_tree>`\ 回调将在所有子节点离开树后被最后调用。

对应于 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_EXIT_TREE<class_Node_constant_NOTIFICATION_EXIT_TREE>` 通知和 :ref:`tree_exiting<class_Node_signal_tree_exiting>` 信号。要在节点已经离开活动树时得到通知，请连接到 :ref:`tree_exited<class_Node_signal_tree_exited>` 。

----

.. _class_Node_method__get_configuration_warning:

- :ref:`String<class_String>` **_get_configuration_warning** **(** **)** |virtual|

如果覆盖该方法的脚本是一个\ ``tool``\ 脚本，那么从该方法返回的字符串将在Scene Dock中显示为一个警告。

返回一个空字符串不会产生警告。

当需要更新这个节点的警告时，调用\ :ref:`update_configuration_warning<class_Node_method_update_configuration_warning>`\ 。

----

.. _class_Node_method__input:

- void **_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

当有输入事件时被调用。输入事件通过节点树向上传播，直到一个节点消耗它。

只有当输入处理被启用时才会被调用，如果这个方法被重写，它就会自动完成，可以用\ :ref:`set_process_input<class_Node_method_set_process_input>`\ 来切换。

要消耗输入事件并阻止它进一步传播到其他节点，可以调用\ :ref:`SceneTree.set_input_as_handled<class_SceneTree_method_set_input_as_handled>`\ 。

对于游戏输入，\ :ref:`_unhandled_input<class_Node_method__unhandled_input>`\ 和\ :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>`\ 通常更适合，因为它们允许GUI首先拦截事件。

\ **注意：** 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它非"孤儿"）。

----

.. _class_Node_method__physics_process:

- void **_physics_process** **(** :ref:`float<class_float>` delta **)** |virtual|

在主循环的物理处理步骤中被调用。物理处理意味着帧率与物理同步，即\ ``delta``\ 变量应该是常量。\ ``delta``\ 的单位是秒。

只有当物理处理被启用时才会被调用，如果这个方法被重写，就会自动完成，可以用\ :ref:`set_physics_process<class_Node_method_set_physics_process>`\ 来切换。

对应于\ :ref:`Object._notification<class_Object_method__notification>`\ 中的\ :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>`\ 通知。

\ **注意：** 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它不是"孤儿"）。

----

.. _class_Node_method__process:

- void **_process** **(** :ref:`float<class_float>` delta **)** |virtual|

在主循环的处理步骤中被调用。处理发生在每一帧，并且尽可能快，所以从上一帧开始的\ ``delta``\ 时间不是恒定的。\ ``delta``\ 的单位是秒。

只有在启用处理的情况下才会被调用，如果这个方法被重写，会自动进行处理，可以用\ :ref:`set_process<class_Node_method_set_process>`\ 来切换。

对应于\ :ref:`Object._notification<class_Object_method__notification>`\ 中的\ :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ 通知。

\ **注意：** 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它不是"孤儿"）。

----

.. _class_Node_method__ready:

- void **_ready** **(** **)** |virtual|

当节点 "就绪 "时被调用。子节点的\ :ref:`_ready<class_Node_method__ready>`\ 回调会首先被触发，而父节点会在之后收到就绪通知。

对应于\ :ref:`Object._notification<class_Object_method__notification>`\ 中的\ :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>`\ 通知。也请参阅变量的\ ``onready``\ 关键字。

通常用于初始化。对于更早的初始化，可以使用\ :ref:`Object._init<class_Object_method__init>`\ 。也请参阅\ :ref:`_enter_tree<class_Node_method__enter_tree>`\ 。

\ **注意：** :ref:`_ready<class_Node_method__ready>` 对于每个节点只能调用一次。在从场景树中删除一个节点并再次添加后，\ ``_ready``\ 将不会被第二次调用。这可以通过请求再次调用\ :ref:`request_ready<class_Node_method_request_ready>`\ 来绕过，它可以在再次添加节点之前的任何地方调用。

----

.. _class_Node_method__unhandled_input:

- void **_unhandled_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

当\ :ref:`InputEvent<class_InputEvent>`\ 还未被\ :ref:`_input<class_Node_method__input>`\ 或任何GUI消耗时调用。输入事件通过节点树向上传播，直到一个节点消耗它。

只有在启用了未处理的输入处理时才会被调用，如果这个方法被重写，它就会自动完成，并且可以用\ :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`\ 来切换。

要消耗输入事件并阻止它进一步传播到其他节点，可以调用\ :ref:`SceneTree.set_input_as_handled<class_SceneTree_method_set_input_as_handled>`\ 。

对于游戏输入，这和\ :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>`\ 通常比\ :ref:`_input<class_Node_method__input>`\ 更适合，因为它们允许GUI首先拦截事件。

\ **注意：** 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它不是"孤儿"）。

----

.. _class_Node_method__unhandled_key_input:

- void **_unhandled_key_input** **(** :ref:`InputEventKey<class_InputEventKey>` event **)** |virtual|

当\ :ref:`InputEventKey<class_InputEventKey>`\ 没有被\ :ref:`_input<class_Node_method__input>`\ 或任何GUI消耗时被调用。输入事件通过节点树向上传播，直到一个节点消耗它。

只有在启用了未处理的键输入处理时才会被调用，如果这个方法被重写，它就会自动完成，并且可以用\ :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`\ 来切换。

要消耗输入事件并阻止它进一步传播到其他节点，可以调用\ :ref:`SceneTree.set_input_as_handled<class_SceneTree_method_set_input_as_handled>`\ 。

对于游戏输入，这和\ :ref:`_unhandled_input<class_Node_method__unhandled_input>`\ 通常比\ :ref:`_input<class_Node_method__input>`\ 更适合，因为它们允许GUI首先拦截事件。

\ **注意：** 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它不是"孤儿"）。

----

.. _class_Node_method_add_child:

- void **add_child** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` legible_unique_name=false **)**

添加子节点。节点可以有任意数量的子节点，但是每个子节点必须有唯一的名字。当父节点被删除时，子节点会被自动删除，所以整个场景可以通过删除其最上面的节点而被删除。

如果\ ``legible_unique_name``\ 是\ ``true``\ ，子节点将有一个基于被实例化的节点的名称，而不是其类型可读的名称。

\ **注意：** 如果子节点已经有父节点，该函数将失败。首先使用\ :ref:`remove_child<class_Node_method_remove_child>`\ 将节点从其当前的父节点中移除。如:

::

    if child_node.get_parent():
        child_node.get_parent().remove_child(child_node)
    add_child(child_node)

\ **注意：** 如果你想让一个子节点被持久化到\ :ref:`PackedScene<class_PackedScene>`\ 中，除了调用\ :ref:`add_child<class_Node_method_add_child>`\ 外，还必须设置\ :ref:`owner<class_Node_property_owner>`\ 。这通常与\ `工具脚本 <https://godot.readthedocs.io/en/3.2/tutorials/misc/running_code_in_the_editor.html>`__\ 和\ `编辑器插件 <https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html>`__\ 有关。如果调用\ :ref:`add_child<class_Node_method_add_child>`\ 而不设置\ :ref:`owner<class_Node_property_owner>`\ ，新添加的\ ``Node``\ 在场景树中是不可见的，尽管它在2D/3D视图中可见。

----

.. _class_Node_method_add_child_below_node:

- void **add_child_below_node** **(** :ref:`Node<class_Node>` node, :ref:`Node<class_Node>` child_node, :ref:`bool<class_bool>` legible_unique_name=false **)**

添加\ ``child_node``\ 作为子节点。该子节点在子节点列表中被置于给定的\ ``node``\ 之下。

如果\ ``legible_unique_name``\ 是\ ``true``\ ，子节点将有一个基于被实例化的节点名称，而不是其类型可读的名称。

----

.. _class_Node_method_add_to_group:

- void **add_to_group** **(** :ref:`String<class_String>` group, :ref:`bool<class_bool>` persistent=false **)**

将节点添加到一个组中。组是命名和组织节点子集的辅助工具，例如“敌人”或“收集品”等。一个节点可以在任何数量的组中。节点可以在任何时候被分配到一个组中，但是在它们进入场景树之前不会被添加，参阅 :ref:`is_inside_tree<class_Node_method_is_inside_tree>`\ 。参阅描述中的注释，以及 :ref:`SceneTree<class_SceneTree>` 中的分组方法。

当把节点打包到 :ref:`PackedScene<class_PackedScene>` 并保存到文件时，会使用 ``persistent`` 选项。非持久化的组不会被存储。

\ **注意：**\ 由于性能原因，\ *不保证*\ 节点组的顺序。不应该依赖节点组的顺序，因为每次运行项目节点组的顺序都可能变化。

----

.. _class_Node_method_can_process:

- :ref:`bool<class_bool>` **can_process** **(** **)** |const|

如果节点可以在场景树暂停时进行处理，返回\ ``true``\ （见\ :ref:`pause_mode<class_Node_property_pause_mode>`\ ）。如果场景树没有暂停，总是返回\ ``true``\ ，如果节点不在树中，则返回\ ``false``\ 。

----

.. _class_Node_method_duplicate:

- :ref:`Node<class_Node>` **duplicate** **(** :ref:`int<class_int>` flags=15 **)** |const|

复制节点，返回一个新的节点。

你可以使用\ ``flags``\ 来微调这个行为（见\ :ref:`DuplicateFlags<enum_Node_DuplicateFlags>`\ ）。

\ **注意：** 如果节点包含一个带有构造参数的脚本（即需要向\ :ref:`Object._init<class_Object_method__init>`\ 方法提供参数），它将不能正常工作。在这种情况下，节点将被复制而没有脚本。

----

.. _class_Node_method_find_node:

- :ref:`Node<class_Node>` **find_node** **(** :ref:`String<class_String>` mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|

Finds a descendant of this node whose name matches ``mask`` as in :ref:`String.match<class_String_method_match>` (i.e. case-sensitive, but ``"*"`` matches zero or more characters and ``"?"`` matches any single character except ``"."``). Returns ``null`` if no matching ``Node`` is found.

\ **Note:** It does not match against the full path, just against individual node names.

If ``owned`` is ``true``, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner.

\ **Note:** As this method walks through all the descendants of the node, it is the slowest way to get a reference to another node. Whenever possible, consider using :ref:`get_node<class_Node_method_get_node>` instead. To avoid using :ref:`find_node<class_Node_method_find_node>` too often, consider caching the node reference into a variable.

----

.. _class_Node_method_find_parent:

- :ref:`Node<class_Node>` **find_parent** **(** :ref:`String<class_String>` mask **)** |const|

查找当前节点的第一个父节点，其名称与\ :ref:`String.match<class_String_method_match>`\ 中的\ ``mask``\ 相匹配，区分大小写，其\ ``"*"``\ 匹配零或多个字符，\ ``"?"``\ 匹配任何单个字符，除了\ ``"."``\ 。

\ **注意：**\ 它不是全路径匹配，只与单个节点名称匹配。

\ **注意：**\ 由于这个方法在场景树中向上行走，在大型的、深度嵌套的场景树中可能会很慢。只要有可能，请考虑使用\ :ref:`get_node<class_Node_method_get_node>`\ 代替。为了避免过于频繁地使用\ :ref:`find_parent<class_Node_method_find_parent>`\ ，考虑将节点引用缓存到一个变量中。

----

.. _class_Node_method_get_child:

- :ref:`Node<class_Node>` **get_child** **(** :ref:`int<class_int>` idx **)** |const|

按索引返回一个子节点（见\ :ref:`get_child_count<class_Node_method_get_child_count>`\ ）。这个方法经常被用于遍历一个节点的所有子节点。

要通过一个子节点的名字访问它，请使用\ :ref:`get_node<class_Node_method_get_node>`\ 。

----

.. _class_Node_method_get_child_count:

- :ref:`int<class_int>` **get_child_count** **(** **)** |const|

返回子节点的数目。

----

.. _class_Node_method_get_children:

- :ref:`Array<class_Array>` **get_children** **(** **)** |const|

返回节点的子节点的引用数组。

----

.. _class_Node_method_get_groups:

- :ref:`Array<class_Array>` **get_groups** **(** **)** |const|

返回罗列该节点所在分组的数组。

\ **注意：**\ 出于性能原因，\ *不保证*\ 节点分组的顺序。不应该依赖节点分组的顺序，因为每次运行得到的顺序都可能不同。

\ **注意：**\ 引擎内部会使用一些分组名称（均由下划线开头）。如果想避免与内部分组冲突，请勿添加名称以下划线开头的自定义分组。要在遍历 :ref:`get_groups<class_Node_method_get_groups>` 时排除内部分组，请使用下面这段代码：

::

    # 只保存节点的非内部分组（字符串数组）。
    var non_internal_groups = []
    for group in get_groups():
        if not group.begins_with("_"):
            non_internal_groups.push_back(group)

----

.. _class_Node_method_get_index:

- :ref:`int<class_int>` **get_index** **(** **)** |const|

返回节点的索引，即它在其父节点的兄弟节点中的位置。

----

.. _class_Node_method_get_network_master:

- :ref:`int<class_int>` **get_network_master** **(** **)** |const|

返回此节点的网络主节点的对等 ID。请参阅 :ref:`set_network_master<class_Node_method_set_network_master>`\ 。

----

.. _class_Node_method_get_node:

- :ref:`Node<class_Node>` **get_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

Fetches a node. The :ref:`NodePath<class_NodePath>` can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, ``null`` is returned and an error is logged. Attempts to access methods on the return value will result in an "Attempt to call <method> on a null instance." error.

\ **Note:** Fetching absolute paths only works when the node is inside the scene tree (see :ref:`is_inside_tree<class_Node_method_is_inside_tree>`).

\ **Example:** Assume your current node is Character and the following tree:

::

    /root
    /root/Character
    /root/Character/Sword
    /root/Character/Backpack/Dagger
    /root/MyGame
    /root/Swamp/Alligator
    /root/Swamp/Mosquito
    /root/Swamp/Goblin

Possible paths are:

::

    get_node("Sword")
    get_node("Backpack/Dagger")
    get_node("../Swamp/Alligator")
    get_node("/root/MyGame")

----

.. _class_Node_method_get_node_and_resource:

- :ref:`Array<class_Array>` **get_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)**

获取一个节点及其由\ :ref:`NodePath<class_NodePath>`\ 子名称指定的资源(例如\ ``Area2D/CollisionShape2D:shape``)。如果在\ :ref:`NodePath<class_NodePath>`\ 中指定了多个嵌套资源，则将获取最后一个。

返回值是一个大小为3的数组:第一个索引指向\ ``Node``\ (或\ ``null``)，第二个索引指向\ :ref:`Resource<class_Resource>`\ (或\ ``null``)，第三个索引是剩余的\ :ref:`NodePath<class_NodePath>`\ 。

例如，假设\ ``Area2D/CollisionShape2D``\ 是一个有效的节点，并且它的\ ``shape``\ 属性被分配了一个\ :ref:`RectangleShape2D<class_RectangleShape2D>`\ 资源，可以有这样的输出:

::

    print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]

----

.. _class_Node_method_get_node_or_null:

- :ref:`Node<class_Node>` **get_node_or_null** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

类似于\ :ref:`get_node<class_Node_method_get_node>`\ ，但如果\ ``路径``\ 没有指向有效的\ ``Node``\ ，则不会记录错误。

----

.. _class_Node_method_get_parent:

- :ref:`Node<class_Node>` **get_parent** **(** **)** |const|

Returns the parent node of the current node, or ``null`` if the node lacks a parent.

----

.. _class_Node_method_get_path:

- :ref:`NodePath<class_NodePath>` **get_path** **(** **)** |const|

返回当前节点的绝对路径。这只在当前节点在场景树中起作用（请参阅 :ref:`is_inside_tree<class_Node_method_is_inside_tree>`\ ）。

----

.. _class_Node_method_get_path_to:

- :ref:`NodePath<class_NodePath>` **get_path_to** **(** :ref:`Node<class_Node>` node **)** |const|

从这个节点返回到指定的\ ``node``\ 的相对\ :ref:`NodePath<class_NodePath>`\ 。两个节点必须在同一个场景中，否则函数将失败。

----

.. _class_Node_method_get_physics_process_delta_time:

- :ref:`float<class_float>` **get_physics_process_delta_time** **(** **)** |const|

返回自上次物理绑定帧以来所经过的时间（单位为秒），参阅 :ref:`_physics_process<class_Node_method__physics_process>`\ 。在物理处理中，这始终是一个常数，除非通过 :ref:`Engine.iterations_per_second<class_Engine_property_iterations_per_second>` 改变每秒的帧数。

----

.. _class_Node_method_get_position_in_parent:

- :ref:`int<class_int>` **get_position_in_parent** **(** **)** |const|

返回场景树分支中节点的顺序。例如，如果在第一个子节点上调用，则位置为\ ``0``\ 。

----

.. _class_Node_method_get_process_delta_time:

- :ref:`float<class_float>` **get_process_delta_time** **(** **)** |const|

返回自上次进程回调以来经过的时间(以秒为单位)。这个值可能因帧而异。

----

.. _class_Node_method_get_scene_instance_load_placeholder:

- :ref:`bool<class_bool>` **get_scene_instance_load_placeholder** **(** **)** |const|

如果这是一个实例加载占位符，则返回\ ``true``\ 。看到\ :ref:`InstancePlaceholder<class_InstancePlaceholder>`\ 。

----

.. _class_Node_method_get_tree:

- :ref:`SceneTree<class_SceneTree>` **get_tree** **(** **)** |const|

返回包含该节点的\ :ref:`SceneTree<class_SceneTree>`\ 。

----

.. _class_Node_method_get_viewport:

- :ref:`Viewport<class_Viewport>` **get_viewport** **(** **)** |const|

返回节点的\ :ref:`Viewport<class_Viewport>`\ 。

----

.. _class_Node_method_has_node:

- :ref:`bool<class_bool>` **has_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

如果\ :ref:`NodePath<class_NodePath>`\ 指向的节点存在，则返回\ ``true``\ 。

----

.. _class_Node_method_has_node_and_resource:

- :ref:`bool<class_bool>` **has_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

如果\ :ref:`NodePath<class_NodePath>`\ 指向一个有效的节点，并且它的子名称指向一个有效的资源，例如\ ``Area2D/CollisionShape2D:shape``\ ，则返回\ ``true``\ 。具有非\ :ref:`Resource<class_Resource>`\ 类型的属性(例如节点或基本数学类型)不被认为是资源。

----

.. _class_Node_method_is_a_parent_of:

- :ref:`bool<class_bool>` **is_a_parent_of** **(** :ref:`Node<class_Node>` node **)** |const|

如果给定节点是当前节点的直接或间接子节点，则返回\ ``true``\ 。

----

.. _class_Node_method_is_displayed_folded:

- :ref:`bool<class_bool>` **is_displayed_folded** **(** **)** |const|

如果节点在场景dock中折叠(collapsed)，则返回\ ``true``\ 。

----

.. _class_Node_method_is_greater_than:

- :ref:`bool<class_bool>` **is_greater_than** **(** :ref:`Node<class_Node>` node **)** |const|

如果给定节点在场景层次结构中出现的时间晚于当前节点，则返回\ ``true``\ 。

----

.. _class_Node_method_is_in_group:

- :ref:`bool<class_bool>` **is_in_group** **(** :ref:`String<class_String>` group **)** |const|

如果该节点在指定的组中，则返回\ ``true``\ 。参阅描述中的注释和\ :ref:`SceneTree<class_SceneTree>`\ 中的组方法。

----

.. _class_Node_method_is_inside_tree:

- :ref:`bool<class_bool>` **is_inside_tree** **(** **)** |const|

如果该节点当前在\ :ref:`SceneTree<class_SceneTree>`\ 中，返回\ ``true``\ 。

----

.. _class_Node_method_is_network_master:

- :ref:`bool<class_bool>` **is_network_master** **(** **)** |const|

如果本地系统是此节点的主系统（用于多人游戏），则返回\ ``true``\ 。

----

.. _class_Node_method_is_physics_processing:

- :ref:`bool<class_bool>` **is_physics_processing** **(** **)** |const|

如果启用了物理处理，返回\ ``true``\ (参阅\ :ref:`set_physics_process<class_Node_method_set_physics_process>`)。

----

.. _class_Node_method_is_physics_processing_internal:

- :ref:`bool<class_bool>` **is_physics_processing_internal** **(** **)** |const|

如果内部物理处理被启用，返回\ ``true``\ (见\ :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`)。

----

.. _class_Node_method_is_processing:

- :ref:`bool<class_bool>` **is_processing** **(** **)** |const|

如果开启了处理，返回\ ``true``\ (参阅\ :ref:`set_process<class_Node_method_set_process>`)。

----

.. _class_Node_method_is_processing_input:

- :ref:`bool<class_bool>` **is_processing_input** **(** **)** |const|

如果节点正在处理输入（请参阅 :ref:`set_process_input<class_Node_method_set_process_input>`\ ），则返回\ ``true``\ 。

----

.. _class_Node_method_is_processing_internal:

- :ref:`bool<class_bool>` **is_processing_internal** **(** **)** |const|

如果启用了内部处理，返回\ ``true``\ (参阅\ :ref:`set_process_internal<class_Node_method_set_process_internal>`)。

----

.. _class_Node_method_is_processing_unhandled_input:

- :ref:`bool<class_bool>` **is_processing_unhandled_input** **(** **)** |const|

如果节点正在处理未被处理的输入(参阅\ :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`)，则返回\ ``true``\ 。

----

.. _class_Node_method_is_processing_unhandled_key_input:

- :ref:`bool<class_bool>` **is_processing_unhandled_key_input** **(** **)** |const|

如果节点正在处理未被处理的键输入(参阅\ :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`)，则返回\ ``true``\ 。

----

.. _class_Node_method_move_child:

- void **move_child** **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_position **)**

在其他子节点中将子节点移动到不同的位置(顺序)。由于调用、信号等是按树顺序执行的，因此更改子节点的顺序可能会很有用。

----

.. _class_Node_method_print_stray_nodes:

- void **print_stray_nodes** **(** **)**

打印所有散在节点(:ref:`SceneTree<class_SceneTree>`\ 之外的节点)。用于调试。只能在调试版本中工作。

----

.. _class_Node_method_print_tree:

- void **print_tree** **(** **)**

将树打印到标准输出。主要用于调试。这个版本显示相对于当前节点的路径，适合复制/粘贴到\ :ref:`get_node<class_Node_method_get_node>`\ 函数中。

\ **示例输出:**\ 

::

    TheGame
    TheGame/Menu
    TheGame/Menu/Label
    TheGame/Menu/Camera2D
    TheGame/SplashScreen
    TheGame/SplashScreen/Camera2D

----

.. _class_Node_method_print_tree_pretty:

- void **print_tree_pretty** **(** **)**

类似于\ :ref:`print_tree<class_Node_method_print_tree>`\ ，它将树打印到标准输出。这个版本显示更多的图形，类似于在场景检查器中显示的内容。它对于检查较大的树很有用。

\ **输出示例：**\ 

::

     ┖╴TheGame
        ┠╴Menu
        ┃  ┠╴Label
        ┃  ┖╴Camera2D
        ┖╴SplashScreen
           ┖╴Camera2D

----

.. _class_Node_method_propagate_call:

- void **propagate_call** **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` args=[  ], :ref:`bool<class_bool>` parent_first=false **)**

在这个节点上使用\ ``args``\ 中给出的参数调用给定的方法(如果存在)，并递归地在其所有子节点身上调用。如果\ ``parent_first``\ 参数为\ ``true``\ ，该方法将首先在当前节点上调用，然后在其所有子节点上调用。如果\ ``parent_first``\ 为\ ``false``\ ，子节点的方法将首先被调用。

----

.. _class_Node_method_propagate_notification:

- void **propagate_notification** **(** :ref:`int<class_int>` what **)**

通过对所有节点调用\ :ref:`Object.notification<class_Object_method_notification>`\ ，递归地通知当前节点和它的所有子节点。

----

.. _class_Node_method_queue_free:

- void **queue_free** **(** **)**

在当前帧结束时排队删除一个节点。当删除时，其所有的子节点也将被删除。这个方法确保删除节点是安全的，与\ :ref:`Object.free<class_Object_method_free>`\ 相反。使用\ :ref:`Object.is_queued_for_deletion<class_Object_method_is_queued_for_deletion>`\ 来检查一个节点是否会在帧末被删除。

\ **重要：** 如果你有变量指向节点，一旦节点被释放，它将\ *不会* 被分配到\ ``null``\ 。相反，它将指向一个\ *先前被释放的实例*\ ，你应该在尝试调用其方法或访问其属性之前用\ :ref:`@GDScript.is_instance_valid<class_@GDScript_method_is_instance_valid>`\ 来验证它。

----

.. _class_Node_method_raise:

- void **raise** **(** **)**

将此节点移到父节点的子节点层次的底部。这在GUI（\ :ref:`Control<class_Control>`\ 节点）中通常很有用，因为它们的绘制顺序取决于它们在树中的顺序。最上面的节点首先被绘制出来，然后在层次结构中最上面的节点下面的所有同级被依次绘制在它的上面。使用\ ``raise``\ 后，一个控件将被绘制在其同级的上面。

----

.. _class_Node_method_remove_and_skip:

- void **remove_and_skip** **(** **)**

移除一个节点，并将其所有的子节点设置为父节点的子节点（如果它存在的话）。所有经过被删除的节点的事件订阅都将被取消。

----

.. _class_Node_method_remove_child:

- void **remove_child** **(** :ref:`Node<class_Node>` node **)**

删除一个子节点。该节点不会被删除，必须手动删除。

\ **注：**\ 如果该\ :ref:`owner<class_Node_property_owner>`\ 不再是父节点或祖先，则该函数可以将被移除节点（或其后代）的\ :ref:`owner<class_Node_property_owner>`\ 设置为\ ``null``\ 。

----

.. _class_Node_method_remove_from_group:

- void **remove_from_group** **(** :ref:`String<class_String>` group **)**

将一个节点从一个组中移除。参阅描述中的注释，以及\ :ref:`SceneTree<class_SceneTree>`\ 中的组方法。

----

.. _class_Node_method_replace_by:

- void **replace_by** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_data=false **)**

Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.

\ **Note:** The given node will become the new parent of any child nodes that the replaced node had.

\ **Note:** The replaced node is not automatically freed, so you either need to keep it in a variable for later use or free it using :ref:`Object.free<class_Object_method_free>`.

----

.. _class_Node_method_request_ready:

- void **request_ready** **(** **)**

请求再次调用\ ``_ready``\ 。注意，该方法不会被立即调用，而是被安排在该节点再次被添加到场景树时（见\ :ref:`_ready<class_Node_method__ready>`\ ）。\ ``_ready``\ 只为请求它的节点调用，这意味着如果你想让每个子节点也调用\ ``_ready``\ ，你需要为它们请求ready（在这种情况下，\ ``_ready``\ 的调用顺序与正常情况下相同）。

----

.. _class_Node_method_rpc:

- :ref:`Variant<class_Variant>` **rpc** **(** :ref:`String<class_String>` method, ... **)** |vararg|

为给定的\ ``method``\ 向网络（和本地）上的对等体发送远程过程调用请求，可选择将所有附加参数作为参数发送给RPC调用的方法。调用请求将只被具有相同\ :ref:`NodePath<class_NodePath>`\ 的节点接收，包括完全相同的节点名称。行为取决于给定方法的RPC配置，见\ :ref:`rpc_config<class_Node_method_rpc_config>`\ 。方法在默认情况下不会暴露给RPC。参阅\ :ref:`rset<class_Node_method_rset>`\ 和\ :ref:`rset_config<class_Node_method_rset_config>`\ 的属性。返回一个空的\ :ref:`Variant<class_Variant>`\ 。

\ **注意：**\ 只有在你从\ :ref:`SceneTree<class_SceneTree>`\ 收到\ ``connected_to_server``\ 信号之后，你才能安全地在客户端使用RPC。你还需要跟踪连接状态，可以通过\ ``server_disconnected``\ 等\ :ref:`SceneTree<class_SceneTree>`\ 信号或者检查\ ``SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED``\ 。

----

.. _class_Node_method_rpc_config:

- void **rpc_config** **(** :ref:`String<class_String>` method, :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>` mode **)**

将 ``method`` 方法的 RPC 模式改为 ``mode`` 模式。请参阅 :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>`\ 。另一种方法是在方法和属性上加入相应的关键字注解（\ ``remote``\ 、\ ``master``\ 、\ ``puppet``\ 、\ ``remoteesync``\ 、\ ``masterync``\ 、\ ``puppetsync``\ ）。默认情况下，方法不暴露于网络（和 RPC）。请参阅 :ref:`rset<class_Node_method_rset>` 和 :ref:`rset_config<class_Node_method_rset_config>` 的属性。

----

.. _class_Node_method_rpc_id:

- :ref:`Variant<class_Variant>` **rpc_id** **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` method, ... **)** |vararg|

向由\ ``peer_id``\ 确定的特定peer发送一个\ :ref:`rpc<class_Node_method_rpc>`\ （见\ :ref:`NetworkedMultiplayerPeer.set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>`\ ）。返回一个空的\ :ref:`Variant<class_Variant>`\ 。

----

.. _class_Node_method_rpc_unreliable:

- :ref:`Variant<class_Variant>` **rpc_unreliable** **(** :ref:`String<class_String>` method, ... **)** |vararg|

使用一个不可靠的协议发送一个\ :ref:`rpc<class_Node_method_rpc>`\ 。返回一个空的\ :ref:`Variant<class_Variant>`\ 。

----

.. _class_Node_method_rpc_unreliable_id:

- :ref:`Variant<class_Variant>` **rpc_unreliable_id** **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` method, ... **)** |vararg|

使用不可靠的协议（见\ :ref:`NetworkedMultiplayerPeer.set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>`\ ）向由\ ``peer_id``\ 标识的特定peer发送一个\ :ref:`rpc<class_Node_method_rpc>`\ 。返回一个空的\ :ref:`Variant<class_Variant>`\ 。

----

.. _class_Node_method_rset:

- void **rset** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

在其他对等体上远程改变一个属性的值（和本地）。行为取决于给定属性的RPC配置，见\ :ref:`rset_config<class_Node_method_rset_config>`\ 。关于方法的RPC，也请参阅\ :ref:`rpc<class_Node_method_rpc>`\ ，大多数信息也适用于这个方法。

----

.. _class_Node_method_rset_config:

- void **rset_config** **(** :ref:`String<class_String>` property, :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>` mode **)**

将给定的\ ``属性``\ 的RPC模式改为给定的\ ``mode``\ 。参阅\ :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>`\ 。另一种方法是用相应的关键字（\ ``remote``, ``master``, ``puppet``, ``remoteesync``, ``masterync``, ``puppetsync``\ ）来注释方法和属性。默认情况下，属性不会暴露给网络（和RPC）。也请参阅\ :ref:`rpc<class_Node_method_rpc>`\ 和\ :ref:`rpc_config<class_Node_method_rpc_config>`\ 的方法。

----

.. _class_Node_method_rset_id:

- void **rset_id** **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

远程改变属性的值在一个指定的peer上\ ``peer_id``\ (参阅\ :ref:`NetworkedMultiplayerPeer.set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>`)。

----

.. _class_Node_method_rset_unreliable:

- void **rset_unreliable** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

使用不可靠的协议远程更改其他对等点(和本地)上的属性值。

----

.. _class_Node_method_rset_unreliable_id:

- void **rset_unreliable_id** **(** :ref:`int<class_int>` peer_id, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

使用不可靠的协议(参阅\ :ref:`NetworkedMultiplayerPeer.set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>`)远程更改指定对等体\ ``peer_id``\ 上的属性值。

----

.. _class_Node_method_set_display_folded:

- void **set_display_folded** **(** :ref:`bool<class_bool>` fold **)**

设置场景dock中节点的折叠状态。

----

.. _class_Node_method_set_network_master:

- void **set_network_master** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**

将节点的网络主节点设置为具有给定ID的对等体。网络主节点是对网络上的节点具有权威的对等体。与\ ``master``\ 和\ ``puppet``\ 关键字一起使用很有用。默认情况下从父节点继承，父节点最终默认为peer ID 1(服务器)。如果\ ``recursive``\ ，则递归地将给定的对等节点设置为该节点所有子节点的主节点。

----

.. _class_Node_method_set_physics_process:

- void **set_physics_process** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用物理处理（即固定帧率）。当一个节点被处理时，它将以一个固定的（通常是60FPS，参阅\ :ref:`Engine.iterations_per_second<class_Engine_property_iterations_per_second>`\ 来更改该值）时间间隔收到一个\ :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>`\ （如果存在，\ :ref:`_physics_process<class_Node_method__physics_process>`\ 回调将被调用）。如果\ :ref:`_physics_process<class_Node_method__physics_process>`\ 被重写，则自动启用。在\ :ref:`_ready<class_Node_method__ready>`\ 之前对它的任何调用都将被忽略。

----

.. _class_Node_method_set_physics_process_internal:

- void **set_physics_process_internal** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用该节点的内部物理。内部物理处理与正常的\ :ref:`_physics_process<class_Node_method__physics_process>`\ 调用隔离进行，并且由某些节点内部使用，以确保正常工作，即使节点暂停或物理处理因脚本而禁用（\ :ref:`set_physics_process<class_Node_method_set_physics_process>`\ ）。仅适用于用于操纵内置节点行为的高级用途。

\ **警告:** 内置节点依靠内部处理来实现自己的逻辑，所以从你的代码中改变这个值可能会导致意外的行为。为特定的高级用途提供了对此内部逻辑的脚本访问，但不安全且不支持。

----

.. _class_Node_method_set_process:

- void **set_process** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用帧处理。当一个节点被处理时，它将在每个绘制的帧上收到一个\ :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ （如果存在，\ :ref:`_process<class_Node_method__process>`\ 回调将被调用）。如果\ :ref:`_process<class_Node_method__process>`\ 被重写，则自动启用。在 :ref:`_ready<class_Node_method__ready>` 之前对它的任何调用都将被忽略。

----

.. _class_Node_method_set_process_input:

- void **set_process_input** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用输入处理。对于GUI控件来说，这不是必需的。如果\ :ref:`_input<class_Node_method__input>`\ 被重写，则自动启用。任何在\ :ref:`_ready<class_Node_method__ready>`\ 之前对它的调用都将被忽略。

----

.. _class_Node_method_set_process_internal:

- void **set_process_internal** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用此节点的内部处理。内部处理与正常的 :ref:`_process<class_Node_method__process>` 调用隔离进行，并且由某些节点内部使用，以确保正常工作，即使节点已暂停或处理因脚本而禁用（\ :ref:`set_process<class_Node_method_set_process>`\ ）。仅适用于操纵内置节点行为的高级用途。

\ **警告：** 内置节点依赖于内部处理来实现自己的逻辑，因此更改代码中的这个值可能会导致意外行为。为特定的高级用途提供了对此内部逻辑的脚本访问，但不安全且不支持。

----

.. _class_Node_method_set_process_unhandled_input:

- void **set_process_unhandled_input** **(** :ref:`bool<class_bool>` enable **)**

启用未处理的输入处理。这对GUI控件来说是不需要的! 它使节点能够接收所有以前没有处理的输入（通常是由\ :ref:`Control<class_Control>`\ 处理的）。如果\ :ref:`_unhandled_input<class_Node_method__unhandled_input>`\ 被重载，则自动启用。在\ :ref:`_ready<class_Node_method__ready>`\ 之前对它的任何调用都将被忽略。

----

.. _class_Node_method_set_process_unhandled_key_input:

- void **set_process_unhandled_key_input** **(** :ref:`bool<class_bool>` enable **)**

启用未处理的按键输入处理。如果\ :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>`\ 被重写，则自动启用。任何在\ :ref:`_ready<class_Node_method__ready>`\ 之前对它的调用都将被忽略。

----

.. _class_Node_method_set_scene_instance_load_placeholder:

- void **set_scene_instance_load_placeholder** **(** :ref:`bool<class_bool>` load_placeholder **)**

设置这是否是一个实例加载占位符。参阅\ :ref:`InstancePlaceholder<class_InstancePlaceholder>`\ 。

----

.. _class_Node_method_update_configuration_warning:

- void **update_configuration_warning** **(** **)**

更新在Scene Dock中为这个节点显示的警告。

使用\ :ref:`_get_configuration_warning<class_Node_method__get_configuration_warning>`\ 来设置要显示的警告信息。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
