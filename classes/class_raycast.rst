:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the RayCast.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RayCast:

RayCast
=======

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

查询与射线相交的最近物体。

描述
----

RayCast 表示从起点到终点位置的线，\ ``cast_to``\ 。它用于检测 3D 空间，以便找到沿光线路径最近的对象。

RayCast 可以忽略某些对象，方法是通过 ``add_exception`` 将它们添加到例外列表中，或者通过使用碰撞层和掩码设置，进行适当的过滤。

RayCast 可以配置为报告与 :ref:`Area<class_Area>`\ (:ref:`collide_with_areas<class_RayCast_property_collide_with_areas>`) 和/或 :ref:`PhysicsBody<class_PhysicsBody>`\ (:ref:`collide_with_bodies<class_RayCast_property_collide_with_bodies>`) 的碰撞。

只有启用的光线投射才能检测空间并报告碰撞。

RayCast 计算每个物理帧的交集（参阅 :ref:`Node<class_Node>`\ ），并将结果缓存起来，以便稍后使用，直到下一帧。如果物理帧之间（或同一帧期间）需要多次检测，请在调整光线投射后使用\ :ref:`force_raycast_update<class_RayCast_method_force_raycast_update>`\ 。

教程
----

- :doc:`Ray-casting <../tutorials/physics/ray-casting>`

- `3D Voxel Demo <https://godotengine.org/asset-library/asset/676>`__

属性
----

+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`cast_to<class_RayCast_property_cast_to>`                                   | ``Vector3( 0, -1, 0 )`` |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`       | :ref:`collide_with_areas<class_RayCast_property_collide_with_areas>`             | ``false``               |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`       | :ref:`collide_with_bodies<class_RayCast_property_collide_with_bodies>`           | ``true``                |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`         | :ref:`collision_mask<class_RayCast_property_collision_mask>`                     | ``1``                   |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`     | :ref:`debug_shape_custom_color<class_RayCast_property_debug_shape_custom_color>` | ``Color( 0, 0, 0, 1 )`` |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`     | :ref:`debug_shape_thickness<class_RayCast_property_debug_shape_thickness>`       | ``2.0``                 |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`       | :ref:`enabled<class_RayCast_property_enabled>`                                   | ``false``               |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`       | :ref:`exclude_parent<class_RayCast_property_exclude_parent>`                     | ``true``                |
+-------------------------------+----------------------------------------------------------------------------------+-------------------------+

方法
----

+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_exception<class_RayCast_method_add_exception>` **(** :ref:`Object<class_Object>` node **)**                                           |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_exception_rid<class_RayCast_method_add_exception_rid>` **(** :ref:`RID<class_RID>` rid **)**                                          |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`clear_exceptions<class_RayCast_method_clear_exceptions>` **(** **)**                                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`force_raycast_update<class_RayCast_method_force_raycast_update>` **(** **)**                                                              |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`   | :ref:`get_collider<class_RayCast_method_get_collider>` **(** **)** |const|                                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_collider_shape<class_RayCast_method_get_collider_shape>` **(** **)** |const|                                                          |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`get_collision_mask_bit<class_RayCast_method_get_collision_mask_bit>` **(** :ref:`int<class_int>` bit **)** |const|                        |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_collision_normal<class_RayCast_method_get_collision_normal>` **(** **)** |const|                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_collision_point<class_RayCast_method_get_collision_point>` **(** **)** |const|                                                        |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_colliding<class_RayCast_method_is_colliding>` **(** **)** |const|                                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`remove_exception<class_RayCast_method_remove_exception>` **(** :ref:`Object<class_Object>` node **)**                                     |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`remove_exception_rid<class_RayCast_method_remove_exception_rid>` **(** :ref:`RID<class_RID>` rid **)**                                    |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_collision_mask_bit<class_RayCast_method_set_collision_mask_bit>` **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)** |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_RayCast_property_cast_to:

- :ref:`Vector3<class_Vector3>` **cast_to**

+-----------+-------------------------+
| *Default* | ``Vector3( 0, -1, 0 )`` |
+-----------+-------------------------+
| *Setter*  | set_cast_to(value)      |
+-----------+-------------------------+
| *Getter*  | get_cast_to()           |
+-----------+-------------------------+

光线相对于光线投射的 ``position``\ 的目标点，。

----

.. _class_RayCast_property_collide_with_areas:

- :ref:`bool<class_bool>` **collide_with_areas**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | set_collide_with_areas(value)   |
+-----------+---------------------------------+
| *Getter*  | is_collide_with_areas_enabled() |
+-----------+---------------------------------+

如果 ``true``\ ，将反馈与 :ref:`Area<class_Area>` 的碰撞。

----

.. _class_RayCast_property_collide_with_bodies:

- :ref:`bool<class_bool>` **collide_with_bodies**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_collide_with_bodies(value)   |
+-----------+----------------------------------+
| *Getter*  | is_collide_with_bodies_enabled() |
+-----------+----------------------------------+

如果 ``true``\ ，将反馈与 :ref:`PhysicsBody<class_PhysicsBody>` 的碰撞。

----

.. _class_RayCast_property_collision_mask:

- :ref:`int<class_int>` **collision_mask**

+-----------+---------------------------+
| *Default* | ``1``                     |
+-----------+---------------------------+
| *Setter*  | set_collision_mask(value) |
+-----------+---------------------------+
| *Getter*  | get_collision_mask()      |
+-----------+---------------------------+

The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See `Collision layers and masks <../tutorials/physics/physics_introduction.html#collision-layers-and-masks>`__ in the documentation for more information.

----

.. _class_RayCast_property_debug_shape_custom_color:

- :ref:`Color<class_Color>` **debug_shape_custom_color**

+-----------+-------------------------------------+
| *Default* | ``Color( 0, 0, 0, 1 )``             |
+-----------+-------------------------------------+
| *Setter*  | set_debug_shape_custom_color(value) |
+-----------+-------------------------------------+
| *Getter*  | get_debug_shape_custom_color()      |
+-----------+-------------------------------------+

如果在 **Debug** 菜单中启用了可见碰撞形状 **Visible Collision Shapes**\ ，则可用于在编辑器中和运行时绘制形状的自定义颜色。如果 ``RayCast`` 与某物体发生碰撞，此颜色将在运行时突出显示。

如果设置为 ``Color(0.0, 0.0, 0.0)``\ （默认），则使用 :ref:`ProjectSettings.debug/shapes/collision/shape_color<class_ProjectSettings_property_debug/shapes/collision/shape_color>` 中设置的颜色。

----

.. _class_RayCast_property_debug_shape_thickness:

- :ref:`float<class_float>` **debug_shape_thickness**

+-----------+----------------------------------+
| *Default* | ``2.0``                          |
+-----------+----------------------------------+
| *Setter*  | set_debug_shape_thickness(value) |
+-----------+----------------------------------+
| *Getter*  | get_debug_shape_thickness()      |
+-----------+----------------------------------+

如果设置为 ``1``\ ，则将一条线用作调试形状。否则，将绘制一个截断的金字塔来表示 ``RayCast``\ 。需要在 **调试** 菜单中启用可见碰撞形状 **Visible Collision Shapes**\ ，以便调试形状在运行时可见。

----

.. _class_RayCast_property_enabled:

- :ref:`bool<class_bool>` **enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_enabled(value) |
+-----------+--------------------+
| *Getter*  | is_enabled()       |
+-----------+--------------------+

如果 ``true``\ ，将报告碰撞。

----

.. _class_RayCast_property_exclude_parent:

- :ref:`bool<class_bool>` **exclude_parent**

+-----------+--------------------------------+
| *Default* | ``true``                       |
+-----------+--------------------------------+
| *Setter*  | set_exclude_parent_body(value) |
+-----------+--------------------------------+
| *Getter*  | get_exclude_parent_body()      |
+-----------+--------------------------------+

如果 ``true``\ ，则此 RayCast 的直接父级的碰撞将被忽略。

方法说明
--------

.. _class_RayCast_method_add_exception:

- void **add_exception** **(** :ref:`Object<class_Object>` node **)**

添加碰撞例外，这样射线就不会报告与指定节点的碰撞情况。

----

.. _class_RayCast_method_add_exception_rid:

- void **add_exception_rid** **(** :ref:`RID<class_RID>` rid **)**

添加碰撞例外，这样射线就不会报告与指定 :ref:`RID<class_RID>` 的碰撞。

----

.. _class_RayCast_method_clear_exceptions:

- void **clear_exceptions** **(** **)**

删除此射线的所有碰撞例外。

----

.. _class_RayCast_method_force_raycast_update:

- void **force_raycast_update** **(** **)**

更新射线的碰撞信息。

使用此方法立即更新碰撞信息，而不是等待下一个 ``_physics_process`` 调用，例如，如果光线或其父级已更改状态。

\ **注意：** ``enabled``\ 不需要此功能。

----

.. _class_RayCast_method_get_collider:

- :ref:`Object<class_Object>` **get_collider** **(** **)** |const|

返回射线相交的第一个对象，如果没有对象与射线相交，则返回 ``null``\ （即 :ref:`is_colliding<class_RayCast_method_is_colliding>` 返回 ``false``\ ）。

----

.. _class_RayCast_method_get_collider_shape:

- :ref:`int<class_int>` **get_collider_shape** **(** **)** |const|

返回射线相交的第一个对象的形状 ID，如果没有对象与射线相交，则返回 ``0``\ （即 :ref:`is_colliding<class_RayCast_method_is_colliding>` 返回 ``false``\ ）。

----

.. _class_RayCast_method_get_collision_mask_bit:

- :ref:`bool<class_bool>` **get_collision_mask_bit** **(** :ref:`int<class_int>` bit **)** |const|

如果通过的位索引被打开，则返回\ ``true``\ 。

\ **注意：** 位指数范围为0-19。

----

.. _class_RayCast_method_get_collision_normal:

- :ref:`Vector3<class_Vector3>` **get_collision_normal** **(** **)** |const|

返回碰撞点相交物体形状的法线。

----

.. _class_RayCast_method_get_collision_point:

- :ref:`Vector3<class_Vector3>` **get_collision_point** **(** **)** |const|

返回射线与最近的物体相交的碰撞点。

\ **注意：**\ 这个点是在\ **全局**\ 坐标系中。

----

.. _class_RayCast_method_is_colliding:

- :ref:`bool<class_bool>` **is_colliding** **(** **)** |const|

返回是否有任何对象与射线的向量相交（考虑向量长度）。

----

.. _class_RayCast_method_remove_exception:

- void **remove_exception** **(** :ref:`Object<class_Object>` node **)**

移除碰撞例外，这样射线就会报告与指定节点的碰撞。

----

.. _class_RayCast_method_remove_exception_rid:

- void **remove_exception_rid** **(** :ref:`RID<class_RID>` rid **)**

移除碰撞例外，这样射线就会报告与指定的 :ref:`RID<class_RID>` 的碰撞。

----

.. _class_RayCast_method_set_collision_mask_bit:

- void **set_collision_mask_bit** **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)**

将传递的位索引设置为传递的\ ``值``\ 。

\ **注意：** 位索引的范围是0-19。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
