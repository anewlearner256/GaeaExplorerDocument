:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the AESContext.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AESContext:

AESContext
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

低级AES加密功能接口。

描述
----

此类提供了对原始数据的 AES 加密/解密的访问。同时支持 AES-ECB 和 AES-CBC 模式。

::

    extends Node
    
    var aes = AESContext.new()
    
    func _ready():
        var key = "My secret key!!!" # Key must be either 16 or 32 bytes.
        var data = "My secret text!!" # Data size must be multiple of 16 bytes, apply padding if needed.
        # ECB 加密
        aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8())
        var encrypted = aes.update(data.to_utf8())
        aes.finish()
        # ECB 解密
        aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8())
        var decrypted = aes.update(encrypted)
        aes.finish()
        # ECB 校验
        assert(decrypted == data.to_utf8())
    
        var iv = "My secret iv!!!!" # IV must be of exactly 16 bytes.
        # CBC 加密
        aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8(), iv.to_utf8())
        encrypted = aes.update(data.to_utf8())
        aes.finish()
        # CBC 解密
        aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8(), iv.to_utf8())
        decrypted = aes.update(encrypted)
        aes.finish()
        # CBC 校验
        assert(decrypted == data.to_utf8())

方法
----

+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`finish<class_AESContext_method_finish>` **(** **)**                                                                                                                                                     |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`get_iv_state<class_AESContext_method_get_iv_state>` **(** **)**                                                                                                                                         |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`start<class_AESContext_method_start>` **(** :ref:`Mode<enum_AESContext_Mode>` mode, :ref:`PoolByteArray<class_PoolByteArray>` key, :ref:`PoolByteArray<class_PoolByteArray>` iv=PoolByteArray(  ) **)** |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`update<class_AESContext_method_update>` **(** :ref:`PoolByteArray<class_PoolByteArray>` src **)**                                                                                                       |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_AESContext_Mode:

.. _class_AESContext_constant_MODE_ECB_ENCRYPT:

.. _class_AESContext_constant_MODE_ECB_DECRYPT:

.. _class_AESContext_constant_MODE_CBC_ENCRYPT:

.. _class_AESContext_constant_MODE_CBC_DECRYPT:

.. _class_AESContext_constant_MODE_MAX:

enum **Mode**:

- **MODE_ECB_ENCRYPT** = **0** --- AES电子密码簿加密模式。

- **MODE_ECB_DECRYPT** = **1** --- AES电子密码簿解密模式。

- **MODE_CBC_ENCRYPT** = **2** --- AES密码封锁器链式加密模式。

- **MODE_CBC_DECRYPT** = **3** --- AES密码封锁器链式解密模式。

- **MODE_MAX** = **4** --- 模式列举的最大值。

方法说明
--------

.. _class_AESContext_method_finish:

- void **finish** **(** **)**

关闭此AES上下文，以便可以再次启动它。 参阅\ :ref:`start<class_AESContext_method_start>`\ 。

----

.. _class_AESContext_method_get_iv_state:

- :ref:`PoolByteArray<class_PoolByteArray>` **get_iv_state** **(** **)**

获取此上下文的当前IV状态（调用\ :ref:`update<class_AESContext_method_update>`\ 时会更新IV）。通常不需要此函数。

\ **注意：**\ 仅当上下文以\ :ref:`MODE_CBC_ENCRYPT<class_AESContext_constant_MODE_CBC_ENCRYPT>`\ 或\ :ref:`MODE_CBC_DECRYPT<class_AESContext_constant_MODE_CBC_DECRYPT>`\ 开头时，此函数才有意义。

----

.. _class_AESContext_method_start:

- :ref:`Error<enum_@GlobalScope_Error>` **start** **(** :ref:`Mode<enum_AESContext_Mode>` mode, :ref:`PoolByteArray<class_PoolByteArray>` key, :ref:`PoolByteArray<class_PoolByteArray>` iv=PoolByteArray(  ) **)**

以给定的\ ``模式``\ 启动AES上下文。必须始终提供16或32字节的\ ``key``\ ，而仅当\ ``mode``\ 为以下两种情况时才需要正好为16字节的\ ``iv``\ （初始化向量） :ref:`MODE_CBC_ENCRYPT<class_AESContext_constant_MODE_CBC_ENCRYPT>`\ 或\ :ref:`MODE_CBC_DECRYPT<class_AESContext_constant_MODE_CBC_DECRYPT>`\ 。

----

.. _class_AESContext_method_update:

- :ref:`PoolByteArray<class_PoolByteArray>` **update** **(** :ref:`PoolByteArray<class_PoolByteArray>` src **)**

运行此 AES 上下文所需的操作。将返回包含加密（或解密）给定 ``src`` 结果的\ :ref:`PoolByteArray<class_PoolByteArray>` 。有关操作模式，请参阅\ :ref:`start<class_AESContext_method_start>`\ 。

\ **注意：**\ ``src``\ 的大小必须是16倍的倍数。如果需要，应用一些填充。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
