:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the MultiMesh.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MultiMesh:

MultiMesh
=========

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

提供高性能的网格实例化。

描述
----

MultiMesh提供了低级别的网格实例化功能。绘制数以千计的\ :ref:`MeshInstance<class_MeshInstance>`\ 节点可能会很慢，因为每个对象都要提交给GPU然后单独绘制。

MultiMesh要快得多，因为它可以通过一次绘制调用来绘制成千上万的实例，从而减少API的开销。

缺点是，如果实例之间的距离太远，性能可能会降低，因为每一个实例总是会被渲染（它们在空间上被索引为整个对象）。

由于实例可能具有任何行为，用于可见性的AABB必须由用户提供。

教程
----

- :doc:`../tutorials/performance/vertex_animation/animating_thousands_of_fish`

- :doc:`../tutorials/performance/using_multimesh`

属性
----

+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`ColorFormat<enum_MultiMesh_ColorFormat>`           | :ref:`color_format<class_MultiMesh_property_color_format>`                     | ``0``  |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`CustomDataFormat<enum_MultiMesh_CustomDataFormat>` | :ref:`custom_data_format<class_MultiMesh_property_custom_data_format>`         | ``0``  |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`int<class_int>`                                    | :ref:`instance_count<class_MultiMesh_property_instance_count>`                 | ``0``  |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`Mesh<class_Mesh>`                                  | :ref:`mesh<class_MultiMesh_property_mesh>`                                     |        |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`TransformFormat<enum_MultiMesh_TransformFormat>`   | :ref:`transform_format<class_MultiMesh_property_transform_format>`             | ``0``  |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+
| :ref:`int<class_int>`                                    | :ref:`visible_instance_count<class_MultiMesh_property_visible_instance_count>` | ``-1`` |
+----------------------------------------------------------+--------------------------------------------------------------------------------+--------+

方法
----

+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`               | :ref:`get_aabb<class_MultiMesh_method_get_aabb>` **(** **)** |const|                                                                                                           |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`             | :ref:`get_instance_color<class_MultiMesh_method_get_instance_color>` **(** :ref:`int<class_int>` instance **)** |const|                                                        |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`             | :ref:`get_instance_custom_data<class_MultiMesh_method_get_instance_custom_data>` **(** :ref:`int<class_int>` instance **)** |const|                                            |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>`     | :ref:`get_instance_transform<class_MultiMesh_method_get_instance_transform>` **(** :ref:`int<class_int>` instance **)** |const|                                                |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`get_instance_transform_2d<class_MultiMesh_method_get_instance_transform_2d>` **(** :ref:`int<class_int>` instance **)** |const|                                          |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_as_bulk_array<class_MultiMesh_method_set_as_bulk_array>` **(** :ref:`PoolRealArray<class_PoolRealArray>` array **)**                                                 |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_instance_color<class_MultiMesh_method_set_instance_color>` **(** :ref:`int<class_int>` instance, :ref:`Color<class_Color>` color **)**                               |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_instance_custom_data<class_MultiMesh_method_set_instance_custom_data>` **(** :ref:`int<class_int>` instance, :ref:`Color<class_Color>` custom_data **)**             |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_instance_transform<class_MultiMesh_method_set_instance_transform>` **(** :ref:`int<class_int>` instance, :ref:`Transform<class_Transform>` transform **)**           |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_instance_transform_2d<class_MultiMesh_method_set_instance_transform_2d>` **(** :ref:`int<class_int>` instance, :ref:`Transform2D<class_Transform2D>` transform **)** |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_MultiMesh_TransformFormat:

.. _class_MultiMesh_constant_TRANSFORM_2D:

.. _class_MultiMesh_constant_TRANSFORM_3D:

enum **TransformFormat**:

- **TRANSFORM_2D** = **0** --- 使用 2D 变换时使用此选项。

- **TRANSFORM_3D** = **1** --- 使用 3D 变换时使用此选项。

----

.. _enum_MultiMesh_ColorFormat:

.. _class_MultiMesh_constant_COLOR_NONE:

.. _class_MultiMesh_constant_COLOR_8BIT:

.. _class_MultiMesh_constant_COLOR_FLOAT:

enum **ColorFormat**:

- **COLOR_NONE** = **0** --- 当您不使用每个实例的 :ref:`Color<class_Color>` 时使用。

- **COLOR_8BIT** = **1** --- 传递给着色器时将 :ref:`Color<class_Color>` 数据压缩为 8 位。这使用更少的内存并且可以更快，但 :ref:`Color<class_Color>` 会失去精度。

- **COLOR_FLOAT** = **2** --- 传递给 :ref:`set_instance_color<class_MultiMesh_method_set_instance_color>` 的 :ref:`Color<class_Color>` 将使用 4 个浮点数。使用它以获得最高精度 :ref:`Color<class_Color>`\ 。

----

.. _enum_MultiMesh_CustomDataFormat:

.. _class_MultiMesh_constant_CUSTOM_DATA_NONE:

.. _class_MultiMesh_constant_CUSTOM_DATA_8BIT:

.. _class_MultiMesh_constant_CUSTOM_DATA_FLOAT:

enum **CustomDataFormat**:

- **CUSTOM_DATA_NONE** = **0** --- 当您不使用每个实例的自定义数据时使用。

- **CUSTOM_DATA_8BIT** = **1** --- 传递给着色器时将 custom_data 压缩为 8 位。这使用更少的内存并且可以更快，但会失去精度和范围。 8 位浮点数只能表示 0 到 1 之间的值，超出该范围的数字将被限制。

- **CUSTOM_DATA_FLOAT** = **2** --- 传递给 :ref:`set_instance_custom_data<class_MultiMesh_method_set_instance_custom_data>` 的 :ref:`Color<class_Color>` 将使用 4 个浮点数。使用它以获得最高精度。

属性说明
--------

.. _class_MultiMesh_property_color_format:

- :ref:`ColorFormat<enum_MultiMesh_ColorFormat>` **color_format**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_color_format(value) |
+-----------+-------------------------+
| *Getter*  | get_color_format()      |
+-----------+-------------------------+

传递给着色器的颜色数组中的颜色格式。

----

.. _class_MultiMesh_property_custom_data_format:

- :ref:`CustomDataFormat<enum_MultiMesh_CustomDataFormat>` **custom_data_format**

+-----------+-------------------------------+
| *Default* | ``0``                         |
+-----------+-------------------------------+
| *Setter*  | set_custom_data_format(value) |
+-----------+-------------------------------+
| *Getter*  | get_custom_data_format()      |
+-----------+-------------------------------+

传递给着色器的自定义数据数组中的自定义数据格式。

----

.. _class_MultiMesh_property_instance_count:

- :ref:`int<class_int>` **instance_count**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_instance_count(value) |
+-----------+---------------------------+
| *Getter*  | get_instance_count()      |
+-----------+---------------------------+

将被绘制的实例的数量。这将清除并（重新）调整缓冲区的大小。默认情况下，所有的实例都会被画出来，但你可以用\ :ref:`visible_instance_count<class_MultiMesh_property_visible_instance_count>`\ 来限制它。

----

.. _class_MultiMesh_property_mesh:

- :ref:`Mesh<class_Mesh>` **mesh**

+----------+-----------------+
| *Setter* | set_mesh(value) |
+----------+-----------------+
| *Getter* | get_mesh()      |
+----------+-----------------+

将要绘制的网格。

----

.. _class_MultiMesh_property_transform_format:

- :ref:`TransformFormat<enum_MultiMesh_TransformFormat>` **transform_format**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_transform_format(value) |
+-----------+-----------------------------+
| *Getter*  | get_transform_format()      |
+-----------+-----------------------------+

用于变换网格的变换格式，可以是2D或3D。

----

.. _class_MultiMesh_property_visible_instance_count:

- :ref:`int<class_int>` **visible_instance_count**

+-----------+-----------------------------------+
| *Default* | ``-1``                            |
+-----------+-----------------------------------+
| *Setter*  | set_visible_instance_count(value) |
+-----------+-----------------------------------+
| *Getter*  | get_visible_instance_count()      |
+-----------+-----------------------------------+

限制绘制的实例数量，-1会绘制所有的实例。改变这一点并不改变缓冲区的大小。

方法说明
--------

.. _class_MultiMesh_method_get_aabb:

- :ref:`AABB<class_AABB>` **get_aabb** **(** **)** |const|

返回局部空间中可见性轴对齐的包围框。请参阅 :ref:`VisualInstance.get_transformed_aabb<class_VisualInstance_method_get_transformed_aabb>`\ 。

----

.. _class_MultiMesh_method_get_instance_color:

- :ref:`Color<class_Color>` **get_instance_color** **(** :ref:`int<class_int>` instance **)** |const|

获取一个特定实例的颜色。

----

.. _class_MultiMesh_method_get_instance_custom_data:

- :ref:`Color<class_Color>` **get_instance_custom_data** **(** :ref:`int<class_int>` instance **)** |const|

返回已经为特定实例设置的自定义数据。

----

.. _class_MultiMesh_method_get_instance_transform:

- :ref:`Transform<class_Transform>` **get_instance_transform** **(** :ref:`int<class_int>` instance **)** |const|

返回一个特定实例的\ :ref:`Transform<class_Transform>`\ 。

----

.. _class_MultiMesh_method_get_instance_transform_2d:

- :ref:`Transform2D<class_Transform2D>` **get_instance_transform_2d** **(** :ref:`int<class_int>` instance **)** |const|

返回特定实例的 :ref:`Transform2D<class_Transform2D>`\ 。

----

.. _class_MultiMesh_method_set_as_bulk_array:

- void **set_as_bulk_array** **(** :ref:`PoolRealArray<class_PoolRealArray>` array **)**

一次性设置所有与实例相关的数据。这在从磁盘加载数据或从GDNative准备数据时特别有用。

所有的数据都被打包在一个大的浮点数数组中。数组可能看起来像这样。实例1的变换，实例1的颜色数据，实例1的自定义数据，实例2的变换，实例2的颜色数据，等等。

\ :ref:`Transform<class_Transform>`\ 存储为12浮点数，\ :ref:`Transform2D<class_Transform2D>`\ 存储为8浮点数，\ ``COLOR_8BIT`` / ``CUSTOM_DATA_8BIT``\ 存储为1浮点数（原为4字节），\ ``COLOR_FLOAT`` / ``CUSTOM_DATA_FLOAT`` 存储为4浮点数。

----

.. _class_MultiMesh_method_set_instance_color:

- void **set_instance_color** **(** :ref:`int<class_int>` instance, :ref:`Color<class_Color>` color **)**

通过\ *乘以*\ 网格的现有顶点颜色来设置特定实例的颜色。

为了使颜色生效，请确保\ ``MultiMesh``\ 上的\ :ref:`color_format<class_MultiMesh_property_color_format>`\ 不是\ ``null``\ ，并且\ :ref:`SpatialMaterial.vertex_color_use_as_albedo<class_SpatialMaterial_property_vertex_color_use_as_albedo>`\ 上的材质是\ ``true``\ 。

----

.. _class_MultiMesh_method_set_instance_custom_data:

- void **set_instance_custom_data** **(** :ref:`int<class_int>` instance, :ref:`Color<class_Color>` custom_data **)**

为特定的实例设置自定义数据。虽然使用了\ :ref:`Color<class_Color>`\ ，但它只是一个容纳4个浮点数的容器。数字的格式可以根据使用的\ :ref:`CustomDataFormat<enum_MultiMesh_CustomDataFormat>`\ 来改变。

----

.. _class_MultiMesh_method_set_instance_transform:

- void **set_instance_transform** **(** :ref:`int<class_int>` instance, :ref:`Transform<class_Transform>` transform **)**

为特定实例设置 :ref:`Transform<class_Transform>`\ 。

----

.. _class_MultiMesh_method_set_instance_transform_2d:

- void **set_instance_transform_2d** **(** :ref:`int<class_int>` instance, :ref:`Transform2D<class_Transform2D>` transform **)**

为特定实例设置 :ref:`Transform2D<class_Transform2D>`\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
