:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Camera.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Camera:

Camera
======

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ARVRCamera<class_ARVRCamera>`, :ref:`ClippedCamera<class_ClippedCamera>`, :ref:`InterpolatedCamera<class_InterpolatedCamera>`

相机节点，会从某个角度进行显示。

描述
----

相机是一个特殊节点，用于显示从其当前位置可见的内容。相机在最近的 :ref:`Viewport<class_Viewport>` 节点中注册自己（当树上行）。每个视窗只能激活一个相机。如果在树上没有可用的视窗，相机将在全局视窗中注册。换句话说，相机只是为 :ref:`Viewport<class_Viewport>` 提供3D显示能力，如果没有，则无法显示在该 :ref:`Viewport<class_Viewport>` 或更高视窗中注册的场景。

教程
----

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

属性
----

+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                               | :ref:`cull_mask<class_Camera_property_cull_mask>`               | ``1048575``         |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                             | :ref:`current<class_Camera_property_current>`                   | ``false``           |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`DopplerTracking<enum_Camera_DopplerTracking>` | :ref:`doppler_tracking<class_Camera_property_doppler_tracking>` | ``0``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Environment<class_Environment>`               | :ref:`environment<class_Camera_property_environment>`           |                     |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`far<class_Camera_property_far>`                           | ``100.0``           |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`fov<class_Camera_property_fov>`                           | ``70.0``            |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                       | :ref:`frustum_offset<class_Camera_property_frustum_offset>`     | ``Vector2( 0, 0 )`` |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`h_offset<class_Camera_property_h_offset>`                 | ``0.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`KeepAspect<enum_Camera_KeepAspect>`           | :ref:`keep_aspect<class_Camera_property_keep_aspect>`           | ``1``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`near<class_Camera_property_near>`                         | ``0.05``            |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Projection<enum_Camera_Projection>`           | :ref:`projection<class_Camera_property_projection>`             | ``0``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`size<class_Camera_property_size>`                         | ``1.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`v_offset<class_Camera_property_v_offset>`                 | ``0.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+

方法
----

+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`clear_current<class_Camera_method_clear_current>` **(** :ref:`bool<class_bool>` enable_next=true **)**                                                                                            |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_RID>`             | :ref:`get_camera_rid<class_Camera_method_get_camera_rid>` **(** **)** |const|                                                                                                                           |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`get_camera_transform<class_Camera_method_get_camera_transform>` **(** **)** |const|                                                                                                               |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`get_cull_mask_bit<class_Camera_method_get_cull_mask_bit>` **(** :ref:`int<class_int>` layer **)** |const|                                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`get_frustum<class_Camera_method_get_frustum>` **(** **)** |const|                                                                                                                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_position_behind<class_Camera_method_is_position_behind>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`make_current<class_Camera_method_make_current>` **(** **)**                                                                                                                                       |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_local_ray_normal<class_Camera_method_project_local_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                            |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_position<class_Camera_method_project_position>` **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_ray_normal<class_Camera_method_project_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_ray_origin<class_Camera_method_project_ray_origin>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_cull_mask_bit<class_Camera_method_set_cull_mask_bit>` **(** :ref:`int<class_int>` layer, :ref:`bool<class_bool>` enable **)**                                                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_frustum<class_Camera_method_set_frustum>` **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)** |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_orthogonal<class_Camera_method_set_orthogonal>` **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_perspective<class_Camera_method_set_perspective>` **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`     | :ref:`unproject_position<class_Camera_method_unproject_position>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Camera_Projection:

.. _class_Camera_constant_PROJECTION_PERSPECTIVE:

.. _class_Camera_constant_PROJECTION_ORTHOGONAL:

.. _class_Camera_constant_PROJECTION_FRUSTUM:

enum **Projection**:

- **PROJECTION_PERSPECTIVE** = **0** --- 透视投影。物体距离相机屏幕越远显示就越小。

- **PROJECTION_ORTHOGONAL** = **1** --- 正交投影，又称正交投影。物体无论距离多远，在屏幕上都保持相同的大小。

- **PROJECTION_FRUSTUM** = **2** --- Frustum投影。通过该模式可以调整\ :ref:`frustum_offset<class_Camera_property_frustum_offset>`\ 来创建 "tilted frustum "效果。

----

.. _enum_Camera_KeepAspect:

.. _class_Camera_constant_KEEP_WIDTH:

.. _class_Camera_constant_KEEP_HEIGHT:

enum **KeepAspect**:

- **KEEP_WIDTH** = **0** --- 保留水平长宽比，也称为Vert-缩放。这通常是在纵向模式下运行的项目的最佳选择，因为较高的纵横比将从更宽的垂直视场中受益。

- **KEEP_HEIGHT** = **1** --- 保留垂直长宽比，也称为 Hor+ 缩放。这通常是在横向模式下运行的项目的最佳选择，因为较宽的纵横比会自动从较宽的水平视场中受益。

----

.. _enum_Camera_DopplerTracking:

.. _class_Camera_constant_DOPPLER_TRACKING_DISABLED:

.. _class_Camera_constant_DOPPLER_TRACKING_IDLE_STEP:

.. _class_Camera_constant_DOPPLER_TRACKING_PHYSICS_STEP:

enum **DopplerTracking**:

- **DOPPLER_TRACKING_DISABLED** = **0** --- 禁用\ `多普勒效应 <https://en.wikipedia.org/wiki/Doppler_effect>`__\ 模拟（默认）。

- **DOPPLER_TRACKING_IDLE_STEP** = **1** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_process``. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's :ref:`AudioStreamPlayer3D.pitch_scale<class_AudioStreamPlayer3D_property_pitch_scale>`).

- **DOPPLER_TRACKING_PHYSICS_STEP** = **2** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_physics_process``. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's :ref:`AudioStreamPlayer3D.pitch_scale<class_AudioStreamPlayer3D_property_pitch_scale>`).

属性说明
--------

.. _class_Camera_property_cull_mask:

- :ref:`int<class_int>` **cull_mask**

+-----------+----------------------+
| *Default* | ``1048575``          |
+-----------+----------------------+
| *Setter*  | set_cull_mask(value) |
+-----------+----------------------+
| *Getter*  | get_cull_mask()      |
+-----------+----------------------+

描述此相机渲染哪些 3D 渲染层的剔除掩码。

----

.. _class_Camera_property_current:

- :ref:`bool<class_bool>` **current**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_current(value) |
+-----------+--------------------+
| *Getter*  | is_current()       |
+-----------+--------------------+

如果\ ``true``\ ，则说明祖级的\ :ref:`Viewport<class_Viewport>`\ 当前正在使用这个摄像头。

----

.. _class_Camera_property_doppler_tracking:

- :ref:`DopplerTracking<enum_Camera_DopplerTracking>` **doppler_tracking**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_doppler_tracking(value) |
+-----------+-----------------------------+
| *Getter*  | get_doppler_tracking()      |
+-----------+-----------------------------+

如果不是\ :ref:`DOPPLER_TRACKING_DISABLED<class_Camera_constant_DOPPLER_TRACKING_DISABLED>`\ ，此相机将模拟\ `多普勒效果 <https://en.wikipedia.org/wiki/Doppler_effect>`__\ 的对象在特定\ ``_process``\ 方法中的变化。多普勒效果只对\ :ref:`AudioStreamPlayer3D.doppler_tracking<class_AudioStreamPlayer3D_property_doppler_tracking>`\ 设置为\ :ref:`AudioStreamPlayer3D.DOPPLER_TRACKING_DISABLED<class_AudioStreamPlayer3D_constant_DOPPLER_TRACKING_DISABLED>`\ 以外的值的\ :ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>`\ 节点进行模拟。

\ **注意：**\ 要在编辑器中切换多普勒效果预览，使用三维视窗左上角的透视菜单，并切换为\ **启用多普勒**\ 。

----

.. _class_Camera_property_environment:

- :ref:`Environment<class_Environment>` **environment**

+----------+------------------------+
| *Setter* | set_environment(value) |
+----------+------------------------+
| *Getter* | get_environment()      |
+----------+------------------------+

此相机要使用的\ :ref:`Environment<class_Environment>`\ 。

----

.. _class_Camera_property_far:

- :ref:`float<class_float>` **far**

+-----------+-----------------+
| *Default* | ``100.0``       |
+-----------+-----------------+
| *Setter*  | set_zfar(value) |
+-----------+-----------------+
| *Getter*  | get_zfar()      |
+-----------+-----------------+

该相机相对于其本地Z轴的远裁边界的距离。

----

.. _class_Camera_property_fov:

- :ref:`float<class_float>` **fov**

+-----------+----------------+
| *Default* | ``70.0``       |
+-----------+----------------+
| *Setter*  | set_fov(value) |
+-----------+----------------+
| *Getter*  | get_fov()      |
+-----------+----------------+

相机的视野角度，以度为单位。仅适用于透视模式。由于 :ref:`keep_aspect<class_Camera_property_keep_aspect>` 锁定一个轴，因此 ``fov`` 设置另一个轴的视角。

作为参考，默认的垂直视野值 (``70.0``) 等效于以下水平 FOV：

- 在 4:3 视窗中约86.07 度

- 在 16:10 视窗中约 96.50 度

- 在 16:9 视窗中约102.45 度

- 在 21:9 视窗中约117.06 度

----

.. _class_Camera_property_frustum_offset:

- :ref:`Vector2<class_Vector2>` **frustum_offset**

+-----------+---------------------------+
| *Default* | ``Vector2( 0, 0 )``       |
+-----------+---------------------------+
| *Setter*  | set_frustum_offset(value) |
+-----------+---------------------------+
| *Getter*  | get_frustum_offset()      |
+-----------+---------------------------+

相机的机身偏移。可以更改默认值，以创建 "倾斜frustum "效果，如\ `Y-shearing <https://zdoom.org/wiki/Y-shearing>`__\ 。

----

.. _class_Camera_property_h_offset:

- :ref:`float<class_float>` **h_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_h_offset(value) |
+-----------+---------------------+
| *Getter*  | get_h_offset()      |
+-----------+---------------------+

相机视窗的水平（X）偏移量。

----

.. _class_Camera_property_keep_aspect:

- :ref:`KeepAspect<enum_Camera_KeepAspect>` **keep_aspect**

+-----------+-----------------------------+
| *Default* | ``1``                       |
+-----------+-----------------------------+
| *Setter*  | set_keep_aspect_mode(value) |
+-----------+-----------------------------+
| *Getter*  | get_keep_aspect_mode()      |
+-----------+-----------------------------+

在\ :ref:`fov<class_Camera_property_fov>`/:ref:`size<class_Camera_property_size>`\ 调整时要锁定的轴。可以是\ :ref:`KEEP_WIDTH<class_Camera_constant_KEEP_WIDTH>`\ 或\ :ref:`KEEP_HEIGHT<class_Camera_constant_KEEP_HEIGHT>`\ 。

----

.. _class_Camera_property_near:

- :ref:`float<class_float>` **near**

+-----------+------------------+
| *Default* | ``0.05``         |
+-----------+------------------+
| *Setter*  | set_znear(value) |
+-----------+------------------+
| *Getter*  | get_znear()      |
+-----------+------------------+

该相机相对于其本地Z轴到近裁边界的距离。

----

.. _class_Camera_property_projection:

- :ref:`Projection<enum_Camera_Projection>` **projection**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_projection(value) |
+-----------+-----------------------+
| *Getter*  | get_projection()      |
+-----------+-----------------------+

相机的投影模式。在\ :ref:`PROJECTION_PERSPECTIVE<class_Camera_constant_PROJECTION_PERSPECTIVE>`\ 模式下，物体与相机局部空间的Z距离会影响其感知的大小。

----

.. _class_Camera_property_size:

- :ref:`float<class_float>` **size**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_size(value) |
+-----------+-----------------+
| *Getter*  | get_size()      |
+-----------+-----------------+

相机的尺寸，以1/2的宽度或高度测量。仅适用于正交模式。由于\ :ref:`keep_aspect<class_Camera_property_keep_aspect>`\ 锁定在轴上，因此\ ``size``\ 设置其他轴的尺寸长度。

----

.. _class_Camera_property_v_offset:

- :ref:`float<class_float>` **v_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_v_offset(value) |
+-----------+---------------------+
| *Getter*  | get_v_offset()      |
+-----------+---------------------+

相机视窗的垂直（Y）偏移量。

方法说明
--------

.. _class_Camera_method_clear_current:

- void **clear_current** **(** :ref:`bool<class_bool>` enable_next=true **)**

如果这是当前相机，则将其从当前相机中移除。如果\ ``enable_next``\ 是\ ``true``\ ，请求使下一个相机成为当前相机（如果有）。

----

.. _class_Camera_method_get_camera_rid:

- :ref:`RID<class_RID>` **get_camera_rid** **(** **)** |const|

从 :ref:`VisualServer<class_VisualServer>` 返回相机的 RID。

----

.. _class_Camera_method_get_camera_transform:

- :ref:`Transform<class_Transform>` **get_camera_transform** **(** **)** |const|

返回相机的变换加上垂直\ :ref:`v_offset<class_Camera_property_v_offset>`\ 和水平\ :ref:`h_offset<class_Camera_property_h_offset>`\ 的偏移量；以及由子类相机如\ :ref:`ClippedCamera<class_ClippedCamera>`\ 、\ :ref:`InterpolatedCamera<class_InterpolatedCamera>`\ 和\ :ref:`ARVRCamera<class_ARVRCamera>`\ 对相机的位置和方向做出的任何其他调整。

----

.. _class_Camera_method_get_cull_mask_bit:

- :ref:`bool<class_bool>` **get_cull_mask_bit** **(** :ref:`int<class_int>` layer **)** |const|

如果\ :ref:`cull_mask<class_Camera_property_cull_mask>`\ 中给定的\ ``layer``\ 被启用，返回\ ``true``\ ，否则返回\ ``false``\ 。

----

.. _class_Camera_method_get_frustum:

- :ref:`Array<class_Array>` **get_frustum** **(** **)** |const|

以世界空间单位将相机的视锥平面作为 :ref:`Plane<class_Plane>` 数组按以下顺序返回：near、far、left、top、right、bottom。不要与 :ref:`frustum_offset<class_Camera_property_frustum_offset>` 混淆。

----

.. _class_Camera_method_is_position_behind:

- :ref:`bool<class_bool>` **is_position_behind** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

如果给定的位置在相机后面，返回\ ``true``\ 。

\ **注意：** 返回\ ``false``\ 的位置可能仍然在相机的视野之外。

----

.. _class_Camera_method_make_current:

- void **make_current** **(** **)**

使此相机成为\ :ref:`Viewport<class_Viewport>`\ 的当前相机（见类的说明）。如果相机节点在场景树之外，一旦添加，它将尝试成为当前相机。

----

.. _class_Camera_method_project_local_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_local_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

返回从屏幕点位置沿相机方向的法向量。正交相机会被归一化。透视相机考虑到透视、屏幕宽度/高度等因素。

----

.. _class_Camera_method_project_position:

- :ref:`Vector3<class_Vector3>` **project_position** **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|

返回世界空间中的 3D 点，该点映射到平面上 :ref:`Viewport<class_Viewport>` 矩形中的给定 2D 坐标，该平面距离相机的场景为给定的 ``z_depth`` 距离。

----

.. _class_Camera_method_project_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

返回世界空间中的法线向量，即相机投影在\ :ref:`Viewport<class_Viewport>`\ 矩形上投影一个点的结果。这对于以原点、法线，投射光线形式用于对象相交或拾取很有用。

----

.. _class_Camera_method_project_ray_origin:

- :ref:`Vector3<class_Vector3>` **project_ray_origin** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

返回世界空间中的 3D 坐标，即相机投影在 :ref:`Viewport<class_Viewport>` 矩形上投影一个点的结果。这对于以原点、法线，投射光线形式用于对象相交或拾取很有用。

----

.. _class_Camera_method_set_cull_mask_bit:

- void **set_cull_mask_bit** **(** :ref:`int<class_int>` layer, :ref:`bool<class_bool>` enable **)**

启用或禁用\ :ref:`cull_mask<class_Camera_property_cull_mask>`\ 中给定的\ ``layer``\ 。

----

.. _class_Camera_method_set_frustum:

- void **set_frustum** **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

通过指定大小 ``size`` 、偏移量 ``offset`` 以及以世界空间为单位的 ``z_near`` 和 ``z_far`` 裁剪平面，将相机投影设置为视锥模式（请参阅 :ref:`PROJECTION_FRUSTUM<class_Camera_constant_PROJECTION_FRUSTUM>`\ ）。

----

.. _class_Camera_method_set_orthogonal:

- void **set_orthogonal** **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

通过在世界空间单位中指定 ``size`` 和 ``z_near`` 和 ``z_far`` 剪裁平面，将相机投影设置为正交模式，请参阅 :ref:`PROJECTION_ORTHOGONAL<class_Camera_constant_PROJECTION_ORTHOGONAL>`\ 。 （提示：2D 游戏经常使用这种投影，以像素为单位指定值。）

----

.. _class_Camera_method_set_perspective:

- void **set_perspective** **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

将摄像机的投影设置为透视模式，参阅\ :ref:`PROJECTION_PERSPECTIVE<class_Camera_constant_PROJECTION_PERSPECTIVE>`\ ），指定\ ``fov`` 视野角度，单位度，以及世界空间单位的\ ``z_near``\ 和\ ``z_far``\ 裁剪平面。

----

.. _class_Camera_method_unproject_position:

- :ref:`Vector2<class_Vector2>` **unproject_position** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

返回\ :ref:`Viewport<class_Viewport>`\ 矩形中的2D坐标，该坐标映射到世界空间中给定的3D点。

\ **注意：**\ 当使用它来定位3D视窗上的GUI元素时，如果3D点在相机后面，请使用\ :ref:`is_position_behind<class_Camera_method_is_position_behind>`\ 来防止它们显示。

::

    # 这个代码块是继承自Spatial的脚本的一部分。
    # `control`是对继承自Control的节点的引用。
    control.visible = not get_viewport().get_camera().is_position_behind(global_transform.origin)
    control.rect_position = get_viewport().get_camera().unproject_position(global_transform.origin)

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
