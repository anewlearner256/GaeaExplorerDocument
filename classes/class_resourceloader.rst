:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the ResourceLoader.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ResourceLoader:

ResourceLoader
==============

**Inherits:** :ref:`Object<class_Object>`

用于加载资源文件的单例。

描述
----

用于从文件系统加载资源文件的单例。

它使用在引擎中注册的许多\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ 类（无论是内置的还是来自插件的）来将文件加载到内存中，并将它们转换为引擎可以使用的格式。

教程
----

- `OS Test Demo <https://godotengine.org/asset-library/asset/677>`__

方法
----

+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                           | :ref:`exists<class_ResourceLoader_method_exists>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="" **)**                                     |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>`                     | :ref:`get_dependencies<class_ResourceLoader_method_get_dependencies>` **(** :ref:`String<class_String>` path **)**                                                           |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>`                     | :ref:`get_recognized_extensions_for_type<class_ResourceLoader_method_get_recognized_extensions_for_type>` **(** :ref:`String<class_String>` type **)**                       |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                           | :ref:`has<class_ResourceLoader_method_has>` **(** :ref:`String<class_String>` path **)**                                                                                     |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                           | :ref:`has_cached<class_ResourceLoader_method_has_cached>` **(** :ref:`String<class_String>` path **)**                                                                       |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_Resource>`                                   | :ref:`load<class_ResourceLoader_method_load>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="", :ref:`bool<class_bool>` no_cache=false **)** |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ResourceInteractiveLoader<class_ResourceInteractiveLoader>` | :ref:`load_interactive<class_ResourceLoader_method_load_interactive>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="" **)**                 |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                              | :ref:`set_abort_on_missing_resources<class_ResourceLoader_method_set_abort_on_missing_resources>` **(** :ref:`bool<class_bool>` abort **)**                                  |
+-------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_ResourceLoader_method_exists:

- :ref:`bool<class_bool>` **exists** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="" **)**

返回给定的\ ``path``\ 是否存在已识别的资源。

一个可选的\ ``type_hint``\ 可以用来进一步指定\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ 应该处理的\ :ref:`Resource<class_Resource>`\ 类型。

----

.. _class_ResourceLoader_method_get_dependencies:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_dependencies** **(** :ref:`String<class_String>` path **)**

返回给定\ ``path``\ 处资源的依赖关系。

----

.. _class_ResourceLoader_method_get_recognized_extensions_for_type:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_recognized_extensions_for_type** **(** :ref:`String<class_String>` type **)**

返回资源类型的已识别扩展名列表。

----

.. _class_ResourceLoader_method_has:

- :ref:`bool<class_bool>` **has** **(** :ref:`String<class_String>` path **)**

*废弃的方法。*\ 使用\ :ref:`has_cached<class_ResourceLoader_method_has_cached>`\ 或\ :ref:`exists<class_ResourceLoader_method_exists>`\ 代替。

----

.. _class_ResourceLoader_method_has_cached:

- :ref:`bool<class_bool>` **has_cached** **(** :ref:`String<class_String>` path **)**

返回给定路径\ ``path``\ 的缓存资源是否可用。

一旦资源被引擎加载，它就会被缓存在内存中，以便更快地访问，未来对\ :ref:`load<class_ResourceLoader_method_load>`\ 或\ :ref:`load_interactive<class_ResourceLoader_method_load_interactive>`\ 方法的调用将使用缓存的版本。缓存的资源可以通过对同一路径的新资源使用\ :ref:`Resource.take_over_path<class_Resource_method_take_over_path>`\ 来覆盖。

----

.. _class_ResourceLoader_method_load:

- :ref:`Resource<class_Resource>` **load** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="", :ref:`bool<class_bool>` no_cache=false **)**

在给定的路径\ ``path``\ 上加载一个资源，缓存结果以便进一步访问。

依次查询注册的\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ ，找到第一个可以处理该文件扩展名的加载器，然后尝试加载。如果加载失败，其余的ResourceFormatLoaders也会被尝试。

一个可选的\ ``type_hint``\ 类型提示可以用来进一步指定\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ 应处理的\ :ref:`Resource<class_Resource>`\ 资源类型。任何继承自\ :ref:`Resource<class_Resource>`\ 的东西都可以被用作类型提示，例如图像\ :ref:`Image<class_Image>`\ 。

如果\ ``no_cache``\ 是\ ``true``\ ，资源缓存将被绕过，资源将被重新加载。否则，如果缓存的资源存在，将被返回。

如果没有\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ 可以处理该文件，则返回一个空资源。

GDScript有一个简化的\ :ref:`@GDScript.load<class_@GDScript_method_load>`\ 内置方法，可以在大多数情况下使用，把\ ``ResourceLoader``\ 的使用留给更高级的场景。

----

.. _class_ResourceLoader_method_load_interactive:

- :ref:`ResourceInteractiveLoader<class_ResourceInteractiveLoader>` **load_interactive** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` type_hint="" **)**

开始交互式加载一个资源。返回的\ :ref:`ResourceInteractiveLoader<class_ResourceInteractiveLoader>`\ 对象允许以高粒度加载，连续调用其\ :ref:`ResourceInteractiveLoader.poll<class_ResourceInteractiveLoader_method_poll>`\ 轮询方法来加载分块。

一个可选的\ ``type_hint``\ 类型提示可以用来进一步指定应该由\ :ref:`ResourceFormatLoader<class_ResourceFormatLoader>`\ 处理的资源\ :ref:`Resource<class_Resource>`\ 类型。任何继承自\ :ref:`Resource<class_Resource>`\ 的东西都可以被用作类型提示，例如\ :ref:`Image<class_Image>`\ 。

----

.. _class_ResourceLoader_method_set_abort_on_missing_resources:

- void **set_abort_on_missing_resources** **(** :ref:`bool<class_bool>` abort **)**

更改缺少子资源时的行为。默认行为是中止加载。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
