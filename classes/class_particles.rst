:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Particles.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Particles:

Particles
=========

**Inherits:** :ref:`GeometryInstance<class_GeometryInstance>` **<** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`CullInstance<class_CullInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

基于GPU的3D粒子发射器。

描述
----

用于创建各种粒子系统和效果的 3D 粒子节点。\ ``Particles`` 实现了是发射器以给定的速率产生一定数量的粒子。

使用 ``process_material`` 属性添加 :ref:`ParticlesMaterial<class_ParticlesMaterial>` 来配置粒子外观和行为。或者，您可以添加一个将应用于所有粒子的 :ref:`ShaderMaterial<class_ShaderMaterial>`\ 。

\ **注意：**\ ``Particles`` 仅在使用 GLES3 渲染器时有效。如果使用 GLES2 渲染器，请改用\ :ref:`CPUParticles<class_CPUParticles>`\ 。您可以通过选择节点，单击 3D 编辑器视窗顶部的\ **粒子**\ 菜单，然后选择\ **转换为 CPUParticles**\ ，将 ``Particles`` 转换为 :ref:`CPUParticles<class_CPUParticles>`\ 。

\ **注意：**\ 在处理粒子节点后，记得通过选择它来更新其\ :ref:`visibility_aabb<class_Particles_property_visibility_aabb>`\ ，单击 3D 编辑器视窗顶部的\ **粒子**\ 菜单，然后选择\ **生成可见 AABB**\ 。否则，粒子可能会由于相机位置和角度的改变突然消失。

教程
----

- :doc:`Controlling thousands of fish with Particles <../tutorials/performance/vertex_animation/controlling_thousands_of_fish>`

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

属性
----

+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                      | :ref:`amount<class_Particles_property_amount>`                     | ``8``                           |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`DrawOrder<enum_Particles_DrawOrder>` | :ref:`draw_order<class_Particles_property_draw_order>`             | ``0``                           |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_1<class_Particles_property_draw_pass_1>`           |                                 |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_2<class_Particles_property_draw_pass_2>`           |                                 |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_3<class_Particles_property_draw_pass_3>`           |                                 |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_4<class_Particles_property_draw_pass_4>`           |                                 |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                      | :ref:`draw_passes<class_Particles_property_draw_passes>`           | ``1``                           |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                    | :ref:`emitting<class_Particles_property_emitting>`                 | ``true``                        |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                  | :ref:`explosiveness<class_Particles_property_explosiveness>`       | ``0.0``                         |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`int<class_int>`                      | :ref:`fixed_fps<class_Particles_property_fixed_fps>`               | ``0``                           |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                    | :ref:`fract_delta<class_Particles_property_fract_delta>`           | ``true``                        |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                  | :ref:`lifetime<class_Particles_property_lifetime>`                 | ``1.0``                         |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                    | :ref:`local_coords<class_Particles_property_local_coords>`         | ``true``                        |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`bool<class_bool>`                    | :ref:`one_shot<class_Particles_property_one_shot>`                 | ``false``                       |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                  | :ref:`preprocess<class_Particles_property_preprocess>`             | ``0.0``                         |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`Material<class_Material>`            | :ref:`process_material<class_Particles_property_process_material>` |                                 |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                  | :ref:`randomness<class_Particles_property_randomness>`             | ``0.0``                         |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`float<class_float>`                  | :ref:`speed_scale<class_Particles_property_speed_scale>`           | ``1.0``                         |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
| :ref:`AABB<class_AABB>`                    | :ref:`visibility_aabb<class_Particles_property_visibility_aabb>`   | ``AABB( -4, -4, -4, 8, 8, 8 )`` |
+--------------------------------------------+--------------------------------------------------------------------+---------------------------------+

方法
----

+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>` | :ref:`capture_aabb<class_Particles_method_capture_aabb>` **(** **)** |const|                                                              |
+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Mesh<class_Mesh>` | :ref:`get_draw_pass_mesh<class_Particles_method_get_draw_pass_mesh>` **(** :ref:`int<class_int>` pass **)** |const|                       |
+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`restart<class_Particles_method_restart>` **(** **)**                                                                                |
+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`set_draw_pass_mesh<class_Particles_method_set_draw_pass_mesh>` **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)** |
+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Particles_DrawOrder:

.. _class_Particles_constant_DRAW_ORDER_INDEX:

.. _class_Particles_constant_DRAW_ORDER_LIFETIME:

.. _class_Particles_constant_DRAW_ORDER_VIEW_DEPTH:

enum **DrawOrder**:

- **DRAW_ORDER_INDEX** = **0** --- 粒子按发射顺序绘制。

- **DRAW_ORDER_LIFETIME** = **1** --- 按照剩余寿命的顺序绘制粒子。

- **DRAW_ORDER_VIEW_DEPTH** = **2** --- 粒子按深度顺序绘制。

常量
----

.. _class_Particles_constant_MAX_DRAW_PASSES:

- **MAX_DRAW_PASSES** = **4** --- 支持的最大抽取次数。

属性说明
--------

.. _class_Particles_property_amount:

- :ref:`int<class_int>` **amount**

+-----------+-------------------+
| *Default* | ``8``             |
+-----------+-------------------+
| *Setter*  | set_amount(value) |
+-----------+-------------------+
| *Getter*  | get_amount()      |
+-----------+-------------------+

在一个发射周期内排放的粒子数（对应于\ :ref:`lifetime<class_Particles_property_lifetime>`\ ）。

\ **注意：**\ 改变\ :ref:`amount<class_Particles_property_amount>`\ 将重置粒子发射，因此，在改变\ :ref:`amount<class_Particles_property_amount>`\ 之前已经排放的所有粒子将被移除。

----

.. _class_Particles_property_draw_order:

- :ref:`DrawOrder<enum_Particles_DrawOrder>` **draw_order**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_draw_order(value) |
+-----------+-----------------------+
| *Getter*  | get_draw_order()      |
+-----------+-----------------------+

粒子绘制顺序。使用\ :ref:`DrawOrder<enum_Particles_DrawOrder>`\ 值。

----

.. _class_Particles_property_draw_pass_1:

- :ref:`Mesh<class_Mesh>` **draw_pass_1**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

第一次抽取的\ :ref:`Mesh<class_Mesh>`\ 。

----

.. _class_Particles_property_draw_pass_2:

- :ref:`Mesh<class_Mesh>` **draw_pass_2**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>`\ 在第二次抽取时被抽出的。

----

.. _class_Particles_property_draw_pass_3:

- :ref:`Mesh<class_Mesh>` **draw_pass_3**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>`\ 这是为第三次抽取所抽出的。

----

.. _class_Particles_property_draw_pass_4:

- :ref:`Mesh<class_Mesh>` **draw_pass_4**

+----------+---------------------------+
| *Setter* | set_draw_pass_mesh(value) |
+----------+---------------------------+
| *Getter* | get_draw_pass_mesh()      |
+----------+---------------------------+

:ref:`Mesh<class_Mesh>`\ 这是为第四次抽取所抽出的。

----

.. _class_Particles_property_draw_passes:

- :ref:`int<class_int>` **draw_passes**

+-----------+------------------------+
| *Default* | ``1``                  |
+-----------+------------------------+
| *Setter*  | set_draw_passes(value) |
+-----------+------------------------+
| *Getter*  | get_draw_passes()      |
+-----------+------------------------+

渲染粒子时的绘制次数。

----

.. _class_Particles_property_emitting:

- :ref:`bool<class_bool>` **emitting**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_emitting(value) |
+-----------+---------------------+
| *Getter*  | is_emitting()       |
+-----------+---------------------+

如果\ ``true``\ ，则正在发射粒子。

----

.. _class_Particles_property_explosiveness:

- :ref:`float<class_float>` **explosiveness**

+-----------+--------------------------------+
| *Default* | ``0.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_explosiveness_ratio(value) |
+-----------+--------------------------------+
| *Getter*  | get_explosiveness_ratio()      |
+-----------+--------------------------------+

每次发射之间的时间比。如果\ ``0``\ ，粒子是连续发射的。如果\ ``1``\ ，所有的粒子都同时发射。

----

.. _class_Particles_property_fixed_fps:

- :ref:`int<class_int>` **fixed_fps**

+-----------+----------------------+
| *Default* | ``0``                |
+-----------+----------------------+
| *Setter*  | set_fixed_fps(value) |
+-----------+----------------------+
| *Getter*  | get_fixed_fps()      |
+-----------+----------------------+

粒子系统的帧速率固定为一个值。例如，将值更改为2将使粒子以每秒2帧的速度渲染。注意，这不会减慢粒子系统本身的仿真速度。

----

.. _class_Particles_property_fract_delta:

- :ref:`bool<class_bool>` **fract_delta**

+-----------+-----------------------------+
| *Default* | ``true``                    |
+-----------+-----------------------------+
| *Setter*  | set_fractional_delta(value) |
+-----------+-----------------------------+
| *Getter*  | get_fractional_delta()      |
+-----------+-----------------------------+

如果\ ``true``\ ，将导致分数增量计算，该显示具有更平滑的粒子显示效果。

----

.. _class_Particles_property_lifetime:

- :ref:`float<class_float>` **lifetime**

+-----------+---------------------+
| *Default* | ``1.0``             |
+-----------+---------------------+
| *Setter*  | set_lifetime(value) |
+-----------+---------------------+
| *Getter*  | get_lifetime()      |
+-----------+---------------------+

每个粒子存在的时间，以秒为单位。

----

.. _class_Particles_property_local_coords:

- :ref:`bool<class_bool>` **local_coords**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_use_local_coordinates(value) |
+-----------+----------------------------------+
| *Getter*  | get_use_local_coordinates()      |
+-----------+----------------------------------+

如果\ ``true``\ ，则粒子将使用父节点的坐标空间。如果\ ``false``\ ，则使用全局坐标。

----

.. _class_Particles_property_one_shot:

- :ref:`bool<class_bool>` **one_shot**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_one_shot(value) |
+-----------+---------------------+
| *Getter*  | get_one_shot()      |
+-----------+---------------------+

如果\ ``true``\ ，将只发出\ ``amount``\ 粒子。

----

.. _class_Particles_property_preprocess:

- :ref:`float<class_float>` **preprocess**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_pre_process_time(value) |
+-----------+-----------------------------+
| *Getter*  | get_pre_process_time()      |
+-----------+-----------------------------+

动画开始前对粒子进行预处理的时间。让你在粒子开始发射后的一段时间内开始动画。

----

.. _class_Particles_property_process_material:

- :ref:`Material<class_Material>` **process_material**

+----------+-----------------------------+
| *Setter* | set_process_material(value) |
+----------+-----------------------------+
| *Getter* | get_process_material()      |
+----------+-----------------------------+

用于处理粒子的 :ref:`Material<class_Material>` 。可以是一个 :ref:`ParticlesMaterial<class_ParticlesMaterial>` 或一个 :ref:`ShaderMaterial<class_ShaderMaterial>` 。

----

.. _class_Particles_property_randomness:

- :ref:`float<class_float>` **randomness**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_randomness_ratio(value) |
+-----------+-----------------------------+
| *Getter*  | get_randomness_ratio()      |
+-----------+-----------------------------+

发出随机率。

----

.. _class_Particles_property_speed_scale:

- :ref:`float<class_float>` **speed_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_speed_scale(value) |
+-----------+------------------------+
| *Getter*  | get_speed_scale()      |
+-----------+------------------------+

速度缩放比。一个\ ``0``\ 的值可以用来暂停粒子。

----

.. _class_Particles_property_visibility_aabb:

- :ref:`AABB<class_AABB>` **visibility_aabb**

+-----------+---------------------------------+
| *Default* | ``AABB( -4, -4, -4, 8, 8, 8 )`` |
+-----------+---------------------------------+
| *Setter*  | set_visibility_aabb(value)      |
+-----------+---------------------------------+
| *Getter*  | get_visibility_aabb()           |
+-----------+---------------------------------+

:ref:`AABB<class_AABB>` 确定节点的区域，该区域需要在屏幕上可见才能使粒子系统处于活动状态。

如果在节点进入/退出屏幕时粒子突然出现/消失，则增大框。 :ref:`AABB<class_AABB>` 可以通过代码或使用 **Particles → Generate AABB** 编辑器工具生成。

\ **注意：** 如果使用中的 :ref:`ParticlesMaterial<class_ParticlesMaterial>` 配置为投射阴影，您可能需要放大此 AABB 以确保在粒子离屏时更新阴影。

方法说明
--------

.. _class_Particles_method_capture_aabb:

- :ref:`AABB<class_AABB>` **capture_aabb** **(** **)** |const|

返回包含当前帧中所有活动粒子的轴对齐包围盒。

----

.. _class_Particles_method_get_draw_pass_mesh:

- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

返回在索引 ``pass`` 处绘制的 :ref:`Mesh<class_Mesh>` 。

----

.. _class_Particles_method_restart:

- void **restart** **(** **)**

重新发射粒子，清除现有的粒子。

----

.. _class_Particles_method_set_draw_pass_mesh:

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**

设置在索引 ``pass`` 处绘制的 :ref:`Mesh<class_Mesh>` 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
