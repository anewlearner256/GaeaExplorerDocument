:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the PackedScene.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PackedScene:

PackedScene
===========

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`PackedSceneGLTF<class_PackedSceneGLTF>`

一个序列化场景的抽象。

描述
----

场景文件的简化接口。提供针对场景资源本身的操作和检查。

可以用来将节点保存到文件中。当保存时，该节点以及它所拥有的所有节点都会被保存（请参阅 :ref:`Node<class_Node>` 中的属性 ``owner``\ ）。

\ **注意：**\ 节点不需要拥有自己。

\ **加载已保存场景的示例：**\ 

::

    # 如果在编译时不知道路径，就使用 `load()` 而不是 `preload()`。
    var scene = preload("res://scene.tscn").instance()
    # 将该节点作为脚本所依附的节点的一个子节点。
    add_child(scene)

\ **保存具有不同所有者节点的例子：**\ 下面的例子创建了 3 个对象：\ ``Node2D``\ （\ ``node``\ ）、\ ``RigidBody2D``\ （\ ``rigid``\ ）、\ ``CollisionObject2D``\ （\ ``collision``\ ）。\ ``collision`` 是 ``rigid`` 的子节点、rigid 是 ``node`` 的子节点。只有 ``rigid`` 被 ``node``\ 拥有，因此 ``pack`` 只会保存这两个节点，不会保存 ``collision``\ 。

::

    # 创建对象。
    var node = Node2D.new()
    var rigid = RigidBody2D.new()
    var collision = CollisionShape2D.new()
    
    # 创建对象的层次结构。
    rigid.add_child(collision)
    node.add_child(rigid)
    
    # 改变 `rigid` 的所有者，但不改变 `collision` 的所有者。
    rigid.owner = node
    
    var scene = PackedScene.new()
    # 现在只有 `node` 和 `rigid` 被打包。
    var result = scene.pack(node)
    if result == OK:
        var error = ResourceSaver.save("res://path/name.scn", scene)  # 或者 "user://..."
        if error != OK:
            push_error("保存场景到磁盘时发生错误。")

教程
----

- `2D Role Playing Game Demo <https://godotengine.org/asset-library/asset/520>`__

属性
----

+-------------------------------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`_bundled<class_PackedScene_property__bundled>` | ``{"conn_count": 0,"conns": PoolIntArray(  ),"editable_instances": [  ],"names": PoolStringArray(  ),"node_count": 0,"node_paths": [  ],"nodes": PoolIntArray(  ),"variants": [  ],"version": 2}`` |
+-------------------------------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法
----

+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`can_instance<class_PackedScene_method_can_instance>` **(** **)** |const|                                                         |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneState<class_SceneState>`   | :ref:`get_state<class_PackedScene_method_get_state>` **(** **)**                                                                       |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`               | :ref:`instance<class_PackedScene_method_instance>` **(** :ref:`GenEditState<enum_PackedScene_GenEditState>` edit_state=0 **)** |const| |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`pack<class_PackedScene_method_pack>` **(** :ref:`Node<class_Node>` path **)**                                                    |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_PackedScene_GenEditState:

.. _class_PackedScene_constant_GEN_EDIT_STATE_DISABLED:

.. _class_PackedScene_constant_GEN_EDIT_STATE_INSTANCE:

.. _class_PackedScene_constant_GEN_EDIT_STATE_MAIN:

.. _class_PackedScene_constant_GEN_EDIT_STATE_MAIN_INHERITED:

enum **GenEditState**:

- **GEN_EDIT_STATE_DISABLED** = **0** --- 如果传递给\ :ref:`instance<class_PackedScene_method_instance>`\ ，则阻止对场景状态的编辑。

- **GEN_EDIT_STATE_INSTANCE** = **1** --- 如果传递给\ :ref:`instance<class_PackedScene_method_instance>`\ ，则向本地场景提供本地场景资源。

\ **注意：** 只在编辑器构建中可用。

- **GEN_EDIT_STATE_MAIN** = **2** --- 如果传递给\ :ref:`instance<class_PackedScene_method_instance>`\ ，向本地场景提供本地场景资源。只有主场景应该接收主编辑状态。

\ **注意：** 只在编辑器构建中可用。

- **GEN_EDIT_STATE_MAIN_INHERITED** = **3** --- It's similar to :ref:`GEN_EDIT_STATE_MAIN<class_PackedScene_constant_GEN_EDIT_STATE_MAIN>`, but for the case where the scene is being instantiated to be the base of another one.

\ **Note:** Only available in editor builds.

属性说明
--------

.. _class_PackedScene_property__bundled:

- :ref:`Dictionary<class_Dictionary>` **_bundled**

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| *Default* | ``{"conn_count": 0,"conns": PoolIntArray(  ),"editable_instances": [  ],"names": PoolStringArray(  ),"node_count": 0,"node_paths": [  ],"nodes": PoolIntArray(  ),"variants": [  ],"version": 2}`` |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

场景内容的字典表示。

可用的字段包括资源的“rnames”和“variants”，节点的“node_count”、“nodes”、“node_paths”，基本场景子级覆盖的“editable_instances”，信号连接的“conn_count”和“conns”，以及 PackedScene 格式样式的版本“version”。

方法说明
--------

.. _class_PackedScene_method_can_instance:

- :ref:`bool<class_bool>` **can_instance** **(** **)** |const|

如果场景文件有节点，返回 ``true``\ 。

----

.. _class_PackedScene_method_get_state:

- :ref:`SceneState<class_SceneState>` **get_state** **(** **)**

返回代表场景文件内容的 ``SceneState``\ 。

----

.. _class_PackedScene_method_instance:

- :ref:`Node<class_Node>` **instance** **(** :ref:`GenEditState<enum_PackedScene_GenEditState>` edit_state=0 **)** |const|

实例化场景的节点层次结构。触发子场景实例化。在根节点上触发一个 :ref:`Node.NOTIFICATION_INSTANCED<class_Node_constant_NOTIFICATION_INSTANCED>` 通知。

----

.. _class_PackedScene_method_pack:

- :ref:`Error<enum_@GlobalScope_Error>` **pack** **(** :ref:`Node<class_Node>` path **)**

包将忽略不属于给定节点的任何子节点。请参阅 :ref:`Node.owner<class_Node_property_owner>`\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
