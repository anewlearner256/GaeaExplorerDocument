:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the JSONParseResult.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_JSONParseResult:

JSONParseResult
===============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

解码 JSON 的数据类包装器。

描述
----

由\ :ref:`JSON.parse<class_JSON_method_parse>`\ 返回，\ ``JSONParseResult``\ 包含解码的JSON或错误信息（如果JSON源没有被成功解析）。你可以用\ ``if json_result.error == OK``\ 检查JSON源是否被成功解析。

属性
----

+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`error<class_JSONParseResult_property_error>`               |        |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`int<class_int>`                 | :ref:`error_line<class_JSONParseResult_property_error_line>`     | ``-1`` |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`String<class_String>`           | :ref:`error_string<class_JSONParseResult_property_error_string>` | ``""`` |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`Variant<class_Variant>`         | :ref:`result<class_JSONParseResult_property_result>`             |        |
+---------------------------------------+------------------------------------------------------------------+--------+

属性说明
--------

.. _class_JSONParseResult_property_error:

- :ref:`Error<enum_@GlobalScope_Error>` **error**

+----------+------------------+
| *Setter* | set_error(value) |
+----------+------------------+
| *Getter* | get_error()      |
+----------+------------------+

未成功解析 JSON 源时的错误类型。请参阅 :ref:`Error<enum_@GlobalScope_Error>` 常量。

----

.. _class_JSONParseResult_property_error_line:

- :ref:`int<class_int>` **error_line**

+-----------+-----------------------+
| *Default* | ``-1``                |
+-----------+-----------------------+
| *Setter*  | set_error_line(value) |
+-----------+-----------------------+
| *Getter*  | get_error_line()      |
+-----------+-----------------------+

如果JSON源没有被成功解析，返回发生错误的行号。

----

.. _class_JSONParseResult_property_error_string:

- :ref:`String<class_String>` **error_string**

+-----------+-------------------------+
| *Default* | ``""``                  |
+-----------+-------------------------+
| *Setter*  | set_error_string(value) |
+-----------+-------------------------+
| *Getter*  | get_error_string()      |
+-----------+-------------------------+

未成功解析 JSON 源时的错误消息。请参阅 :ref:`Error<enum_@GlobalScope_Error>` 常量。

----

.. _class_JSONParseResult_property_result:

- :ref:`Variant<class_Variant>` **result**

+----------+-------------------+
| *Setter* | set_result(value) |
+----------+-------------------+
| *Getter* | get_result()      |
+----------+-------------------+

包含解析过JSON的变量\ :ref:`Variant<class_Variant>`\ 。使用\ :ref:`@GDScript.typeof<class_@GDScript_method_typeof>`\ 或\ ``is``\ 关键字来检查它是否是你期望的。例如，如果JSON源以花括号开始（\ ``{}``\ ），将返回一个字典\ :ref:`Dictionary<class_Dictionary>`\ 。如果JSON源以方括号开始（\ ``[]``\ ），将返回一个数组\ :ref:`Array<class_Array>`\ 。

\ **注意:** JSON规范没有定义整数或浮点数类型，而只有一个数字\ *number*\ 类型。因此，解析JSON文本将把所有的数字值转换为浮点\ :ref:`float<class_float>`\ 类型。

\ **注意：**\ JSON对象不像GaaeExplorer字典那样保留键的顺序，因此，如果一个字典是由JSON构建的，你不应该依赖键是按一定顺序的。与此相反，JSON数组保留其元素的顺序。

::

    var p = JSON.parse('["hello", "world", "!"]' )
    if typeof(p.result) == TYPE_ARRAY:
        print(p.result[0]) # 打印 "hello"
    else:
        push_error("Unexpected results.")#意外的结果。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
