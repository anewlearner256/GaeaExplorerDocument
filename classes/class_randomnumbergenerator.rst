:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the RandomNumberGenerator.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RandomNumberGenerator:

RandomNumberGenerator
=====================

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

一个用于生成伪随机数的类。

描述
----

RandomNumberGenerator 是一个用于生成伪随机数的类。它目前使用 `PCG32 <http://www.pcg-random.org/>`__\ 。

\ **注:**\ 底层算法是实现细节。因此，跨 GaaeExplorer 版本的可重复随机流不应该依赖于此。

要根据时间相关种子生成随机浮点数，在给定范围内：

::

    var rng = RandomNumberGenerator.new()
    func _ready():
        rng.randomize()
        var my_random_number = rng.randf_range(-10.0, 10.0)

\ **注:** :ref:`seed<class_RandomNumberGenerator_property_seed>` 和 :ref:`state<class_RandomNumberGenerator_property_state>` 属性的默认值是伪随机的，在调用\ :ref:`randomize<class_RandomNumberGenerator_method_randomize>` 时会发生变化。此处记录的 ``0`` 值是一个占位符，而不是实际的默认种子。

教程
----

- :doc:`Random number generation <../tutorials/math/random_number_generation>`

属性
----

+-----------------------+----------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`seed<class_RandomNumberGenerator_property_seed>`   | ``0`` |
+-----------------------+----------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`state<class_RandomNumberGenerator_property_state>` | ``0`` |
+-----------------------+----------------------------------------------------------+-------+

方法
----

+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randf<class_RandomNumberGenerator_method_randf>` **(** **)**                                                                               |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randf_range<class_RandomNumberGenerator_method_randf_range>` **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to **)**      |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randfn<class_RandomNumberGenerator_method_randfn>` **(** :ref:`float<class_float>` mean=0.0, :ref:`float<class_float>` deviation=1.0 **)** |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`     | :ref:`randi<class_RandomNumberGenerator_method_randi>` **(** **)**                                                                               |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`     | :ref:`randi_range<class_RandomNumberGenerator_method_randi_range>` **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)**              |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`randomize<class_RandomNumberGenerator_method_randomize>` **(** **)**                                                                       |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_RandomNumberGenerator_property_seed:

- :ref:`int<class_int>` **seed**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_seed(value) |
+-----------+-----------------+
| *Getter*  | get_seed()      |
+-----------+-----------------+

根据给定的种子值初始化随机数生成器状态。给定的种子将提供可重复的伪随机数序列。

\ **注：** RNG 没有雪崩效应，可以输出相似的随机流给定相似的种子。如果种子来自外部，请考虑使用哈希函数来提高种子质量。

\ **注：**\ 设置这个属性会产生改变内部\ :ref:`state<class_RandomNumberGenerator_property_state>`\ 的副作用，所以一定要在修改\ :ref:`state<class_RandomNumberGenerator_property_state>`\ *之前*\ 初始化种子：

::

    var rng = RandomNumberGenerator.new()
    rng.seed = hash("GaaeExplorer")
    rng.state = 100 # Restore to some previously saved state.

\ **警告：**\ 该属性的getter返回之前的\ :ref:`state<class_RandomNumberGenerator_property_state>`\ ，而不是初始种子值，这将在GaaeExplorer 4.0中修复。

----

.. _class_RandomNumberGenerator_property_state:

- :ref:`int<class_int>` **state**

+-----------+------------------+
| *Default* | ``0``            |
+-----------+------------------+
| *Setter*  | set_state(value) |
+-----------+------------------+
| *Getter*  | get_state()      |
+-----------+------------------+

随机数生成器的当前状态。保存并恢复此属性，以将生成器恢复到之前的状态：

::

    var rng = RandomNumberGenerator.new()
    print(rng.randf())
    var saved_state = rng.state # Store current state.
    print(rng.randf()) # Advance internal state.
    rng.state = saved_state # Restore the state.
    print(rng.randf()) # Prints the same value as in previous.

\ **注意：** 不要将状态设置为任意值，因为随机数生成器要求状态具有某些特性才能正常运行。它应该只设置为来自状态属性本身的值。要使用任意输入初始化随机数生成器，请改用 :ref:`seed<class_RandomNumberGenerator_property_seed>`\ 。

方法说明
--------

.. _class_RandomNumberGenerator_method_randf:

- :ref:`float<class_float>` **randf** **(** **)**

产生一个\ ``0.0``\ 和\ ``1.0``\ （包括端点）之间的伪随机浮点数。

----

.. _class_RandomNumberGenerator_method_randf_range:

- :ref:`float<class_float>` **randf_range** **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to **)**

产生一个\ ``from``\ 和\ ``to``\ （包括端点）之间的伪随机浮点数。

----

.. _class_RandomNumberGenerator_method_randfn:

- :ref:`float<class_float>` **randfn** **(** :ref:`float<class_float>` mean=0.0, :ref:`float<class_float>` deviation=1.0 **)**

产生一个\ `正态分布 <https://en.wikipedia.org/wiki/Normal_distribution>`__\ 的伪随机数，使用Box-Muller变换，具有指定的\ ``mean``\ 和标准\ ``deviation``\ 。这也被称为高斯分布。

----

.. _class_RandomNumberGenerator_method_randi:

- :ref:`int<class_int>` **randi** **(** **)**

产生一个\ ``0``\ 和\ ``4294967295``\ （含端点）之间的伪随机32位无符号整数。

----

.. _class_RandomNumberGenerator_method_randi_range:

- :ref:`int<class_int>` **randi_range** **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)**

产生一个\ ``to``\ 和\ ``from``\ （含端点）之间的伪随机32位有符号整数。

----

.. _class_RandomNumberGenerator_method_randomize:

- void **randomize** **(** **)**

为生成器设置一个基于时间的种子。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
