:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Script.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Script:

Script
======

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`CSharpScript<class_CSharpScript>`, :ref:`GDScript<class_GDScript>`, :ref:`NativeScript<class_NativeScript>`, :ref:`PluginScript<class_PluginScript>`, :ref:`VisualScript<class_VisualScript>`

作为资源存储的类。

描述
----

一个存储为资源的类。用脚本扩展所有以它为实例的对象的功能。

脚本子类的\ ``new``\ 方法创建一个新的实例。如果一个现有的对象的类与脚本的基类之一相匹配，\ :ref:`Object.set_script<class_Object_method_set_script>` 会扩展该对象。

教程
----

- :doc:`../tutorials/scripting/index`

属性
----

+-----------------------------+-------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`source_code<class_Script_property_source_code>` |
+-----------------------------+-------------------------------------------------------+

方法
----

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`can_instance<class_Script_method_can_instance>` **(** **)** |const|                                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Script<class_Script>`           | :ref:`get_base_script<class_Script_method_get_base_script>` **(** **)** |const|                                                    |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_instance_base_type<class_Script_method_get_instance_base_type>` **(** **)** |const|                                      |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`get_property_default_value<class_Script_method_get_property_default_value>` **(** :ref:`String<class_String>` property **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_script_constant_map<class_Script_method_get_script_constant_map>` **(** **)**                                            |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_script_method_list<class_Script_method_get_script_method_list>` **(** **)**                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_script_property_list<class_Script_method_get_script_property_list>` **(** **)**                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_script_signal_list<class_Script_method_get_script_signal_list>` **(** **)**                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_script_signal<class_Script_method_has_script_signal>` **(** :ref:`String<class_String>` signal_name **)** |const|        |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_source_code<class_Script_method_has_source_code>` **(** **)** |const|                                                    |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`instance_has<class_Script_method_instance_has>` **(** :ref:`Object<class_Object>` base_object **)** |const|                  |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_tool<class_Script_method_is_tool>` **(** **)** |const|                                                                    |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`reload<class_Script_method_reload>` **(** :ref:`bool<class_bool>` keep_state=false **)**                                     |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_Script_property_source_code:

- :ref:`String<class_String>` **source_code**

+----------+------------------------+
| *Setter* | set_source_code(value) |
+----------+------------------------+
| *Getter* | get_source_code()      |
+----------+------------------------+

脚本的源代码，如果源代码不可用，则为空字符串。当设置时，不会自动重新加载类的实现。

方法说明
--------

.. _class_Script_method_can_instance:

- :ref:`bool<class_bool>` **can_instance** **(** **)** |const|

如果脚本可以实例化，则返回 ``true``\ 。

----

.. _class_Script_method_get_base_script:

- :ref:`Script<class_Script>` **get_base_script** **(** **)** |const|

返回由该脚本直接继承的脚本。

----

.. _class_Script_method_get_instance_base_type:

- :ref:`String<class_String>` **get_instance_base_type** **(** **)** |const|

返回脚本的基类类型。

----

.. _class_Script_method_get_property_default_value:

- :ref:`Variant<class_Variant>` **get_property_default_value** **(** :ref:`String<class_String>` property **)**

返回指定属性的默认值。

----

.. _class_Script_method_get_script_constant_map:

- :ref:`Dictionary<class_Dictionary>` **get_script_constant_map** **(** **)**

返回一个包含常量名称及其值的字典。

----

.. _class_Script_method_get_script_method_list:

- :ref:`Array<class_Array>` **get_script_method_list** **(** **)**

返回此 ``Script`` 中的方法列表。

----

.. _class_Script_method_get_script_property_list:

- :ref:`Array<class_Array>` **get_script_property_list** **(** **)**

返回此 ``Script`` 中的属性列表。

----

.. _class_Script_method_get_script_signal_list:

- :ref:`Array<class_Array>` **get_script_signal_list** **(** **)**

返回在此 ``Script`` 中定义的用户信号列表。

----

.. _class_Script_method_has_script_signal:

- :ref:`bool<class_bool>` **has_script_signal** **(** :ref:`String<class_String>` signal_name **)** |const|

如果脚本或基类定义了具有给定名称的信号，则返回 ``true``\ 。

----

.. _class_Script_method_has_source_code:

- :ref:`bool<class_bool>` **has_source_code** **(** **)** |const|

如果脚本包含非空源代码，则返回 ``true``\ 。

----

.. _class_Script_method_instance_has:

- :ref:`bool<class_bool>` **instance_has** **(** :ref:`Object<class_Object>` base_object **)** |const|

如果 ``base_object`` 是此脚本的实例，则返回 ``true``\ 。

----

.. _class_Script_method_is_tool:

- :ref:`bool<class_bool>` **is_tool** **(** **)** |const|

如果脚本是工具脚本，则返回 ``true``\ 。工具脚本可以在编辑器中运行。

----

.. _class_Script_method_reload:

- :ref:`Error<enum_@GlobalScope_Error>` **reload** **(** :ref:`bool<class_bool>` keep_state=false **)**

重新加载脚本的类的实现。返回一个错误代码。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
