:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the ShaderMaterial.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ShaderMaterial:

ShaderMaterial
==============

**Inherits:** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

使用自定义 :ref:`Shader<class_Shader>` 程序的材质。

描述
----

使用自定义 :ref:`Shader<class_Shader>` 程序渲染项目以筛选或处理粒子的材质。您可以为同一个着色器创建多种材质，但可以为着色器中定义的uniforms配置不同的值。

\ **注意：** 由于渲染器限制，在 :ref:`GIProbe<class_GIProbe>` 中使用时，自发光 ``ShaderMaterial`` 无法发光。只有自发光的 :ref:`SpatialMaterial<class_SpatialMaterial>` 可以在 :ref:`GIProbe<class_GIProbe>` 中发光。

教程
----

- :doc:`../tutorials/shaders/index`

属性
----

+-----------------------------+-----------------------------------------------------+
| :ref:`Shader<class_Shader>` | :ref:`shader<class_ShaderMaterial_property_shader>` |
+-----------------------------+-----------------------------------------------------+

方法
----

+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`get_shader_param<class_ShaderMaterial_method_get_shader_param>` **(** :ref:`String<class_String>` param **)** |const|                              |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`property_can_revert<class_ShaderMaterial_method_property_can_revert>` **(** :ref:`String<class_String>` name **)**                                 |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`property_get_revert<class_ShaderMaterial_method_property_get_revert>` **(** :ref:`String<class_String>` name **)**                                 |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_shader_param<class_ShaderMaterial_method_set_shader_param>` **(** :ref:`String<class_String>` param, :ref:`Variant<class_Variant>` value **)** |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_ShaderMaterial_property_shader:

- :ref:`Shader<class_Shader>` **shader**

+----------+-------------------+
| *Setter* | set_shader(value) |
+----------+-------------------+
| *Getter* | get_shader()      |
+----------+-------------------+

用于渲染此材质的 :ref:`Shader<class_Shader>` 程序。

方法说明
--------

.. _class_ShaderMaterial_method_get_shader_param:

- :ref:`Variant<class_Variant>` **get_shader_param** **(** :ref:`String<class_String>` param **)** |const|

返回在着色器中此uniform材质的当前值。

----

.. _class_ShaderMaterial_method_property_can_revert:

- :ref:`bool<class_bool>` **property_can_revert** **(** :ref:`String<class_String>` name **)**

如果由\ ``name``\ 标识的属性可以恢复到默认值，则返回\ ``true``\ 。

----

.. _class_ShaderMaterial_method_property_get_revert:

- :ref:`Variant<class_Variant>` **property_get_revert** **(** :ref:`String<class_String>` name **)**

返回具有给定 ``name`` 的材质属性的默认值。

----

.. _class_ShaderMaterial_method_set_shader_param:

- void **set_shader_param** **(** :ref:`String<class_String>` param, :ref:`Variant<class_Variant>` value **)**

改变着色器中材质的uniform值。

\ **注意：** ``param``\ 必须与代码中的uniform名称完全匹配。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
