:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Thread.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Thread:

Thread
======

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

执行过程中的执行单元。

描述
----

进程中的执行单元。可以同时在 :ref:`Object<class_Object>` 上运行方法。如果使用共享对象，建议通过 :ref:`Mutex<class_Mutex>` 或 :ref:`Semaphore<class_Semaphore>` 使用同步。

\ **注意：** 如果代码在线程中运行，断点不会中断。这是 GDScript 调试器的当前限制。

教程
----

- :doc:`Using multiple threads <../tutorials/performance/threads/using_multiple_threads>`

- :doc:`Thread-safe APIs <../tutorials/performance/threads/thread_safe_apis>`

- `3D Voxel Demo <https://godotengine.org/asset-library/asset/676>`__

方法
----

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_id<class_Thread_method_get_id>` **(** **)** |const|                                                                                                                                                               |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_active<class_Thread_method_is_active>` **(** **)** |const|                                                                                                                                                         |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_alive<class_Thread_method_is_alive>` **(** **)** |const|                                                                                                                                                           |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`start<class_Thread_method_start>` **(** :ref:`Object<class_Object>` instance, :ref:`String<class_String>` method, :ref:`Variant<class_Variant>` userdata=null, :ref:`Priority<enum_Thread_Priority>` priority=1 **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`wait_to_finish<class_Thread_method_wait_to_finish>` **(** **)**                                                                                                                                                       |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Thread_Priority:

.. _class_Thread_constant_PRIORITY_LOW:

.. _class_Thread_constant_PRIORITY_NORMAL:

.. _class_Thread_constant_PRIORITY_HIGH:

enum **Priority**:

- **PRIORITY_LOW** = **0** --- 一个线程以比正常情况下更低的优先级运行。

- **PRIORITY_NORMAL** = **1** --- 具有标准优先级的线程。

- **PRIORITY_HIGH** = **2** --- 以比正常情况更高的优先级运行的线程。

方法说明
--------

.. _class_Thread_method_get_id:

- :ref:`String<class_String>` **get_id** **(** **)** |const|

返回当前 ``Thread`` 的 ID，在所有线程中唯一标识它。如果 ``Thread`` 未运行，则返回空字符串。

----

.. _class_Thread_method_is_active:

- :ref:`bool<class_bool>` **is_active** **(** **)** |const|

如果此 ``Thread`` 已启动，则返回 ``true``\ 。一旦开始，这将返回 ``true`` ，直到它使用 :ref:`wait_to_finish<class_Thread_method_wait_to_finish>` 加入。要检查 ``Thread`` 是否仍在执行其任务，请使用 :ref:`is_alive<class_Thread_method_is_alive>`\ 。

----

.. _class_Thread_method_is_alive:

- :ref:`bool<class_bool>` **is_alive** **(** **)** |const|

当本 ``Thread`` 线程正在等待时，返回 ``true``\ 。在需要确定调用 :ref:`wait_to_finish<class_Thread_method_wait_to_finish>` 是否会阻塞调用线程时非常有用。

要检查 ``Thread`` 线程是否可合并，请使用 :ref:`is_active<class_Thread_method_is_active>`\ 。

----

.. _class_Thread_method_start:

- :ref:`Error<enum_@GlobalScope_Error>` **start** **(** :ref:`Object<class_Object>` instance, :ref:`String<class_String>` method, :ref:`Variant<class_Variant>` userdata=null, :ref:`Priority<enum_Thread_Priority>` priority=1 **)**

启动一个新的\ ``Thread``\ 线程，在对象\ ``instance``\ 上运行\ ``method``\ ，并将\ ``userdata``\ 作为一个参数传递。即使没有传递userdata，\ ``method``\ 也必须接受一个空的参数。\ ``Thread``\ 的\ ``priority``\ 优先级可以通过传递\ :ref:`Priority<enum_Thread_Priority>`\ 枚举中的一个值来改变。

成功时返回\ :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，失败时返回\ :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` 。

----

.. _class_Thread_method_wait_to_finish:

- :ref:`Variant<class_Variant>` **wait_to_finish** **(** **)**

合并 ``Thread`` 并等待它完成。返回传递给 :ref:`start<class_Thread_method_start>` 的方法的输出。

应在两种情况下使用：想要获取 ``Thread`` 调用的方法所返回的值，或者在释放包含 ``Thread`` 的实例之前。

如果想确定调用本方法是否会阻塞调用线程，请检查 :ref:`is_alive<class_Thread_method_is_alive>` 是否为 ``false``\ 。

\ **注意：** ``Thread`` 在完成合并后将被销毁。如果要再次使用它，则必须创建它的新实例。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
