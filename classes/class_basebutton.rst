:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the BaseButton.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_BaseButton:

BaseButton
==========

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`Button<class_Button>`, :ref:`LinkButton<class_LinkButton>`, :ref:`TextureButton<class_TextureButton>`

不同类型按钮的基类。

描述
----

BaseButton是按钮的抽象基类，所以不应该直接使用它（它不显示任何东西）。其他类型的按钮都继承自它。

属性
----

+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`ActionMode<enum_BaseButton_ActionMode>` | :ref:`action_mode<class_BaseButton_property_action_mode>`                   | ``1``                                                               |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`button_mask<class_BaseButton_property_button_mask>`                   | ``1``                                                               |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`disabled<class_BaseButton_property_disabled>`                         | ``false``                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`FocusMode<enum_Control_FocusMode>`      | :ref:`enabled_focus_mode<class_BaseButton_property_enabled_focus_mode>`     | ``2``                                                               |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`FocusMode<enum_Control_FocusMode>`      | focus_mode                                                                  | ``2`` (overrides :ref:`Control<class_Control_property_focus_mode>`) |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`ButtonGroup<class_ButtonGroup>`         | :ref:`group<class_BaseButton_property_group>`                               |                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`keep_pressed_outside<class_BaseButton_property_keep_pressed_outside>` | ``false``                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`pressed<class_BaseButton_property_pressed>`                           | ``false``                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`ShortCut<class_ShortCut>`               | :ref:`shortcut<class_BaseButton_property_shortcut>`                         |                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`shortcut_in_tooltip<class_BaseButton_property_shortcut_in_tooltip>`   | ``true``                                                            |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`toggle_mode<class_BaseButton_property_toggle_mode>`                   | ``false``                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------+---------------------------------------------------------------------+

方法
----

+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`_pressed<class_BaseButton_method__pressed>` **(** **)** |virtual|                                                 |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`_toggled<class_BaseButton_method__toggled>` **(** :ref:`bool<class_bool>` button_pressed **)** |virtual|          |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`DrawMode<enum_BaseButton_DrawMode>` | :ref:`get_draw_mode<class_BaseButton_method_get_draw_mode>` **(** **)** |const|                                         |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_hovered<class_BaseButton_method_is_hovered>` **(** **)** |const|                                               |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_pressed_no_signal<class_BaseButton_method_set_pressed_no_signal>` **(** :ref:`bool<class_bool>` pressed **)** |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_BaseButton_signal_button_down:

- **button_down** **(** **)**

当按钮开始被按下时发出。

----

.. _class_BaseButton_signal_button_up:

- **button_up** **(** **)**

当按钮停止按下时发出。

----

.. _class_BaseButton_signal_pressed:

- **pressed** **(** **)**

当按钮被切换或按下时发出。如果 :ref:`action_mode<class_BaseButton_property_action_mode>` 是 :ref:`ACTION_MODE_BUTTON_PRESS<class_BaseButton_constant_ACTION_MODE_BUTTON_PRESS>`\ ，则在 :ref:`button_down<class_BaseButton_signal_button_down>` 上，否则在 :ref:`button_up<class_BaseButton_signal_button_up>` 上。

如果您需要知道按钮的按压状态（并且 :ref:`toggle_mode<class_BaseButton_property_toggle_mode>` 是活动的），请使用\ :ref:`toggled<class_BaseButton_signal_toggled>`\ 代替。

----

.. _class_BaseButton_signal_toggled:

- **toggled** **(** :ref:`bool<class_bool>` button_pressed **)**

当按钮刚刚在按下和正常状态之间切换时发出(仅当\ :ref:`toggle_mode<class_BaseButton_property_toggle_mode>`\ 处于活动状态时)。新状态包含在\ ``button_pressed``\ 参数中。

枚举
----

.. _enum_BaseButton_DrawMode:

.. _class_BaseButton_constant_DRAW_NORMAL:

.. _class_BaseButton_constant_DRAW_PRESSED:

.. _class_BaseButton_constant_DRAW_HOVER:

.. _class_BaseButton_constant_DRAW_DISABLED:

.. _class_BaseButton_constant_DRAW_HOVER_PRESSED:

enum **DrawMode**:

- **DRAW_NORMAL** = **0** --- 按钮的正常状态(即没有按下、没有悬停、没有切换和启用)。

- **DRAW_PRESSED** = **1** --- 按钮被按下的状态。

- **DRAW_HOVER** = **2** --- 按钮的状态为悬停。

- **DRAW_DISABLED** = **3** --- 按钮的状态为禁用。

- **DRAW_HOVER_PRESSED** = **4** --- 按钮的状态既是悬停的，也是按下的。

----

.. _enum_BaseButton_ActionMode:

.. _class_BaseButton_constant_ACTION_MODE_BUTTON_PRESS:

.. _class_BaseButton_constant_ACTION_MODE_BUTTON_RELEASE:

enum **ActionMode**:

- **ACTION_MODE_BUTTON_PRESS** = **0** --- 只需要按一下就可以认为按钮被点击了。

- **ACTION_MODE_BUTTON_RELEASE** = **1** --- 要求按下后再释放，才算点击了按钮。

属性说明
--------

.. _class_BaseButton_property_action_mode:

- :ref:`ActionMode<enum_BaseButton_ActionMode>` **action_mode**

+-----------+------------------------+
| *Default* | ``1``                  |
+-----------+------------------------+
| *Setter*  | set_action_mode(value) |
+-----------+------------------------+
| *Getter*  | get_action_mode()      |
+-----------+------------------------+

确定按钮何时被认为被点击，是 :ref:`ActionMode<enum_BaseButton_ActionMode>` 常量之一。

----

.. _class_BaseButton_property_button_mask:

- :ref:`int<class_int>` **button_mask**

+-----------+------------------------+
| *Default* | ``1``                  |
+-----------+------------------------+
| *Setter*  | set_button_mask(value) |
+-----------+------------------------+
| *Getter*  | get_button_mask()      |
+-----------+------------------------+

二进制掩码，用于选择该按钮将响应的鼠标按钮。

要同时允许左键和右键，请使用 ``BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT`` 。

----

.. _class_BaseButton_property_disabled:

- :ref:`bool<class_bool>` **disabled**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_disabled(value) |
+-----------+---------------------+
| *Getter*  | is_disabled()       |
+-----------+---------------------+

如果\ ``true``\ ，则该按钮处于禁用状态，无法点击或切换。

----

.. _class_BaseButton_property_enabled_focus_mode:

- :ref:`FocusMode<enum_Control_FocusMode>` **enabled_focus_mode**

+-----------+-------------------------------+
| *Default* | ``2``                         |
+-----------+-------------------------------+
| *Setter*  | set_enabled_focus_mode(value) |
+-----------+-------------------------------+
| *Getter*  | get_enabled_focus_mode()      |
+-----------+-------------------------------+

*已弃用。* 由于冗余，此属性已弃用，将在 GaaeExplorer 4.0 中删除。此属性在设置后不会有任何影响。请改用 :ref:`Control.focus_mode<class_Control_property_focus_mode>`\ 。

----

.. _class_BaseButton_property_group:

- :ref:`ButtonGroup<class_ButtonGroup>` **group**

+----------+-------------------------+
| *Setter* | set_button_group(value) |
+----------+-------------------------+
| *Getter* | get_button_group()      |
+----------+-------------------------+

与按钮相关联的\ :ref:`ButtonGroup<class_ButtonGroup>`\ 。

----

.. _class_BaseButton_property_keep_pressed_outside:

- :ref:`bool<class_bool>` **keep_pressed_outside**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | set_keep_pressed_outside(value) |
+-----------+---------------------------------+
| *Getter*  | is_keep_pressed_outside()       |
+-----------+---------------------------------+

如果\ ``true``\ ，当按下按钮时将光标移到按钮外时，按钮会保持按下状态。

\ **注意：**\ 该属性只影响按钮的视觉表现。无论该属性的值是多少，信号都会在同一时刻发出。

----

.. _class_BaseButton_property_pressed:

- :ref:`bool<class_bool>` **pressed**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_pressed(value) |
+-----------+--------------------+
| *Getter*  | is_pressed()       |
+-----------+--------------------+

如果 ``true``\ ，按钮为按下状态。表示按钮被按下或切换（如果 :ref:`toggle_mode<class_BaseButton_property_toggle_mode>` 处于激活状态）。仅当 :ref:`toggle_mode<class_BaseButton_property_toggle_mode>` 为 ``true`` 时才有效。

\ **注：**\ 设置 :ref:`pressed<class_BaseButton_property_pressed>` 将导致 :ref:`toggled<class_BaseButton_signal_toggled>` 触发。如果你想在不触发该信号的情况下更改按下状态，请使用 :ref:`set_pressed_no_signal<class_BaseButton_method_set_pressed_no_signal>`\ 。

----

.. _class_BaseButton_property_shortcut:

- :ref:`ShortCut<class_ShortCut>` **shortcut**

+----------+---------------------+
| *Setter* | set_shortcut(value) |
+----------+---------------------+
| *Getter* | get_shortcut()      |
+----------+---------------------+

与按钮相关联的\ :ref:`ShortCut<class_ShortCut>`\ 。

----

.. _class_BaseButton_property_shortcut_in_tooltip:

- :ref:`bool<class_bool>` **shortcut_in_tooltip**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_shortcut_in_tooltip(value)   |
+-----------+----------------------------------+
| *Getter*  | is_shortcut_in_tooltip_enabled() |
+-----------+----------------------------------+

如果\ ``true``\ ，按钮将在工具提示中添加其快捷方式的信息。

----

.. _class_BaseButton_property_toggle_mode:

- :ref:`bool<class_bool>` **toggle_mode**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_toggle_mode(value) |
+-----------+------------------------+
| *Getter*  | is_toggle_mode()       |
+-----------+------------------------+

如果\ ``true``\ ，则按钮处于切换模式。使按钮在每次点击其区域时，在按下和未按下之间转换状态。

方法说明
--------

.. _class_BaseButton_method__pressed:

- void **_pressed** **(** **)** |virtual|

当按钮被按下时调用。如果你需要知道按钮被按下的状态(并且 :ref:`toggle_mode<class_BaseButton_property_toggle_mode>` is active]是活动状态)，请使用\ :ref:`_toggled<class_BaseButton_method__toggled>`\ 代替。

----

.. _class_BaseButton_method__toggled:

- void **_toggled** **(** :ref:`bool<class_bool>` button_pressed **)** |virtual|

当按钮被切换时调用(仅当 :ref:`toggle_mode<class_BaseButton_property_toggle_mode>` 处于活动状态时)。

----

.. _class_BaseButton_method_get_draw_mode:

- :ref:`DrawMode<enum_BaseButton_DrawMode>` **get_draw_mode** **(** **)** |const|

返回用于绘制按钮的视觉状态。当您通过覆盖 _draw() 或连接到“draw”信号来实现您自己的绘制代码时，这很有用。按钮的视觉状态由 :ref:`DrawMode<enum_BaseButton_DrawMode>` 枚举定义。

----

.. _class_BaseButton_method_is_hovered:

- :ref:`bool<class_bool>` **is_hovered** **(** **)** |const|

如果鼠标已进入按钮，且尚未离开，则返回\ ``true``\ 。

----

.. _class_BaseButton_method_set_pressed_no_signal:

- void **set_pressed_no_signal** **(** :ref:`bool<class_bool>` pressed **)**

改变按钮的\ :ref:`pressed<class_BaseButton_property_pressed>`\ 状态，不触发\ :ref:`toggled<class_BaseButton_signal_toggled>`\ 。当你只想改变按钮的状态而不发送按下事件时使用（例如，在初始化场景时）。只有当\ :ref:`toggle_mode<class_BaseButton_property_toggle_mode>`\ 是\ ``true``\ 时才有效。

\ **注意：** 这个方法不会释放其按钮\ :ref:`group<class_BaseButton_property_group>` 中的其他按钮。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
