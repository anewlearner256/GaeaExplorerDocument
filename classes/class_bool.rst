:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the bool.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_bool:

bool
====

布尔型内置型。

描述
----

布尔是内置类型。有两个布尔值。\ ``true``\ 和\ ``false``\ 。你可以把它想象成有开或关状态的开关（1或0）。布尔在编程中用于条件语句的逻辑，如\ ``if``\ 语句。

布尔可以直接用于\ ``if``\ 语句中。下面的代码在\ ``if can_shoot:``\ 行中演示了这一点。你不需要使用\ ``==true``\ ，你只需要\ ``if can_shoot:``\ 。同样地，使用\ ``if not can_shoot:``\ 而不是\ ``== false``\ 。

::

    var can_shoot = true
    
    func shoot():
        if can_shoot:
            pass # Perform shooting actions here.

下面的代码只有在两个条件都满足的情况下才会产生子弹：动作“shoot”被按下，并且如果\ ``can_shoot``\ 是\ ``true``\ 。

\ **注意：**\ ``Input.is_action_pressed("shoot")``\ 也是一个布尔值，当“shoot”被按下时为\ ``true``\ ，当“shoot”没有被按下时为\ ``false``\ 。

::

    var can_shoot = true
    
    func shoot():
        if can_shoot and Input.is_action_pressed("shoot"):
            create_bullet()

下面的代码将把\ ``can_shoot``\ 设置为\ ``false``\ 并启动一个定时器。这将阻止玩家射击，直到定时器用完。然后\ ``can_shoot``\ 设置为\ ``true``\ ，再次允许玩家进行射击。

::

    var can_shoot = true
    onready var cool_down = $CoolDownTimer
    
    func shoot():
        if can_shoot and Input.is_action_pressed("shoot"):
            create_bullet()
            can_shoot = false
            cool_down.start()
    
    func _on_CoolDownTimer_timeout():
        can_shoot = true

方法
----

+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`int<class_int>` from **)**       |
+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`float<class_float>` from **)**   |
+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`String<class_String>` from **)** |
+-------------------------+----------------------------------------------------------------------------------+

方法说明
--------

.. _class_bool_method_bool:

- :ref:`bool<class_bool>` **bool** **(** :ref:`int<class_int>` from **)**

将 :ref:`int<class_int>` 值转换为布尔值，传入 ``0`` 时，本方法将返回 ``false``\ ，对于所有其他整数，本方法将返回 ``true``\ 。

----

- :ref:`bool<class_bool>` **bool** **(** :ref:`float<class_float>` from **)**

将 :ref:`float<class_float>` 值转换为布尔值，如果传入 ``0.0``\ ，本方法将返回 ``false``\ ，对于其他所有的浮点数，本方法将返回 ``true``\ 。

----

- :ref:`bool<class_bool>` **bool** **(** :ref:`String<class_String>` from **)**

将 :ref:`String<class_String>` 值转换为布尔值，如果传入 ``""``\ ，本方法将返回 ``false``\ ，对于所有非空字符串，本方法将返回 ``true``\ 。

示例：\ ``bool("False")`` 返回 ``true``\ ，\ ``bool("")`` 返回 ``false``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
