:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the NavigationMesh.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_NavigationMesh:

NavigationMesh
==============

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

用于模拟可步行区域和障碍物的网格。

描述
----

导航网格是多边形的集合，用于定义环境中的哪些区域是可遍历的，以帮助代理在复杂的空间中寻路。

教程
----

- `3D Navmesh Demo <https://godotengine.org/asset-library/asset/124>`__

属性
----

+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`agent/height<class_NavigationMesh_property_agent/height>`                                                               | ``2.0``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`agent/max_climb<class_NavigationMesh_property_agent/max_climb>`                                                         | ``0.9``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`agent/max_slope<class_NavigationMesh_property_agent/max_slope>`                                                         | ``45.0``  |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`agent/radius<class_NavigationMesh_property_agent/radius>`                                                               | ``0.6``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`cell/height<class_NavigationMesh_property_cell/height>`                                                                 | ``0.2``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`cell/size<class_NavigationMesh_property_cell/size>`                                                                     | ``0.3``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`detail/sample_distance<class_NavigationMesh_property_detail/sample_distance>`                                           | ``6.0``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`detail/sample_max_error<class_NavigationMesh_property_detail/sample_max_error>`                                         | ``1.0``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`edge/max_error<class_NavigationMesh_property_edge/max_error>`                                                           | ``1.3``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`edge/max_length<class_NavigationMesh_property_edge/max_length>`                                                         | ``12.0``  |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                             | :ref:`filter/filter_walkable_low_height_spans<class_NavigationMesh_property_filter/filter_walkable_low_height_spans>`         | ``false`` |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                             | :ref:`filter/ledge_spans<class_NavigationMesh_property_filter/ledge_spans>`                                                   | ``false`` |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                             | :ref:`filter/low_hanging_obstacles<class_NavigationMesh_property_filter/low_hanging_obstacles>`                               | ``false`` |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                                               | :ref:`geometry/collision_mask<class_NavigationMesh_property_geometry/collision_mask>`                                         |           |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`ParsedGeometryType<enum_NavigationMesh_ParsedGeometryType>`   | :ref:`geometry/parsed_geometry_type<class_NavigationMesh_property_geometry/parsed_geometry_type>`                             | ``0``     |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`SourceGeometryMode<enum_NavigationMesh_SourceGeometryMode>`   | :ref:`geometry/source_geometry_mode<class_NavigationMesh_property_geometry/source_geometry_mode>`                             | ``0``     |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`String<class_String>`                                         | :ref:`geometry/source_group_name<class_NavigationMesh_property_geometry/source_group_name>`                                   |           |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`polygon/verts_per_poly<class_NavigationMesh_property_polygon/verts_per_poly>`                                           | ``6.0``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`region/merge_size<class_NavigationMesh_property_region/merge_size>`                                                     | ``20.0``  |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`                                           | :ref:`region/min_size<class_NavigationMesh_property_region/min_size>`                                                         | ``8.0``   |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`SamplePartitionType<enum_NavigationMesh_SamplePartitionType>` | :ref:`sample_partition_type/sample_partition_type<class_NavigationMesh_property_sample_partition_type/sample_partition_type>` | ``0``     |
+---------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+-----------+

方法
----

+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`add_polygon<class_NavigationMesh_method_add_polygon>` **(** :ref:`PoolIntArray<class_PoolIntArray>` polygon **)**                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`clear_polygons<class_NavigationMesh_method_clear_polygons>` **(** **)**                                                                          |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`create_from_mesh<class_NavigationMesh_method_create_from_mesh>` **(** :ref:`Mesh<class_Mesh>` mesh **)**                                         |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`get_collision_mask_bit<class_NavigationMesh_method_get_collision_mask_bit>` **(** :ref:`int<class_int>` bit **)** |const|                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`         | :ref:`get_polygon<class_NavigationMesh_method_get_polygon>` **(** :ref:`int<class_int>` idx **)**                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_polygon_count<class_NavigationMesh_method_get_polygon_count>` **(** **)** |const|                                                            |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`get_vertices<class_NavigationMesh_method_get_vertices>` **(** **)** |const|                                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`set_collision_mask_bit<class_NavigationMesh_method_set_collision_mask_bit>` **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)** |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`set_vertices<class_NavigationMesh_method_set_vertices>` **(** :ref:`PoolVector3Array<class_PoolVector3Array>` vertices **)**                     |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_NavigationMesh_SamplePartitionType:

.. _class_NavigationMesh_constant_SAMPLE_PARTITION_WATERSHED:

.. _class_NavigationMesh_constant_SAMPLE_PARTITION_MONOTONE:

.. _class_NavigationMesh_constant_SAMPLE_PARTITION_LAYERS:

.. _class_NavigationMesh_constant_SAMPLE_PARTITION_MAX:

enum **SamplePartitionType**:

- **SAMPLE_PARTITION_WATERSHED** = **0** --- 分水岭分区。如果您预先计算导航网格，通常是最佳选择，如果您有大的开放区域，请使用它。

- **SAMPLE_PARTITION_MONOTONE** = **1** --- 单调分区。如果您想要快速生成导航网格，请使用此选项。

- **SAMPLE_PARTITION_LAYERS** = **2** --- 层分区。用于具有中小型瓷砖的平铺导航网格的不错选择。

- **SAMPLE_PARTITION_MAX** = **3** --- 表示\ :ref:`SamplePartitionType<enum_NavigationMesh_SamplePartitionType>`\ 枚举的大小。

----

.. _enum_NavigationMesh_ParsedGeometryType:

.. _class_NavigationMesh_constant_PARSED_GEOMETRY_MESH_INSTANCES:

.. _class_NavigationMesh_constant_PARSED_GEOMETRY_STATIC_COLLIDERS:

.. _class_NavigationMesh_constant_PARSED_GEOMETRY_BOTH:

.. _class_NavigationMesh_constant_PARSED_GEOMETRY_MAX:

enum **ParsedGeometryType**:

- **PARSED_GEOMETRY_MESH_INSTANCES** = **0** --- 将网格实例解析为几何体。这包括 :ref:`MeshInstance<class_MeshInstance>`\ 、\ :ref:`CSGShape<class_CSGShape>` 和 :ref:`GridMap<class_GridMap>` 节点。

- **PARSED_GEOMETRY_STATIC_COLLIDERS** = **1** --- 将 :ref:`StaticBody<class_StaticBody>` 碰撞器解析为几何体。碰撞器应位于 :ref:`geometry/collision_mask<class_NavigationMesh_property_geometry/collision_mask>` 指定的任何层中。

- **PARSED_GEOMETRY_BOTH** = **2** --- :ref:`PARSED_GEOMETRY_MESH_INSTANCES<class_NavigationMesh_constant_PARSED_GEOMETRY_MESH_INSTANCES>` 和 :ref:`PARSED_GEOMETRY_STATIC_COLLIDERS<class_NavigationMesh_constant_PARSED_GEOMETRY_STATIC_COLLIDERS>`.

- **PARSED_GEOMETRY_MAX** = **3** --- 表示\ :ref:`ParsedGeometryType<enum_NavigationMesh_ParsedGeometryType>`\ 枚举的大小。

----

.. _enum_NavigationMesh_SourceGeometryMode:

.. _class_NavigationMesh_constant_SOURCE_GEOMETRY_NAVMESH_CHILDREN:

.. _class_NavigationMesh_constant_SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN:

.. _class_NavigationMesh_constant_SOURCE_GEOMETRY_GROUPS_EXPLICIT:

.. _class_NavigationMesh_constant_SOURCE_GEOMETRY_MAX:

enum **SourceGeometryMode**:

- **SOURCE_GEOMETRY_NAVMESH_CHILDREN** = **0** --- 递归扫描 :ref:`NavigationMeshInstance<class_NavigationMeshInstance>` 的子节点以获取几何体。

- **SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN** = **1** --- 以递归方式扫描组中的节点及其子节点以获取几何图形。该组由 :ref:`geometry/source_group_name<class_NavigationMesh_property_geometry/source_group_name>` 指定。

- **SOURCE_GEOMETRY_GROUPS_EXPLICIT** = **2** --- 使用一个组中的节点进行几何运算。该组由\ :ref:`geometry/source_group_name<class_NavigationMesh_property_geometry/source_group_name>`\ 指定。

- **SOURCE_GEOMETRY_MAX** = **3** --- 表示\ :ref:`SourceGeometryMode<enum_NavigationMesh_SourceGeometryMode>`\ 枚举的大小。

属性说明
--------

.. _class_NavigationMesh_property_agent/height:

- :ref:`float<class_float>` **agent/height**

+-----------+-------------------------+
| *Default* | ``2.0``                 |
+-----------+-------------------------+
| *Setter*  | set_agent_height(value) |
+-----------+-------------------------+
| *Getter*  | get_agent_height()      |
+-----------+-------------------------+

地板到天花板的最小高度，仍然允许被认为是可行走的地板。

\ **注意：**\ 烘焙时，这个值会向上取整到最接近的\ :ref:`cell/height<class_NavigationMesh_property_cell/height>`\ 的倍数。

----

.. _class_NavigationMesh_property_agent/max_climb:

- :ref:`float<class_float>` **agent/max_climb**

+-----------+----------------------------+
| *Default* | ``0.9``                    |
+-----------+----------------------------+
| *Setter*  | set_agent_max_climb(value) |
+-----------+----------------------------+
| *Getter*  | get_agent_max_climb()      |
+-----------+----------------------------+

被认为仍可穿越的最小墙壁高度。

\ **注意：**\ 烘焙时，该值将向下舍入到最接近的\ :ref:`cell/height<class_NavigationMesh_property_cell/height>`\ 的倍数。

----

.. _class_NavigationMesh_property_agent/max_slope:

- :ref:`float<class_float>` **agent/max_slope**

+-----------+----------------------------+
| *Default* | ``45.0``                   |
+-----------+----------------------------+
| *Setter*  | set_agent_max_slope(value) |
+-----------+----------------------------+
| *Getter*  | get_agent_max_slope()      |
+-----------+----------------------------+

认为可行走的最大坡度，单位是度。

----

.. _class_NavigationMesh_property_agent/radius:

- :ref:`float<class_float>` **agent/radius**

+-----------+-------------------------+
| *Default* | ``0.6``                 |
+-----------+-------------------------+
| *Setter*  | set_agent_radius(value) |
+-----------+-------------------------+
| *Getter*  | get_agent_radius()      |
+-----------+-------------------------+

侵蚀/缩小远离障碍物的高度场的可行走区域距离。

\ **注意：**\ 烘焙时，这个值会向上取整到最接近的\ :ref:`cell/size<class_NavigationMesh_property_cell/size>`\ 的倍数。

----

.. _class_NavigationMesh_property_cell/height:

- :ref:`float<class_float>` **cell/height**

+-----------+------------------------+
| *Default* | ``0.2``                |
+-----------+------------------------+
| *Setter*  | set_cell_height(value) |
+-----------+------------------------+
| *Getter*  | get_cell_height()      |
+-----------+------------------------+

用于字段Y轴单元的尺寸。

----

.. _class_NavigationMesh_property_cell/size:

- :ref:`float<class_float>` **cell/size**

+-----------+----------------------+
| *Default* | ``0.3``              |
+-----------+----------------------+
| *Setter*  | set_cell_size(value) |
+-----------+----------------------+
| *Getter*  | get_cell_size()      |
+-----------+----------------------+

用于字段的XZ平面单元尺寸。

----

.. _class_NavigationMesh_property_detail/sample_distance:

- :ref:`float<class_float>` **detail/sample_distance**

+-----------+-----------------------------------+
| *Default* | ``6.0``                           |
+-----------+-----------------------------------+
| *Setter*  | set_detail_sample_distance(value) |
+-----------+-----------------------------------+
| *Getter*  | get_detail_sample_distance()      |
+-----------+-----------------------------------+

生成细分网格时使用的采样距离，以单元为单位。

----

.. _class_NavigationMesh_property_detail/sample_max_error:

- :ref:`float<class_float>` **detail/sample_max_error**

+-----------+------------------------------------+
| *Default* | ``1.0``                            |
+-----------+------------------------------------+
| *Setter*  | set_detail_sample_max_error(value) |
+-----------+------------------------------------+
| *Getter*  | get_detail_sample_max_error()      |
+-----------+------------------------------------+

细节网格表面应偏离高度场的最大距离，以单元格为单位。

----

.. _class_NavigationMesh_property_edge/max_error:

- :ref:`float<class_float>` **edge/max_error**

+-----------+---------------------------+
| *Default* | ``1.3``                   |
+-----------+---------------------------+
| *Setter*  | set_edge_max_error(value) |
+-----------+---------------------------+
| *Getter*  | get_edge_max_error()      |
+-----------+---------------------------+

简化轮廓的边界边缘应偏离原始原始轮廓的最大距离。

----

.. _class_NavigationMesh_property_edge/max_length:

- :ref:`float<class_float>` **edge/max_length**

+-----------+----------------------------+
| *Default* | ``12.0``                   |
+-----------+----------------------------+
| *Setter*  | set_edge_max_length(value) |
+-----------+----------------------------+
| *Getter*  | get_edge_max_length()      |
+-----------+----------------------------+

沿网格边界的轮廓的最大允许长度。

\ **注意：**\ 烘焙时，这个值会向上取整到最接近的\ :ref:`cell/size<class_NavigationMesh_property_cell/size>`\ 的倍数。

----

.. _class_NavigationMesh_property_filter/filter_walkable_low_height_spans:

- :ref:`bool<class_bool>` **filter/filter_walkable_low_height_spans**

+-----------+---------------------------------------------+
| *Default* | ``false``                                   |
+-----------+---------------------------------------------+
| *Setter*  | set_filter_walkable_low_height_spans(value) |
+-----------+---------------------------------------------+
| *Getter*  | get_filter_walkable_low_height_spans()      |
+-----------+---------------------------------------------+

如果 ``true``\ ，如果跨度上方的间隙小于 :ref:`agent/height<class_NavigationMesh_property_agent/height>`\ ，则将可行走范围标记为不可行走。

----

.. _class_NavigationMesh_property_filter/ledge_spans:

- :ref:`bool<class_bool>` **filter/ledge_spans**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_filter_ledge_spans(value) |
+-----------+-------------------------------+
| *Getter*  | get_filter_ledge_spans()      |
+-----------+-------------------------------+

如果\ ``true``\ ，标记边缘间的跨度为不可行走。

----

.. _class_NavigationMesh_property_filter/low_hanging_obstacles:

- :ref:`bool<class_bool>` **filter/low_hanging_obstacles**

+-----------+-----------------------------------------+
| *Default* | ``false``                               |
+-----------+-----------------------------------------+
| *Setter*  | set_filter_low_hanging_obstacles(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_filter_low_hanging_obstacles()      |
+-----------+-----------------------------------------+

如果 ``true``\ ，如果它们的最大值在可行走邻域的 :ref:`agent/max_climb<class_NavigationMesh_property_agent/max_climb>` 内，则将不可行走范围标记为可行走。

----

.. _class_NavigationMesh_property_geometry/collision_mask:

- :ref:`int<class_int>` **geometry/collision_mask**

+----------+---------------------------+
| *Setter* | set_collision_mask(value) |
+----------+---------------------------+
| *Getter* | get_collision_mask()      |
+----------+---------------------------+

用于扫描静态碰撞的物理层。

仅在\ :ref:`geometry/parsed_geometry_type<class_NavigationMesh_property_geometry/parsed_geometry_type>`\ 是\ :ref:`PARSED_GEOMETRY_STATIC_COLLIDERS<class_NavigationMesh_constant_PARSED_GEOMETRY_STATIC_COLLIDERS>`\ 或\ :ref:`PARSED_GEOMETRY_BOTH<class_NavigationMesh_constant_PARSED_GEOMETRY_BOTH>`\ 时才使用。

----

.. _class_NavigationMesh_property_geometry/parsed_geometry_type:

- :ref:`ParsedGeometryType<enum_NavigationMesh_ParsedGeometryType>` **geometry/parsed_geometry_type**

+-----------+---------------------------------+
| *Default* | ``0``                           |
+-----------+---------------------------------+
| *Setter*  | set_parsed_geometry_type(value) |
+-----------+---------------------------------+
| *Getter*  | get_parsed_geometry_type()      |
+-----------+---------------------------------+

决定哪种类型的节点可解析为几何图形。参阅\ :ref:`ParsedGeometryType<enum_NavigationMesh_ParsedGeometryType>`\ 。

----

.. _class_NavigationMesh_property_geometry/source_geometry_mode:

- :ref:`SourceGeometryMode<enum_NavigationMesh_SourceGeometryMode>` **geometry/source_geometry_mode**

+-----------+---------------------------------+
| *Default* | ``0``                           |
+-----------+---------------------------------+
| *Setter*  | set_source_geometry_mode(value) |
+-----------+---------------------------------+
| *Getter*  | get_source_geometry_mode()      |
+-----------+---------------------------------+

烘焙时使用的几何体的源。参阅\ :ref:`SourceGeometryMode<enum_NavigationMesh_SourceGeometryMode>`\ 。

----

.. _class_NavigationMesh_property_geometry/source_group_name:

- :ref:`String<class_String>` **geometry/source_group_name**

+----------+------------------------------+
| *Setter* | set_source_group_name(value) |
+----------+------------------------------+
| *Getter* | get_source_group_name()      |
+----------+------------------------------+

要扫描的几何体组的名称。

只有当\ :ref:`geometry/source_geometry_mode<class_NavigationMesh_property_geometry/source_geometry_mode>`\ 是\ :ref:`SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN<class_NavigationMesh_constant_SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN>`\ 或\ :ref:`SOURCE_GEOMETRY_GROUPS_EXPLICIT<class_NavigationMesh_constant_SOURCE_GEOMETRY_GROUPS_EXPLICIT>`\ 时才使用。

----

.. _class_NavigationMesh_property_polygon/verts_per_poly:

- :ref:`float<class_float>` **polygon/verts_per_poly**

+-----------+---------------------------+
| *Default* | ``6.0``                   |
+-----------+---------------------------+
| *Setter*  | set_verts_per_poly(value) |
+-----------+---------------------------+
| *Getter*  | get_verts_per_poly()      |
+-----------+---------------------------+

在轮廓到多边形转换过程中生成的多边形允许的最大顶点数。

----

.. _class_NavigationMesh_property_region/merge_size:

- :ref:`float<class_float>` **region/merge_size**

+-----------+------------------------------+
| *Default* | ``20.0``                     |
+-----------+------------------------------+
| *Setter*  | set_region_merge_size(value) |
+-----------+------------------------------+
| *Getter*  | get_region_merge_size()      |
+-----------+------------------------------+

如果可能的话，任何小于这个尺寸的区域将与较大的区域合并。

\ **注意：**\ 这个值将被平方来计算单元格的数量。例如，一个20的值将把单元格的数量设为400。

----

.. _class_NavigationMesh_property_region/min_size:

- :ref:`float<class_float>` **region/min_size**

+-----------+----------------------------+
| *Default* | ``8.0``                    |
+-----------+----------------------------+
| *Setter*  | set_region_min_size(value) |
+-----------+----------------------------+
| *Getter*  | get_region_min_size()      |
+-----------+----------------------------+

一个区域被创建的最小尺寸。

\ **注意：**\ 该值将被平方，以计算出允许形成孤岛区域的最小单元数。例如，8的值将把单元格的数量设为64。

----

.. _class_NavigationMesh_property_sample_partition_type/sample_partition_type:

- :ref:`SamplePartitionType<enum_NavigationMesh_SamplePartitionType>` **sample_partition_type/sample_partition_type**

+-----------+----------------------------------+
| *Default* | ``0``                            |
+-----------+----------------------------------+
| *Setter*  | set_sample_partition_type(value) |
+-----------+----------------------------------+
| *Getter*  | get_sample_partition_type()      |
+-----------+----------------------------------+

创建导航网格polys单元的分割算法。参阅\ :ref:`SamplePartitionType<enum_NavigationMesh_SamplePartitionType>`\ 。

方法说明
--------

.. _class_NavigationMesh_method_add_polygon:

- void **add_polygon** **(** :ref:`PoolIntArray<class_PoolIntArray>` polygon **)**

使用调用\ :ref:`get_vertices<class_NavigationMesh_method_get_vertices>`\ 得到的顶点的索引添加一个多边形。

----

.. _class_NavigationMesh_method_clear_polygons:

- void **clear_polygons** **(** **)**

清除多边形数组，但不清除顶点数组。

----

.. _class_NavigationMesh_method_create_from_mesh:

- void **create_from_mesh** **(** :ref:`Mesh<class_Mesh>` mesh **)**

通过根据 :ref:`Mesh<class_Mesh>` 设置顶点和索引来初始化导航网格。

----

.. _class_NavigationMesh_method_get_collision_mask_bit:

- :ref:`bool<class_bool>` **get_collision_mask_bit** **(** :ref:`int<class_int>` bit **)** |const|

返回\ :ref:`geometry/collision_mask<class_NavigationMesh_property_geometry/collision_mask>`\ 的指定\ ``bit``\ 是否被设置。

----

.. _class_NavigationMesh_method_get_polygon:

- :ref:`PoolIntArray<class_PoolIntArray>` **get_polygon** **(** :ref:`int<class_int>` idx **)**

返回包含创建的多边形顶点索引的\ :ref:`PoolIntArray<class_PoolIntArray>`\ 。

----

.. _class_NavigationMesh_method_get_polygon_count:

- :ref:`int<class_int>` **get_polygon_count** **(** **)** |const|

返回导航网格中的多边形数量。

----

.. _class_NavigationMesh_method_get_vertices:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **get_vertices** **(** **)** |const|

返回包含用于创建多边形的所有顶点的\ :ref:`PoolVector3Array<class_PoolVector3Array>`\ 。

----

.. _class_NavigationMesh_method_set_collision_mask_bit:

- void **set_collision_mask_bit** **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)**

如果 ``value`` 为 ``true``\ ，则在 :ref:`geometry/collision_mask<class_NavigationMesh_property_geometry/collision_mask>` 中设置指定的 ``bit``\ 。

如果 ``value`` 为 ``false``\ ，则清除 :ref:`geometry/collision_mask<class_NavigationMesh_property_geometry/collision_mask>` 中指定的 ``bit``\ 。

----

.. _class_NavigationMesh_method_set_vertices:

- void **set_vertices** **(** :ref:`PoolVector3Array<class_PoolVector3Array>` vertices **)**

设置顶点，然后使用\ :ref:`add_polygon<class_NavigationMesh_method_add_polygon>`\ 方法创建多边形。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
