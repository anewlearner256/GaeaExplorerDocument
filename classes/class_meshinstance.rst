:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the MeshInstance.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MeshInstance:

MeshInstance
============

**Inherits:** :ref:`GeometryInstance<class_GeometryInstance>` **<** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`CullInstance<class_CullInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`SoftBody<class_SoftBody>`

网格实例与场景相结合的节点。

描述
----

MeshInstance是一个节点，它获取\ :ref:`Mesh<class_Mesh>`\ 资源并创建一个实例，将其添加到当前场景中。这是最常被用来渲染3D几何体的类，这可以在很多地方使用\ :ref:`Mesh<class_Mesh>`\ 实例，它允许重复使用几何体并节省资源。当\ :ref:`Mesh<class_Mesh>`\ 必须在很近的地方被实例化超过数千次时，可以考虑在\ :ref:`MultiMeshInstance<class_MultiMeshInstance>`\ 中使用\ :ref:`MultiMesh<class_MultiMesh>`\ 来代替。

教程
----

- `3D Material Testers Demo <https://godotengine.org/asset-library/asset/123>`__

- `3D Kinematic Character Demo <https://godotengine.org/asset-library/asset/126>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

属性
----

+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`Mesh<class_Mesh>`         | :ref:`mesh<class_MeshInstance_property_mesh>`                                                               |                    |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`NodePath<class_NodePath>` | :ref:`skeleton<class_MeshInstance_property_skeleton>`                                                       | ``NodePath("..")`` |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`Skin<class_Skin>`         | :ref:`skin<class_MeshInstance_property_skin>`                                                               |                    |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`bool<class_bool>`         | :ref:`software_skinning_transform_normals<class_MeshInstance_property_software_skinning_transform_normals>` | ``true``           |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+

方法
----

+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_convex_collision<class_MeshInstance_method_create_convex_collision>` **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)** |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_debug_tangents<class_MeshInstance_method_create_debug_tangents>` **(** **)**                                                                                |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_multiple_convex_collisions<class_MeshInstance_method_create_multiple_convex_collisions>` **(** **)**                                                        |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_trimesh_collision<class_MeshInstance_method_create_trimesh_collision>` **(** **)**                                                                          |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Material<class_Material>` | :ref:`get_active_material<class_MeshInstance_method_get_active_material>` **(** :ref:`int<class_int>` surface **)** |const|                                              |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Material<class_Material>` | :ref:`get_surface_material<class_MeshInstance_method_get_surface_material>` **(** :ref:`int<class_int>` surface **)** |const|                                            |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`get_surface_material_count<class_MeshInstance_method_get_surface_material_count>` **(** **)** |const|                                                              |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`set_surface_material<class_MeshInstance_method_set_surface_material>` **(** :ref:`int<class_int>` surface, :ref:`Material<class_Material>` material **)**          |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_MeshInstance_property_mesh:

- :ref:`Mesh<class_Mesh>` **mesh**

+----------+-----------------+
| *Setter* | set_mesh(value) |
+----------+-----------------+
| *Getter* | get_mesh()      |
+----------+-----------------+

该实例的\ :ref:`Mesh<class_Mesh>`\ 资源。

----

.. _class_MeshInstance_property_skeleton:

- :ref:`NodePath<class_NodePath>` **skeleton**

+-----------+--------------------------+
| *Default* | ``NodePath("..")``       |
+-----------+--------------------------+
| *Setter*  | set_skeleton_path(value) |
+-----------+--------------------------+
| *Getter*  | get_skeleton_path()      |
+-----------+--------------------------+

与实例相关联\ :ref:`NodePath<class_NodePath>`\ 的\ :ref:`Skeleton<class_Skeleton>`\ 。

----

.. _class_MeshInstance_property_skin:

- :ref:`Skin<class_Skin>` **skin**

+----------+-----------------+
| *Setter* | set_skin(value) |
+----------+-----------------+
| *Getter* | get_skin()      |
+----------+-----------------+

设置此实例要使用的蒙皮。

----

.. _class_MeshInstance_property_software_skinning_transform_normals:

- :ref:`bool<class_bool>` **software_skinning_transform_normals**

+-----------+--------------------------------------------------+
| *Default* | ``true``                                         |
+-----------+--------------------------------------------------+
| *Setter*  | set_software_skinning_transform_normals(value)   |
+-----------+--------------------------------------------------+
| *Getter*  | is_software_skinning_transform_normals_enabled() |
+-----------+--------------------------------------------------+

如果\ ``true``\ ，当使用软件蒙皮时，法线会被转换。当不需要法线时，设置为\ ``false``\ 以获得更好的性能。

关于如何启用软件蒙皮的细节，参阅\ :ref:`ProjectSettings.rendering/quality/skinning/software_skinning_fallback<class_ProjectSettings_property_rendering/quality/skinning/software_skinning_fallback>`\ 。

方法说明
--------

.. _class_MeshInstance_method_create_convex_collision:

- void **create_convex_collision** **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)**

这个助手创建\ :ref:`StaticBody<class_StaticBody>`\ 子节点，该节点具有从网格几何形状计算的\ :ref:`ConvexPolygonShape<class_ConvexPolygonShape>`\ 碰撞形状。其主要用于测试。

如果\ ``clean``\ 是\ ``true``\ （默认），重复的顶点和内部顶点会被自动移除。可以把它设置为\ ``false``\ ，以便在不需要的情况下使这个过程更快。

如果\ ``simplify``\ 是\ ``true``\ ，可以进一步简化几何体以减少顶点的数量。默认情况下是禁用的。

----

.. _class_MeshInstance_method_create_debug_tangents:

- void **create_debug_tangents** **(** **)**

这个辅助工具创建\ ``MeshInstance``\ 子节点，在每个顶点都有根据网格几何形状计算的辅助线框。其主要用于测试。

----

.. _class_MeshInstance_method_create_multiple_convex_collisions:

- void **create_multiple_convex_collisions** **(** **)**

这个助手创建\ :ref:`StaticBody<class_StaticBody>`\ 子节点，该节点具有多个\ :ref:`ConvexPolygonShape<class_ConvexPolygonShape>`\ 碰撞形状，这些碰撞形状是通过凸面分解从网格几何形状计算出来的。其主要用于测试。

----

.. _class_MeshInstance_method_create_trimesh_collision:

- void **create_trimesh_collision** **(** **)**

这个助手创建\ :ref:`StaticBody<class_StaticBody>`\ 子节点，其碰撞形状是由网格的几何形状计算出来的\ :ref:`ConcavePolygonShape<class_ConcavePolygonShape>`\ ，其主要用于测试。

----

.. _class_MeshInstance_method_get_active_material:

- :ref:`Material<class_Material>` **get_active_material** **(** :ref:`int<class_int>` surface **)** |const|

返回\ :ref:`Mesh<class_Mesh>`\ 绘制时使用的\ :ref:`Material<class_Material>`\ 。这可以返回\ :ref:`GeometryInstance.material_override<class_GeometryInstance_property_material_override>`\ ，这个\ ``MeshInstance``\ 中定义的表面覆盖\ :ref:`Material<class_Material>`\ ，或者\ :ref:`Mesh<class_Mesh>`\ 中定义的表面\ :ref:`Material<class_Material>`\ 。例如，如果使用\ :ref:`GeometryInstance.material_override<class_GeometryInstance_property_material_override>`\ ，所有的表面都会返回覆盖的材质。

----

.. _class_MeshInstance_method_get_surface_material:

- :ref:`Material<class_Material>` **get_surface_material** **(** :ref:`int<class_int>` surface **)** |const|

返回\ :ref:`Mesh<class_Mesh>`\ 资源表面的\ :ref:`Material<class_Material>`\ 。

----

.. _class_MeshInstance_method_get_surface_material_count:

- :ref:`int<class_int>` **get_surface_material_count** **(** **)** |const|

返回表面材质的数量。

----

.. _class_MeshInstance_method_set_surface_material:

- void **set_surface_material** **(** :ref:`int<class_int>` surface, :ref:`Material<class_Material>` material **)**

为\ :ref:`Mesh<class_Mesh>`\ 资源的表面设置\ :ref:`Material<class_Material>`\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
