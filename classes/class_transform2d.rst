:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Transform2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Transform2D:

Transform2D
===========

2D 变换（2×3 矩阵）。

描述
----

用于 2D 线性变换的 2×3 矩阵（2 行 3 列），可以表示平移、旋转、缩放等变换。由三个 :ref:`Vector2<class_Vector2>` 值组成：\ :ref:`x<class_Transform2D_property_x>`\ 、\ :ref:`y<class_Transform2D_property_y>`\ 、\ :ref:`origin<class_Transform2D_property_origin>`\ 。

更多信息请阅读文档文章《矩阵和变换》。

教程
----

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Matrices and transforms <../tutorials/math/matrices_and_transforms>`

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

属性
----

+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`origin<class_Transform2D_property_origin>` | ``Vector2( 0, 0 )`` |
+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`x<class_Transform2D_property_x>`           | ``Vector2( 1, 0 )`` |
+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`y<class_Transform2D_property_y>`           | ``Vector2( 0, 1 )`` |
+-------------------------------+--------------------------------------------------+---------------------+

方法
----

+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`Transform<class_Transform>` from **)**                                                                           |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`Vector2<class_Vector2>` x_axis, :ref:`Vector2<class_Vector2>` y_axis, :ref:`Vector2<class_Vector2>` origin **)** |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`float<class_float>` rotation, :ref:`Vector2<class_Vector2>` position **)**                                       |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`affine_inverse<class_Transform2D_method_affine_inverse>` **(** **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`basis_xform<class_Transform2D_method_basis_xform>` **(** :ref:`Vector2<class_Vector2>` v **)**                                                                                  |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`basis_xform_inv<class_Transform2D_method_basis_xform_inv>` **(** :ref:`Vector2<class_Vector2>` v **)**                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`get_origin<class_Transform2D_method_get_origin>` **(** **)**                                                                                                                    |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`             | :ref:`get_rotation<class_Transform2D_method_get_rotation>` **(** **)**                                                                                                                |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`get_scale<class_Transform2D_method_get_scale>` **(** **)**                                                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`interpolate_with<class_Transform2D_method_interpolate_with>` **(** :ref:`Transform2D<class_Transform2D>` transform, :ref:`float<class_float>` weight **)**                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`inverse<class_Transform2D_method_inverse>` **(** **)**                                                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_equal_approx<class_Transform2D_method_is_equal_approx>` **(** :ref:`Transform2D<class_Transform2D>` transform **)**                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`orthonormalized<class_Transform2D_method_orthonormalized>` **(** **)**                                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`rotated<class_Transform2D_method_rotated>` **(** :ref:`float<class_float>` phi **)**                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`scaled<class_Transform2D_method_scaled>` **(** :ref:`Vector2<class_Vector2>` scale **)**                                                                                        |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`translated<class_Transform2D_method_translated>` **(** :ref:`Vector2<class_Vector2>` offset **)**                                                                               |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`xform<class_Transform2D_method_xform>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                              |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`xform_inv<class_Transform2D_method_xform_inv>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

常量
----

.. _class_Transform2D_constant_IDENTITY:

.. _class_Transform2D_constant_FLIP_X:

.. _class_Transform2D_constant_FLIP_Y:

- **IDENTITY** = **Transform2D( 1, 0, 0, 1, 0, 0 )** --- 没有应用平移、旋转、缩放的单位 ``Transform2D``\ 。当应用于其他数据结构时，\ :ref:`IDENTITY<class_Transform2D_constant_IDENTITY>` 不执行变换。

- **FLIP_X** = **Transform2D( -1, 0, 0, 1, 0, 0 )** --- 将沿 X 轴翻转的 ``Transform2D``\ 。

- **FLIP_Y** = **Transform2D( 1, 0, 0, -1, 0, 0 )** --- 将沿 Y 轴翻转的 ``Transform2D``\ 。

属性说明
--------

.. _class_Transform2D_property_origin:

- :ref:`Vector2<class_Vector2>` **origin**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+

原点向量（2 号列，即第 3 列）。相当于使用 ``2`` 进行数组索引。原点向量代表平移。

----

.. _class_Transform2D_property_x:

- :ref:`Vector2<class_Vector2>` **x**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 0 )`` |
+-----------+---------------------+

基本矩阵的X向量（第0列）。等效于数组索引\ ``0``\ 。

----

.. _class_Transform2D_property_y:

- :ref:`Vector2<class_Vector2>` **y**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 1 )`` |
+-----------+---------------------+

基础矩阵的Y向量（第1列）。相当于数组索引\ ``1``\ 。

方法说明
--------

.. _class_Transform2D_method_Transform2D:

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`Transform<class_Transform>` from **)**

从一个 3D :ref:`Transform<class_Transform>` 构建变换。

----

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`Vector2<class_Vector2>` x_axis, :ref:`Vector2<class_Vector2>` y_axis, :ref:`Vector2<class_Vector2>` origin **)**

从表示 :ref:`x<class_Transform2D_property_x>`\ 、\ :ref:`y<class_Transform2D_property_y>`\ 、\ :ref:`origin<class_Transform2D_property_origin>` 的 3 个 :ref:`Vector2<class_Vector2>`\ （三个列向量）构建变换。

----

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`float<class_float>` rotation, :ref:`Vector2<class_Vector2>` position **)**

从一个给定的角度（单位为弧度）和位置构造变换。

----

.. _class_Transform2D_method_affine_inverse:

- :ref:`Transform2D<class_Transform2D>` **affine_inverse** **(** **)**

返回变换的反值，假设变换是由旋转、缩放和平移组成的。

----

.. _class_Transform2D_method_basis_xform:

- :ref:`Vector2<class_Vector2>` **basis_xform** **(** :ref:`Vector2<class_Vector2>` v **)**

返回经过基础矩阵变换（相乘）的向量。

该方法不考虑平移（原点向量）。

----

.. _class_Transform2D_method_basis_xform_inv:

- :ref:`Vector2<class_Vector2>` **basis_xform_inv** **(** :ref:`Vector2<class_Vector2>` v **)**

返回经过逆基础矩阵变换（相乘）的向量。

该方法不考虑平移（原点向量）。

----

.. _class_Transform2D_method_get_origin:

- :ref:`Vector2<class_Vector2>` **get_origin** **(** **)**

返回变换的原点（平移）。

----

.. _class_Transform2D_method_get_rotation:

- :ref:`float<class_float>` **get_rotation** **(** **)**

返回变换的旋转（单位为弧度）。

----

.. _class_Transform2D_method_get_scale:

- :ref:`Vector2<class_Vector2>` **get_scale** **(** **)**

返回缩放。

----

.. _class_Transform2D_method_interpolate_with:

- :ref:`Transform2D<class_Transform2D>` **interpolate_with** **(** :ref:`Transform2D<class_Transform2D>` transform, :ref:`float<class_float>` weight **)**

返回在此变换和另一个变换之间通过给定的\ ``weight``\ 插值的变换，范围为0.0到1.0。

----

.. _class_Transform2D_method_inverse:

- :ref:`Transform2D<class_Transform2D>` **inverse** **(** **)**

返回变换的反值，假设该变换是由旋转和平移组成的（没有缩放，对有缩放的变换使用 :ref:`affine_inverse<class_Transform2D_method_affine_inverse>`\ ）。

----

.. _class_Transform2D_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Transform2D<class_Transform2D>` transform **)**

如果这个变换和\ ``transform``\ 近似相等，通过对每个分量调用\ ``is_equal_approx``\ ，而返回\ ``true``\ 。

----

.. _class_Transform2D_method_orthonormalized:

- :ref:`Transform2D<class_Transform2D>` **orthonormalized** **(** **)**

返回以正交，即90度，为基础的变换，以及归一化的轴向量，缩放为1或-1。

----

.. _class_Transform2D_method_rotated:

- :ref:`Transform2D<class_Transform2D>` **rotated** **(** :ref:`float<class_float>` phi **)**

使用矩阵乘法，将变换旋转给定的角度，即弧度。

----

.. _class_Transform2D_method_scaled:

- :ref:`Transform2D<class_Transform2D>` **scaled** **(** :ref:`Vector2<class_Vector2>` scale **)**

使用矩阵乘法，用给定的缩放系数来缩放变换。

----

.. _class_Transform2D_method_translated:

- :ref:`Transform2D<class_Transform2D>` **translated** **(** :ref:`Vector2<class_Vector2>` offset **)**

相对于变换的基础向量，将变换按给定的偏移量进行平移。

与\ :ref:`rotated<class_Transform2D_method_rotated>`\ 和\ :ref:`scaled<class_Transform2D_method_scaled>`\ 不同，它不使用矩阵乘法。

----

.. _class_Transform2D_method_xform:

- :ref:`Variant<class_Variant>` **xform** **(** :ref:`Variant<class_Variant>` v **)**

通过此变换对指定的\ :ref:`Vector2<class_Vector2>`\ 、\ :ref:`Rect2<class_Rect2>`\ 或\ :ref:`PoolVector2Array<class_PoolVector2Array>`\ 进行变换。

----

.. _class_Transform2D_method_xform_inv:

- :ref:`Variant<class_Variant>` **xform_inv** **(** :ref:`Variant<class_Variant>` v **)**

将给定的 :ref:`Vector2<class_Vector2>`\ 、\ :ref:`Rect2<class_Rect2>`\ 、\ :ref:`PoolVector2Array<class_PoolVector2Array>` 做该变换的逆变换，前提假设是该变换仅由旋转和平移构成（不包括缩放）。等价于调用该变换的 ``inverse().xform(v)``\ 。仿射变换（即包含缩放）请参阅 :ref:`affine_inverse<class_Transform2D_method_affine_inverse>` 方法。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
