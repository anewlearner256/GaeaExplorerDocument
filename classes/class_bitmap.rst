:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the BitMap.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_BitMap:

BitMap
======

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

布尔矩阵.

描述
----

布尔值二维数组，可以用来高效存储二进制矩阵（每个矩阵元素只占一个比特位），并使用自然的笛卡尔坐标查询数值。

方法
----

+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`create<class_BitMap_method_create>` **(** :ref:`Vector2<class_Vector2>` size **)**                                                                         |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`create_from_image_alpha<class_BitMap_method_create_from_image_alpha>` **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` threshold=0.1 **)** |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`get_bit<class_BitMap_method_get_bit>` **(** :ref:`Vector2<class_Vector2>` position **)** |const|                                                           |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_size<class_BitMap_method_get_size>` **(** **)** |const|                                                                                                |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_true_bit_count<class_BitMap_method_get_true_bit_count>` **(** **)** |const|                                                                            |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`grow_mask<class_BitMap_method_grow_mask>` **(** :ref:`int<class_int>` pixels, :ref:`Rect2<class_Rect2>` rect **)**                                         |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`     | :ref:`opaque_to_polygons<class_BitMap_method_opaque_to_polygons>` **(** :ref:`Rect2<class_Rect2>` rect, :ref:`float<class_float>` epsilon=2.0 **)** |const|      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_bit<class_BitMap_method_set_bit>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` bit **)**                                      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_bit_rect<class_BitMap_method_set_bit_rect>` **(** :ref:`Rect2<class_Rect2>` rect, :ref:`bool<class_bool>` bit **)**                                    |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_BitMap_method_create:

- void **create** **(** :ref:`Vector2<class_Vector2>` size **)**

创建一个指定尺寸的位图，用\ ``false``\ 填充。

----

.. _class_BitMap_method_create_from_image_alpha:

- void **create_from_image_alpha** **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` threshold=0.1 **)**

创建一个与给定图像尺寸相匹配的位图，如果图像在该位置的alpha值等于\ ``threshold``\ 或更小，则位图的每个元素都设置为\ ``false``\ ，其他情况下为\ ``true``\ 。

----

.. _class_BitMap_method_get_bit:

- :ref:`bool<class_bool>` **get_bit** **(** :ref:`Vector2<class_Vector2>` position **)** |const|

返回位图在指定位置的值。

----

.. _class_BitMap_method_get_size:

- :ref:`Vector2<class_Vector2>` **get_size** **(** **)** |const|

返回位图的尺寸。

----

.. _class_BitMap_method_get_true_bit_count:

- :ref:`int<class_int>` **get_true_bit_count** **(** **)** |const|

返回设置为\ ``true``\ 的位图元素的数量。

----

.. _class_BitMap_method_grow_mask:

- void **grow_mask** **(** :ref:`int<class_int>` pixels, :ref:`Rect2<class_Rect2>` rect **)**

对位图进行形态学膨胀或腐蚀操作。如果 ``pixels`` 为正，则对位图执行膨胀。如果 ``pixels`` 为负，则对位图执行腐蚀。\ ``rect`` 定义进行形态学操作的区域。位于 ``rect`` 之外的像素不会被 :ref:`grow_mask<class_BitMap_method_grow_mask>` 影响。

----

.. _class_BitMap_method_opaque_to_polygons:

- :ref:`Array<class_Array>` **opaque_to_polygons** **(** :ref:`Rect2<class_Rect2>` rect, :ref:`float<class_float>` epsilon=2.0 **)** |const|

----

.. _class_BitMap_method_set_bit:

- void **set_bit** **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` bit **)**

将位图中指定位置的元素设置为指定值。

----

.. _class_BitMap_method_set_bit_rect:

- void **set_bit_rect** **(** :ref:`Rect2<class_Rect2>` rect, :ref:`bool<class_bool>` bit **)**

将位图的矩形部分设置为指定值。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
