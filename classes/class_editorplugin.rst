:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the EditorPlugin.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorPlugin:

EditorPlugin
============

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

由编辑器用于扩展其功能。

描述
----

编辑器使用插件来扩展功能。最常见的插件类型是编辑给定的节点或资源类型、导入插件和导出插件。另请参阅\ :ref:`EditorScript<class_EditorScript>`\ 向编辑器添加函数。

教程
----

- :doc:`../tutorials/plugins/editor/index`

方法
----

+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_autoload_singleton<class_EditorPlugin_method_add_autoload_singleton>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` path **)**                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ToolButton<class_ToolButton>`                 | :ref:`add_control_to_bottom_panel<class_EditorPlugin_method_add_control_to_bottom_panel>` **(** :ref:`Control<class_Control>` control, :ref:`String<class_String>` title **)**                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_control_to_container<class_EditorPlugin_method_add_control_to_container>` **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_control_to_dock<class_EditorPlugin_method_add_control_to_dock>` **(** :ref:`DockSlot<enum_EditorPlugin_DockSlot>` slot, :ref:`Control<class_Control>` control **)**                                                          |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_custom_type<class_EditorPlugin_method_add_custom_type>` **(** :ref:`String<class_String>` type, :ref:`String<class_String>` base, :ref:`Script<class_Script>` script, :ref:`Texture<class_Texture>` icon **)**               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_export_plugin<class_EditorPlugin_method_add_export_plugin>` **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**                                                                                           |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_import_plugin<class_EditorPlugin_method_add_import_plugin>` **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**                                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_inspector_plugin<class_EditorPlugin_method_add_inspector_plugin>` **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**                                                                               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_scene_import_plugin<class_EditorPlugin_method_add_scene_import_plugin>` **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_spatial_gizmo_plugin<class_EditorPlugin_method_add_spatial_gizmo_plugin>` **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**                                                                 |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_tool_menu_item<class_EditorPlugin_method_add_tool_menu_item>` **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` handler, :ref:`String<class_String>` callback, :ref:`Variant<class_Variant>` ud=null **)** |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_tool_submenu_item<class_EditorPlugin_method_add_tool_submenu_item>` **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` submenu **)**                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`apply_changes<class_EditorPlugin_method_apply_changes>` **(** **)** |virtual|                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`build<class_EditorPlugin_method_build>` **(** **)** |virtual|                                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`clear<class_EditorPlugin_method_clear>` **(** **)** |virtual|                                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`disable_plugin<class_EditorPlugin_method_disable_plugin>` **(** **)** |virtual|                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`edit<class_EditorPlugin_method_edit>` **(** :ref:`Object<class_Object>` object **)** |virtual|                                                                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`enable_plugin<class_EditorPlugin_method_enable_plugin>` **(** **)** |virtual|                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_canvas_draw_over_viewport<class_EditorPlugin_method_forward_canvas_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** |virtual|                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_canvas_force_draw_over_viewport<class_EditorPlugin_method_forward_canvas_force_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** |virtual|                                                          |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`forward_canvas_gui_input<class_EditorPlugin_method_forward_canvas_gui_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_spatial_draw_over_viewport<class_EditorPlugin_method_forward_spatial_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** |virtual|                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_spatial_force_draw_over_viewport<class_EditorPlugin_method_forward_spatial_force_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** |virtual|                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>` **(** :ref:`Camera<class_Camera>` camera, :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                              |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>`       | :ref:`get_breakpoints<class_EditorPlugin_method_get_breakpoints>` **(** **)** |virtual|                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`EditorInterface<class_EditorInterface>`       | :ref:`get_editor_interface<class_EditorPlugin_method_get_editor_interface>` **(** **)**                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>`                       | :ref:`get_plugin_icon<class_EditorPlugin_method_get_plugin_icon>` **(** **)** |virtual|                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_plugin_name<class_EditorPlugin_method_get_plugin_name>` **(** **)** |virtual|                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ScriptCreateDialog<class_ScriptCreateDialog>` | :ref:`get_script_create_dialog<class_EditorPlugin_method_get_script_create_dialog>` **(** **)**                                                                                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`                 | :ref:`get_state<class_EditorPlugin_method_get_state>` **(** **)** |virtual|                                                                                                                                                            |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`UndoRedo<class_UndoRedo>`                     | :ref:`get_undo_redo<class_EditorPlugin_method_get_undo_redo>` **(** **)**                                                                                                                                                              |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`get_window_layout<class_EditorPlugin_method_get_window_layout>` **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** |virtual|                                                                                                 |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`handles<class_EditorPlugin_method_handles>` **(** :ref:`Object<class_Object>` object **)** |virtual|                                                                                                                             |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_main_screen<class_EditorPlugin_method_has_main_screen>` **(** **)** |virtual|                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`hide_bottom_panel<class_EditorPlugin_method_hide_bottom_panel>` **(** **)**                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`make_bottom_panel_item_visible<class_EditorPlugin_method_make_bottom_panel_item_visible>` **(** :ref:`Control<class_Control>` item **)**                                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`make_visible<class_EditorPlugin_method_make_visible>` **(** :ref:`bool<class_bool>` visible **)** |virtual|                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`queue_save_layout<class_EditorPlugin_method_queue_save_layout>` **(** **)** |const|                                                                                                                                              |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_autoload_singleton<class_EditorPlugin_method_remove_autoload_singleton>` **(** :ref:`String<class_String>` name **)**                                                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_bottom_panel<class_EditorPlugin_method_remove_control_from_bottom_panel>` **(** :ref:`Control<class_Control>` control **)**                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_container<class_EditorPlugin_method_remove_control_from_container>` **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_docks<class_EditorPlugin_method_remove_control_from_docks>` **(** :ref:`Control<class_Control>` control **)**                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_custom_type<class_EditorPlugin_method_remove_custom_type>` **(** :ref:`String<class_String>` type **)**                                                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_export_plugin<class_EditorPlugin_method_remove_export_plugin>` **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**                                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_import_plugin<class_EditorPlugin_method_remove_import_plugin>` **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_inspector_plugin<class_EditorPlugin_method_remove_inspector_plugin>` **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_scene_import_plugin<class_EditorPlugin_method_remove_scene_import_plugin>` **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**                                                               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_spatial_gizmo_plugin<class_EditorPlugin_method_remove_spatial_gizmo_plugin>` **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**                                                           |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_tool_menu_item<class_EditorPlugin_method_remove_tool_menu_item>` **(** :ref:`String<class_String>` name **)**                                                                                                             |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`save_external_data<class_EditorPlugin_method_save_external_data>` **(** **)** |virtual|                                                                                                                                          |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_force_draw_over_forwarding_enabled<class_EditorPlugin_method_set_force_draw_over_forwarding_enabled>` **(** **)**                                                                                                            |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_input_event_forwarding_always_enabled<class_EditorPlugin_method_set_input_event_forwarding_always_enabled>` **(** **)**                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_state<class_EditorPlugin_method_set_state>` **(** :ref:`Dictionary<class_Dictionary>` state **)** |virtual|                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_window_layout<class_EditorPlugin_method_set_window_layout>` **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** |virtual|                                                                                                 |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`update_overlays<class_EditorPlugin_method_update_overlays>` **(** **)** |const|                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_EditorPlugin_signal_main_screen_changed:

- **main_screen_changed** **(** :ref:`String<class_String>` screen_name **)**

当用户改变工作空间(**2D**, **3D**, **Script**, **AssetLib**)时触发。也适用于由插件定义的自定义屏幕。

----

.. _class_EditorPlugin_signal_resource_saved:

- **resource_saved** **(** :ref:`Resource<class_Resource>` resource **)**

----

.. _class_EditorPlugin_signal_scene_changed:

- **scene_changed** **(** :ref:`Node<class_Node>` scene_root **)**

在编辑器中更改场景时触发。该参数将返回刚刚变为活动状态的场景的根节点。如果此场景是新场景且为空，则参数将为\ ``null``\ 。

----

.. _class_EditorPlugin_signal_scene_closed:

- **scene_closed** **(** :ref:`String<class_String>` filepath **)**

当用户关闭场景时触发。参数是关闭场景的文件路径。

枚举
----

.. _enum_EditorPlugin_CustomControlContainer:

.. _class_EditorPlugin_constant_CONTAINER_TOOLBAR:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_MENU:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_SIDE_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_MENU:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_SIDE_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_SIDE_RIGHT:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_PROPERTY_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_PROJECT_SETTING_TAB_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_PROJECT_SETTING_TAB_RIGHT:

enum **CustomControlContainer**:

- **CONTAINER_TOOLBAR** = **0**

- **CONTAINER_SPATIAL_EDITOR_MENU** = **1**

- **CONTAINER_SPATIAL_EDITOR_SIDE_LEFT** = **2**

- **CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT** = **3**

- **CONTAINER_SPATIAL_EDITOR_BOTTOM** = **4**

- **CONTAINER_CANVAS_EDITOR_MENU** = **5**

- **CONTAINER_CANVAS_EDITOR_SIDE_LEFT** = **6**

- **CONTAINER_CANVAS_EDITOR_SIDE_RIGHT** = **7**

- **CONTAINER_CANVAS_EDITOR_BOTTOM** = **8**

- **CONTAINER_PROPERTY_EDITOR_BOTTOM** = **9**

- **CONTAINER_PROJECT_SETTING_TAB_LEFT** = **10**

- **CONTAINER_PROJECT_SETTING_TAB_RIGHT** = **11**

----

.. _enum_EditorPlugin_DockSlot:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_UL:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_BL:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_UR:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_BR:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_UL:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_BL:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_UR:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_BR:

.. _class_EditorPlugin_constant_DOCK_SLOT_MAX:

enum **DockSlot**:

- **DOCK_SLOT_LEFT_UL** = **0**

- **DOCK_SLOT_LEFT_BL** = **1**

- **DOCK_SLOT_LEFT_UR** = **2**

- **DOCK_SLOT_LEFT_BR** = **3**

- **DOCK_SLOT_RIGHT_UL** = **4**

- **DOCK_SLOT_RIGHT_BL** = **5**

- **DOCK_SLOT_RIGHT_UR** = **6**

- **DOCK_SLOT_RIGHT_BR** = **7**

- **DOCK_SLOT_MAX** = **8** --- 表示\ :ref:`DockSlot<enum_EditorPlugin_DockSlot>`\ 枚举的大小。

方法说明
--------

.. _class_EditorPlugin_method_add_autoload_singleton:

- void **add_autoload_singleton** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` path **)**

将 ``path`` 处的脚本作为 ``name`` 添加到自动加载列表中。

----

.. _class_EditorPlugin_method_add_control_to_bottom_panel:

- :ref:`ToolButton<class_ToolButton>` **add_control_to_bottom_panel** **(** :ref:`Control<class_Control>` control, :ref:`String<class_String>` title **)**

将控件添加到底部面板（以及“输出”，“调试”，“动画”等）。返回对添加的按钮的引用。您可以根据需要隐藏/显示按钮。停用插件后，请确保使用\ :ref:`remove_control_from_bottom_panel<class_EditorPlugin_method_remove_control_from_bottom_panel>`\ 删除自定义控件，并使用\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放它。

----

.. _class_EditorPlugin_method_add_control_to_container:

- void **add_control_to_container** **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**

将自定义控件添加到容器中（参阅\ :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>`\ ）。在编辑器用户界面中，有许多位置可以添加自定义控件，请记住，您必须自己管理您的自定义控件的可见性（并且很可能在添加后隐藏它）。

请记住，您必须自己管理您的自定义控件的可见性（并且很可能在添加后隐藏它）。

当你的插件停用时，请确保使用\ :ref:`remove_control_from_container<class_EditorPlugin_method_remove_control_from_container>`\ 删除你的自定义控件，并使用\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放它。

----

.. _class_EditorPlugin_method_add_control_to_dock:

- void **add_control_to_dock** **(** :ref:`DockSlot<enum_EditorPlugin_DockSlot>` slot, :ref:`Control<class_Control>` control **)**

将控件添加到特定的停靠面板（有关选项，请参阅\ :ref:`DockSlot<enum_EditorPlugin_DockSlot>`\ ）。

如果重新放置了停靠面板，并且只要插件处于活动状态，编辑器就会在以后的会话中保存停靠面板的位置。

停用插件后，请确保使用\ :ref:`remove_control_from_docks<class_EditorPlugin_method_remove_control_from_docks>`\ 删除自定义控件，并使用\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放它。

----

.. _class_EditorPlugin_method_add_custom_type:

- void **add_custom_type** **(** :ref:`String<class_String>` type, :ref:`String<class_String>` base, :ref:`Script<class_Script>` script, :ref:`Texture<class_Texture>` icon **)**

添加一个自定义类型，它将出现在节点或资源的列表中。可以选择指定一个图标。

当给定的节点或资源被选中时，基本类型将被实例化（即“Spatial”、“Control”、“Resource”），然后脚本将被加载并设置为这个对象。

你可以使用虚拟法 :ref:`handles<class_EditorPlugin_method_handles>` 通过检查脚本或使用 ``is`` 关键字来检查是否正在编辑自定义对象。

在运行时，这将是一个带有脚本的简单对象，因此不需要调用此函数。

----

.. _class_EditorPlugin_method_add_export_plugin:

- void **add_export_plugin** **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**

注册一个新的编辑器导出插件 :ref:`EditorExportPlugin<class_EditorExportPlugin>`\ 。导出插件是用来在项目被导出时执行任务的。

参见 :ref:`add_inspector_plugin<class_EditorPlugin_method_add_inspector_plugin>`\ ，了解如何注册一个插件的例子。

----

.. _class_EditorPlugin_method_add_import_plugin:

- void **add_import_plugin** **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**

注册一个新的编辑器导入插件 :ref:`EditorImportPlugin<class_EditorImportPlugin>`\ 。导入插件用于导入自定义和不支持的资产，作为一个自定义的 :ref:`Resource<class_Resource>` 资源类型。

\ **注意：** 如果你想导入自定义的 3D 资产格式，请使用 :ref:`add_scene_import_plugin<class_EditorPlugin_method_add_scene_import_plugin>` 代替。

参见 :ref:`add_inspector_plugin<class_EditorPlugin_method_add_inspector_plugin>` 以了解如何注册一个插件的例子。

----

.. _class_EditorPlugin_method_add_inspector_plugin:

- void **add_inspector_plugin** **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**

注册一个新的编辑器属性检查器插件\ :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>`\ 。检查器插件用于扩展 :ref:`EditorInspector<class_EditorInspector>` 并为你的对象属性提供自定义配置工具。

\ **注意：** 当你的 ``EditorPlugin`` 被禁用时，一定要使用 :ref:`remove_inspector_plugin<class_EditorPlugin_method_remove_inspector_plugin>` 来删除注册的 :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>`\ ，以防止泄漏和出现意外行为。

::

    const MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
    var inspector_plugin = MyInspectorPlugin.new()
    
    func _enter_tree():
        add_inspector_plugin( inspector_plugin)
    
    func _exit_tree():
        remove_inspector_plugin(inspector_plugin)

----

.. _class_EditorPlugin_method_add_scene_import_plugin:

- void **add_scene_import_plugin** **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**

注册一个新的场景导入器 :ref:`EditorSceneImporter<class_EditorSceneImporter>`\ 。场景导入器可以将自定义 3D 素材格式导入为场景。

----

.. _class_EditorPlugin_method_add_spatial_gizmo_plugin:

- void **add_spatial_gizmo_plugin** **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**

注册一个新的空间辅助器插件 :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>`\ 。Gizmo插件用于为 :ref:`Spatial<class_Spatial>` 的 3D预览视窗添加自定义的 gizmos。

参见 :ref:`add_inspector_plugin<class_EditorPlugin_method_add_inspector_plugin>` 以了解如何注册一个插件的例子。

----

.. _class_EditorPlugin_method_add_tool_menu_item:

- void **add_tool_menu_item** **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` handler, :ref:`String<class_String>` callback, :ref:`Variant<class_Variant>` ud=null **)**

在\ **项目 > 工具**\ 中添加一个自定义菜单项，作为\ ``name``\ ，当用户激活它时，该菜单项将调用\ ``callback``\ 参数为\ ``ud``\ 的\ ``handler``\ 实例。

----

.. _class_EditorPlugin_method_add_tool_submenu_item:

- void **add_tool_submenu_item** **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` submenu **)**

在\ **项目>工具>** ``name``\ 下添加自定义子菜单。 ``submenu``\ 应该是\ :ref:`PopupMenu<class_PopupMenu>`\ 类的对象。此子菜单应使用\ ``remove_tool_menu_item（name）``\ 进行清理。

----

.. _class_EditorPlugin_method_apply_changes:

- void **apply_changes** **(** **)** |virtual|

当编辑器将进行要保存项目、切换选项卡等操作时，将调用此方法。它要求插件应用任何暂挂状态更改以确保一致性。

例如，在着色器编辑器中使用它来使插件将用户编写的着色代码应用于对象。

----

.. _class_EditorPlugin_method_build:

- :ref:`bool<class_bool>` **build** **(** **)** |virtual|

这个方法在编辑器即将运行项目时被调用。然后，该插件可以在项目运行前执行所需的操作。

这个方法必须返回一个布尔值。如果这个方法返回 ``false``\ ，项目将不会运行。运行被立即中止，所以这也会阻止所有其他插件的\ :ref:`build<class_EditorPlugin_method_build>` 方法运行。

----

.. _class_EditorPlugin_method_clear:

- void **clear** **(** **)** |virtual|

清除所有状态，并将正在编辑的对象重置为零。这可以确保你的插件不会一直编辑一个当前存在的节点，或者一个来自错误场景节点。

----

.. _class_EditorPlugin_method_disable_plugin:

- void **disable_plugin** **(** **)** |virtual|

当用户在项目设置窗口的插件选项卡中禁用\ ``EditorPlugin``\ 时，由引擎调用。

----

.. _class_EditorPlugin_method_edit:

- void **edit** **(** :ref:`Object<class_Object>` object **)** |virtual|

该函数用于编辑特定对象类型（节点或资源）的插件。它要求编辑器编辑给定的对象。

----

.. _class_EditorPlugin_method_enable_plugin:

- void **enable_plugin** **(** **)** |virtual|

当用户在项目设置窗口的插件选项卡中启用\ ``EditorPlugin``\ 时，由引擎调用。

----

.. _class_EditorPlugin_method_forward_canvas_draw_over_viewport:

- void **forward_canvas_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** |virtual|

当2D编辑器的视窗被更新时，由引擎调用。使用 ``overlay`` :ref:`Control<class_Control>` 进行绘制。你可以通过调用 :ref:`update_overlays<class_EditorPlugin_method_update_overlays>` 手动更新视窗。

::

    func forward_canvas_draw_over_viewport(overlay):
        # 在光标位置画一个圆。
        overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.white)
    
    func forward_canvas_gui_input(event):
        if event is InputEventMouseMotion:
            # 当光标被移动时，重绘视窗。
            update_overlays()
            return true
        return false

----

.. _class_EditorPlugin_method_forward_canvas_force_draw_over_viewport:

- void **forward_canvas_force_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** |virtual|

这个方法和 :ref:`forward_canvas_draw_over_viewport<class_EditorPlugin_method_forward_canvas_draw_over_viewport>` 一样，只是它在所有东西的上面绘制。当你需要一个额外的层显示在其他东西上面时，这个方法很有用。

你需要通过使用 :ref:`set_force_draw_over_forwarding_enabled<class_EditorPlugin_method_set_force_draw_over_forwarding_enabled>` 来激活这个方法的调用。

----

.. _class_EditorPlugin_method_forward_canvas_gui_input:

- :ref:`bool<class_bool>` **forward_canvas_gui_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

当当前编辑场景中有一个根节点时被调用，\ :ref:`handles<class_EditorPlugin_method_handles>`\ 实现，在2D视窗中发生按键输入\ :ref:`InputEvent<class_InputEvent>`\ 。拦截按键输入\ :ref:`InputEvent<class_InputEvent>`\ ，如果\ ``return true`` ``EditorPlugin``\ 消耗键值\ ``event``\ ，否则将键值\ ``event``\ 转发给其他Editor类。例子:

::

    # 阻止 InputEvent 到达其他编辑类
    func forward_canvas_gui_input(event):
        var forward = true
        return forward

必须 ``return false`` 才能将 :ref:`InputEvent<class_InputEvent>` 转发到其他编辑器类。例子：

::

    # 消耗InputEventMouseMotion并转发其他InputEvent类型
    func forward_canvas_gui_input(event):
        var forward = false
        if event is InputEventMouseMotion:
            forward = true
        return forward

----

.. _class_EditorPlugin_method_forward_spatial_draw_over_viewport:

- void **forward_spatial_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** |virtual|

当3D编辑器的视窗被更新时，由引擎调用。使用 ``overlay`` 控件 :ref:`Control<class_Control>` 进行绘制。你可以通过调用 :ref:`update_overlays<class_EditorPlugin_method_update_overlays>` 更新覆盖手动更新视窗。

::

    func forward_spatial_draw_over_viewport(overlay):
        # 在光标位置画一个圆。
        overlay.draw_circle(overlay.get_local_mouse_position(), 64)
    
    func forward_spatial_gui_input(camera, event):
         if event is InputEventMouseMotion:
            # 当光标被移动时，重绘视窗。
            update_overlays()
            return true
        return false

----

.. _class_EditorPlugin_method_forward_spatial_force_draw_over_viewport:

- void **forward_spatial_force_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** |virtual|

这个方法和 :ref:`forward_spatial_draw_over_viewport<class_EditorPlugin_method_forward_spatial_draw_over_viewport>` 一样，只是它在所有东西的上面绘制。当你需要一个额外的层显示在其他东西上面时，这个方法很有用。

你需要通过使用 :ref:`set_force_draw_over_forwarding_enabled<class_EditorPlugin_method_set_force_draw_over_forwarding_enabled>` 来激活这个方法的调用。

----

.. _class_EditorPlugin_method_forward_spatial_gui_input:

- :ref:`bool<class_bool>` **forward_spatial_gui_input** **(** :ref:`Camera<class_Camera>` camera, :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

在当前编辑的场景中存在根节点时调用，实现\ :ref:`handles<class_EditorPlugin_method_handles>`\ 并在3D视窗中发生按键输入\ :ref:`InputEvent<class_InputEvent>`\ 。拦截按键输入\ :ref:`InputEvent<class_InputEvent>`\ ，如果\ ``return true``\ ，则\ ``EditorPlugin``\ 会使用键值\ ``event``\ ，否则将键值\ ``event``\ 转发到其他Editor类。例子：

::

    # 阻止 InputEvent 到达其他编辑类
    func forward_spatial_gui_input(camera, event):
        var forward = true
        return forward

必须 ``return false`` 才能将 :ref:`InputEvent<class_InputEvent>` 转发到其他编辑器类。例子：

::

    # 消耗 InputEventMouseMotion 并转发其他 InputEvent 类型
    func forward_spatial_gui_input(camera, event):
        var forward = false
        if event is InputEventMouseMotion:
            forward = true
        return forward

----

.. _class_EditorPlugin_method_get_breakpoints:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_breakpoints** **(** **)** |virtual|

这是为编辑基于脚本的对象的编辑器。您可以返回格式中的断点列表（\ ``script:line``\ ），例如：\ ``res：//path_to_script.gd：25``\ 。

----

.. _class_EditorPlugin_method_get_editor_interface:

- :ref:`EditorInterface<class_EditorInterface>` **get_editor_interface** **(** **)**

返回\ :ref:`EditorInterface<class_EditorInterface>`\ 对象，该对象使您可以控制GaaeExplorer编辑器的窗口及其功能。

----

.. _class_EditorPlugin_method_get_plugin_icon:

- :ref:`Texture<class_Texture>` **get_plugin_icon** **(** **)** |virtual|

在你的插件中覆盖这个方法，返回一个纹理 :ref:`Texture<class_Texture>`\ ，以便给它一个图标。

对于主界面的插件，它出现在屏幕的顶部，在 "2D"、"3D"、"Script "和 "AssetLib "按钮的右边。

理想情况下，插件的图标应该是透明背景的白色，尺寸为16x16像素。

::

    func get_plugin_icon():
        # 你可以使用一个自定义的图标。
        return preload("res://addons/my_plugin/my_plugin_icon.svg")
        # 或者使用一个内置的图标。
        return get_editor_interface().get_base_control().get_icon("Node", "EditorIcons")

----

.. _class_EditorPlugin_method_get_plugin_name:

- :ref:`String<class_String>` **get_plugin_name** **(** **)** |virtual|

在GaaeExplorer编辑器中显示时，请在插件中覆盖此方法以提供插件的名称。

对于主屏幕插件，它显示在屏幕顶部，在“ 2D”，“ 3D”，“脚本”和“ AssetLib”按钮的右侧。

----

.. _class_EditorPlugin_method_get_script_create_dialog:

- :ref:`ScriptCreateDialog<class_ScriptCreateDialog>` **get_script_create_dialog** **(** **)**

获取用于创建脚本的编辑器对话框。

\ **注意:** 用户可以在使用前对其进行配置。

\ **警告:** 移除和释放这个节点将使编辑器的一部分失去作用，并可能导致崩溃。

----

.. _class_EditorPlugin_method_get_state:

- :ref:`Dictionary<class_Dictionary>` **get_state** **(** **)** |virtual|

获取插件编辑器的状态。这用于保存场景时（从而再次打开时，它的状态被保持）和切换标签（从而状态能够当拉片返回恢复）时使用。

----

.. _class_EditorPlugin_method_get_undo_redo:

- :ref:`UndoRedo<class_UndoRedo>` **get_undo_redo** **(** **)**

获取撤消/重做对象。编辑器中的大多数操作都是可以撤消的，因此请使用此对象来确保在需要时执行此操作。

----

.. _class_EditorPlugin_method_get_window_layout:

- void **get_window_layout** **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** |virtual|

获取插件的GUI布局。当调用\ :ref:`queue_save_layout<class_EditorPlugin_method_queue_save_layout>`\ 更改了编辑器布局（例如，更改停靠点的位置）时或保存项目的编辑器布局。

----

.. _class_EditorPlugin_method_handles:

- :ref:`bool<class_bool>` **handles** **(** :ref:`Object<class_Object>` object **)** |virtual|

如果您的插件编辑特定类型的对象（资源或节点），请实现此功能。如果返回 ``true``\ ，则当编辑器请求它们时，将获得调用 :ref:`edit<class_EditorPlugin_method_edit>` 和 :ref:`make_visible<class_EditorPlugin_method_make_visible>` 的函数。如果您已经声明了方法 :ref:`forward_canvas_gui_input<class_EditorPlugin_method_forward_canvas_gui_input>` 和 :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>`\ ，这些方法也将被调用。

----

.. _class_EditorPlugin_method_has_main_screen:

- :ref:`bool<class_bool>` **has_main_screen** **(** **)** |virtual|

如果这是一个主屏幕编辑插件，返回\ ``true``\ (它与\ **2D**\ 、\ **3D**\ 、\ **Script**\ 和\ **AssetLib**\ 一起放在工作区选择器中)。

----

.. _class_EditorPlugin_method_hide_bottom_panel:

- void **hide_bottom_panel** **(** **)**

最小化底部面板。

----

.. _class_EditorPlugin_method_make_bottom_panel_item_visible:

- void **make_bottom_panel_item_visible** **(** :ref:`Control<class_Control>` item **)**

使底部面板中的一个特定项目可见。

----

.. _class_EditorPlugin_method_make_visible:

- void **make_visible** **(** :ref:`bool<class_bool>` visible **)** |virtual|

当编辑器被要求变为可见时，该函数将被调用。它用于编辑特定对象类型的插件。

记住，你必须手动管理所有编辑器控件的可见性。

----

.. _class_EditorPlugin_method_queue_save_layout:

- void **queue_save_layout** **(** **)** |const|

排队保存项目的编辑器布局。

----

.. _class_EditorPlugin_method_remove_autoload_singleton:

- void **remove_autoload_singleton** **(** :ref:`String<class_String>` name **)**

从列表中删除自动加载\ ``name``\ 。

----

.. _class_EditorPlugin_method_remove_control_from_bottom_panel:

- void **remove_control_from_bottom_panel** **(** :ref:`Control<class_Control>` control **)**

从底部面板上删除控件。您必须手动\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放控件。

----

.. _class_EditorPlugin_method_remove_control_from_container:

- void **remove_control_from_container** **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**

从指定的容器中删除控件。您必须手动\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放控件。

----

.. _class_EditorPlugin_method_remove_control_from_docks:

- void **remove_control_from_docks** **(** :ref:`Control<class_Control>` control **)**

从扩展面板中删除控件。您必须手动\ :ref:`Node.queue_free<class_Node_method_queue_free>`\ 释放控件。

----

.. _class_EditorPlugin_method_remove_custom_type:

- void **remove_custom_type** **(** :ref:`String<class_String>` type **)**

删除由 :ref:`add_custom_type<class_EditorPlugin_method_add_custom_type>` 添加的自定义类型。

----

.. _class_EditorPlugin_method_remove_export_plugin:

- void **remove_export_plugin** **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**

删除由 :ref:`add_export_plugin<class_EditorPlugin_method_add_export_plugin>` 注册的导出插件。

----

.. _class_EditorPlugin_method_remove_import_plugin:

- void **remove_import_plugin** **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**

删除由 :ref:`add_import_plugin<class_EditorPlugin_method_add_import_plugin>` 注册的导入插件。

----

.. _class_EditorPlugin_method_remove_inspector_plugin:

- void **remove_inspector_plugin** **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**

删除由 :ref:`add_import_plugin<class_EditorPlugin_method_add_import_plugin>` 注册的检查器插件

----

.. _class_EditorPlugin_method_remove_scene_import_plugin:

- void **remove_scene_import_plugin** **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**

删除由 :ref:`add_scene_import_plugin<class_EditorPlugin_method_add_scene_import_plugin>` 注册的场景导入器。

----

.. _class_EditorPlugin_method_remove_spatial_gizmo_plugin:

- void **remove_spatial_gizmo_plugin** **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**

删除由 :ref:`add_spatial_gizmo_plugin<class_EditorPlugin_method_add_spatial_gizmo_plugin>` 注册的控制器插件。

----

.. _class_EditorPlugin_method_remove_tool_menu_item:

- void **remove_tool_menu_item** **(** :ref:`String<class_String>` name **)**

从\ **项目 > 工具**\ 中删除菜单\ ``name``\ 。

----

.. _class_EditorPlugin_method_save_external_data:

- void **save_external_data** **(** **)** |virtual|

这个方法在编辑器保存项目后或关闭项目时被调用，它要求插件保存编辑的外部场景/资源。

----

.. _class_EditorPlugin_method_set_force_draw_over_forwarding_enabled:

- void **set_force_draw_over_forwarding_enabled** **(** **)**

启用2D编辑器的 :ref:`forward_canvas_force_draw_over_viewport<class_EditorPlugin_method_forward_canvas_force_draw_over_viewport>` 和3D编辑器的 :ref:`forward_spatial_force_draw_over_viewport<class_EditorPlugin_method_forward_spatial_force_draw_over_viewport>` 在其视窗更新时的调用。你只需要调用这个方法一次，它就会对这个插件永久起作用。

----

.. _class_EditorPlugin_method_set_input_event_forwarding_always_enabled:

- void **set_input_event_forwarding_always_enabled** **(** **)**

如果你想在\ :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>`\ 里面接收来自3D视图屏幕的输入，请使用这个方法。如果你的插件想要在场景中使用光线广播，那么这个方法可能特别有用。

----

.. _class_EditorPlugin_method_set_state:

- void **set_state** **(** :ref:`Dictionary<class_Dictionary>` state **)** |virtual|

恢复\ :ref:`get_state<class_EditorPlugin_method_get_state>`\ 保存的状态。

----

.. _class_EditorPlugin_method_set_window_layout:

- void **set_window_layout** **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** |virtual|

恢复\ :ref:`get_window_layout<class_EditorPlugin_method_get_window_layout>`\ 保存的插件GUI布局。

----

.. _class_EditorPlugin_method_update_overlays:

- :ref:`int<class_int>` **update_overlays** **(** **)** |const|

更新 2D 和 3D 编辑器视窗的覆盖层。导致方法 :ref:`forward_canvas_draw_over_viewport<class_EditorPlugin_method_forward_canvas_draw_over_viewport>`\ 、\ :ref:`forward_canvas_force_draw_over_viewport<class_EditorPlugin_method_forward_canvas_force_draw_over_viewport>`\ 、\ :ref:`forward_spatial_draw_over_viewport<class_EditorPlugin_method_forward_spatial_draw_over_viewport>` 和 :ref:`forward_spatial_force_draw_over_viewport<class_EditorPlugin_method_forward_spatial_force_draw_over_viewport>` 被调用。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
