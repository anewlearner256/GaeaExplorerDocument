:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Plane.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Plane:

Plane
=====

麻状平面。

描述
----

平面表示标准化的平面方程。基本上，“法线”是平面的法线(a、b、c归一化)，而“d”是原点到平面的距离(在“法线”方向)。“上方”或“上方”平面被认为是法线指向的平面一侧。

教程
----

- :doc:`../tutorials/math/index`

属性
----

+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`d<class_Plane_property_d>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`normal<class_Plane_property_normal>` | ``Vector3( 0, 0, 0 )`` |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`x<class_Plane_property_x>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`y<class_Plane_property_y>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`z<class_Plane_property_z>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+

方法
----

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` c, :ref:`float<class_float>` d **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`Vector3<class_Vector3>` v1, :ref:`Vector3<class_Vector3>` v2, :ref:`Vector3<class_Vector3>` v3 **)**               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`Vector3<class_Vector3>` normal, :ref:`float<class_float>` d **)**                                                  |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`center<class_Plane_method_center>` **(** **)**                                                                                                                  |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`distance_to<class_Plane_method_distance_to>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                    |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_any_point<class_Plane_method_get_any_point>` **(** **)**                                                                                                    |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_point<class_Plane_method_has_point>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`float<class_float>` epsilon=1e-05 **)**                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersect_3<class_Plane_method_intersect_3>` **(** :ref:`Plane<class_Plane>` b, :ref:`Plane<class_Plane>` c **)**                                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersects_ray<class_Plane_method_intersects_ray>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir **)**                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersects_segment<class_Plane_method_intersects_segment>` **(** :ref:`Vector3<class_Vector3>` begin, :ref:`Vector3<class_Vector3>` end **)**                   |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_Plane_method_is_equal_approx>` **(** :ref:`Plane<class_Plane>` plane **)**                                                                |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_point_over<class_Plane_method_is_point_over>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`normalized<class_Plane_method_normalized>` **(** **)**                                                                                                          |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`project<class_Plane_method_project>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+

常量
----

.. _class_Plane_constant_PLANE_YZ:

.. _class_Plane_constant_PLANE_XZ:

.. _class_Plane_constant_PLANE_XY:

- **PLANE_YZ** = **Plane( 1, 0, 0, 0 )** --- 在 Y 轴和 Z 轴上延伸的平面（法向量指向 +X）。

- **PLANE_XZ** = **Plane( 0, 1, 0, 0 )** --- 在 X 轴和 Z 轴上延伸的平面（法向量朝向 +Y）。

- **PLANE_XY** = **Plane( 0, 0, 1, 0 )** --- 在 X 轴和 Y 轴上延伸的平面（法向量朝向 +Z）。

属性说明
--------

.. _class_Plane_property_d:

- :ref:`float<class_float>` **d**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

从原点到平面的距离，沿\ :ref:`normal<class_Plane_property_normal>`\ 方向。这个值通常是非负的。

在平面\ ``ax + by + cz = d``\ 的标量方程中，这是\ ``d``\ ，而\ ``(a, b, c)``\ 坐标由\ :ref:`normal<class_Plane_property_normal>`\ 属性表示。

----

.. _class_Plane_property_normal:

- :ref:`Vector3<class_Vector3>` **normal**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

平面的法线，必须归一化。

在平面\ ``ax + by + cz = d``\ 的标量方程中，这是向量\ ``(a, b, c)``\ ，其中\ ``d``\ 是\ :ref:`d<class_Plane_property_d>`\ 属性。

----

.. _class_Plane_property_x:

- :ref:`float<class_float>` **x**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

平面的\ :ref:`normal<class_Plane_property_normal>`\ 向量的X分量。

----

.. _class_Plane_property_y:

- :ref:`float<class_float>` **y**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

平面的\ :ref:`normal<class_Plane_property_normal>`\ 向量的Y分量。

----

.. _class_Plane_property_z:

- :ref:`float<class_float>` **z**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

平面的\ :ref:`normal<class_Plane_property_normal>`\ 向量的Z分量。

方法说明
--------

.. _class_Plane_method_Plane:

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` c, :ref:`float<class_float>` d **)**

根据四个参数创建一个平面。产生的平面的 :ref:`normal<class_Plane_property_normal>` 的三个分量是 ``a``\ 、\ ``b``\ 、\ ``c``\ ，并且平面与原点的距离为\ ``d``\ 。

----

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`Vector3<class_Vector3>` v1, :ref:`Vector3<class_Vector3>` v2, :ref:`Vector3<class_Vector3>` v3 **)**

根据顺时针顺序给出的三个点创建一个平面。

----

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`Vector3<class_Vector3>` normal, :ref:`float<class_float>` d **)**

从法线和平面到原点的距离创建一个平面。

----

.. _class_Plane_method_center:

- :ref:`Vector3<class_Vector3>` **center** **(** **)**

返回平面的中心。

----

.. _class_Plane_method_distance_to:

- :ref:`float<class_float>` **distance_to** **(** :ref:`Vector3<class_Vector3>` point **)**

返回从平面到位置\ ``point``\ 的最短距离。

----

.. _class_Plane_method_get_any_point:

- :ref:`Vector3<class_Vector3>` **get_any_point** **(** **)**

返回平面的中心。

此方法已被废弃，请使用\ :ref:`center<class_Plane_method_center>`\ 代替。

----

.. _class_Plane_method_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`Vector3<class_Vector3>` point, :ref:`float<class_float>` epsilon=1e-05 **)**

如果\ ``point``\ 在平面内，则返回\ ``true``\ 。比较使用自定义的最小\ ``epsilon』`` ε 阈值。

----

.. _class_Plane_method_intersect_3:

- :ref:`Vector3<class_Vector3>` **intersect_3** **(** :ref:`Plane<class_Plane>` b, :ref:`Plane<class_Plane>` c **)**

返回三个平面\ ``b``\ ，\ ``c``\ 与该平面的交点。如果没有找到交集，则返回\ ``null``\ 。

----

.. _class_Plane_method_intersects_ray:

- :ref:`Vector3<class_Vector3>` **intersects_ray** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir **)**

返回由位置\ ``from``\ 和方向法线\ ``dir``\ 组成的射线与该平面的交点。如果没有找到交点，则返回\ ``null``\ 。

----

.. _class_Plane_method_intersects_segment:

- :ref:`Vector3<class_Vector3>` **intersects_segment** **(** :ref:`Vector3<class_Vector3>` begin, :ref:`Vector3<class_Vector3>` end **)**

返回从位置\ ``begin``\ 到位置\ ``end``\ 的线段与这个平面的交点。如果没有找到交点，则返回\ ``null``\ 。

----

.. _class_Plane_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Plane<class_Plane>` plane **)**

通过在每个组件上运行\ :ref:`@GDScript.is_equal_approx<class_@GDScript_method_is_equal_approx>`\ ，如果此平面和\ ``plane``\ 近似相等，则返回\ ``true``\ 。

----

.. _class_Plane_method_is_point_over:

- :ref:`bool<class_bool>` **is_point_over** **(** :ref:`Vector3<class_Vector3>` point **)**

如果\ ``point``\ 位于平面上方，则返回\ ``true``\ 。

----

.. _class_Plane_method_normalized:

- :ref:`Plane<class_Plane>` **normalized** **(** **)**

返回平面的一个标准化副本。

----

.. _class_Plane_method_project:

- :ref:`Vector3<class_Vector3>` **project** **(** :ref:`Vector3<class_Vector3>` point **)**

返回\ ``点``\ 在平面上的正交投影。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
