:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the LineEdit.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_LineEdit:

LineEdit
========

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

该控件提供单行字符串编辑。

描述
----

LineEdit 提供了单行字符串编辑器，用于文本字段。

它具有许多始终可用的内置快捷方式（在这里 ``Ctrl`` 映射到 macOS 上的 ``Command``\ ）：

- Ctrl + C：复制

- Ctrl + X：剪切

- Ctrl + V 或 Ctrl + Y：粘贴/"拖拽"

- Ctrl + Z：撤消

- Ctrl + Shift + Z：重做

- Ctrl + U：删除从光标位置到行首的文本

- Ctrl + K：删除从光标位置到行尾的文本

- Ctrl + A：选择所有文本

- Up/Down 箭头: ：将光标移动到行的开头/结尾

在 macOS 上，有一些额外的键盘快捷键可用：

- Ctrl + F：像右箭头键一样，将光标向右移动一个字符

- Ctrl + B：像左箭头键一样，将光标向左移动一个字符

- Ctrl + P：像向上箭头键一样，将光标移动到上一行

- Ctrl + N：像向下箭头键一样，将光标移动到下一行

- Ctrl + D：像Delete键一样，删除光标右侧的字符

- Ctrl + H：像退格键一样，删除光标左侧的字符

- Command + 左箭头：像 Home 键一样，将光标移动到行首

- Command + 右箭头：像 End 键一样，将光标移动到行尾

属性
----

+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`Align<enum_LineEdit_Align>`            | :ref:`align<class_LineEdit_property_align>`                                       | ``0``                                                                               |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`caret_blink<class_LineEdit_property_caret_blink>`                           | ``false``                                                                           |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                    | :ref:`caret_blink_speed<class_LineEdit_property_caret_blink_speed>`               | ``0.65``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                        | :ref:`caret_position<class_LineEdit_property_caret_position>`                     | ``0``                                                                               |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>`         | ``false``                                                                           |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`context_menu_enabled<class_LineEdit_property_context_menu_enabled>`         | ``true``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`editable<class_LineEdit_property_editable>`                                 | ``true``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`expand_to_text_length<class_LineEdit_property_expand_to_text_length>`       | ``false``                                                                           |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`FocusMode<enum_Control_FocusMode>`     | focus_mode                                                                        | ``2`` (overrides :ref:`Control<class_Control_property_focus_mode>`)                 |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                        | :ref:`max_length<class_LineEdit_property_max_length>`                             | ``0``                                                                               |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`CursorShape<enum_Control_CursorShape>` | mouse_default_cursor_shape                                                        | ``1`` (overrides :ref:`Control<class_Control_property_mouse_default_cursor_shape>`) |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                    | :ref:`placeholder_alpha<class_LineEdit_property_placeholder_alpha>`               | ``0.6``                                                                             |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                  | :ref:`placeholder_text<class_LineEdit_property_placeholder_text>`                 | ``""``                                                                              |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>`                | :ref:`right_icon<class_LineEdit_property_right_icon>`                             |                                                                                     |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`secret<class_LineEdit_property_secret>`                                     | ``false``                                                                           |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                  | :ref:`secret_character<class_LineEdit_property_secret_character>`                 | ``"*"``                                                                             |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`selecting_enabled<class_LineEdit_property_selecting_enabled>`               | ``true``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`shortcut_keys_enabled<class_LineEdit_property_shortcut_keys_enabled>`       | ``true``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                  | :ref:`text<class_LineEdit_property_text>`                                         | ``""``                                                                              |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`virtual_keyboard_enabled<class_LineEdit_property_virtual_keyboard_enabled>` | ``true``                                                                            |
+----------------------------------------------+-----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

方法
----

+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`append_at_cursor<class_LineEdit_method_append_at_cursor>` **(** :ref:`String<class_String>` text **)**                         |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`clear<class_LineEdit_method_clear>` **(** **)**                                                                                |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`delete_char_at_cursor<class_LineEdit_method_delete_char_at_cursor>` **(** **)**                                                |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`delete_text<class_LineEdit_method_delete_text>` **(** :ref:`int<class_int>` from_column, :ref:`int<class_int>` to_column **)** |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`deselect<class_LineEdit_method_deselect>` **(** **)**                                                                          |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PopupMenu<class_PopupMenu>` | :ref:`get_menu<class_LineEdit_method_get_menu>` **(** **)** |const|                                                                  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_scroll_offset<class_LineEdit_method_get_scroll_offset>` **(** **)** |const|                                                |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`menu_option<class_LineEdit_method_menu_option>` **(** :ref:`int<class_int>` option **)**                                       |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`select<class_LineEdit_method_select>` **(** :ref:`int<class_int>` from=0, :ref:`int<class_int>` to=-1 **)**                    |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`select_all<class_LineEdit_method_select_all>` **(** **)**                                                                      |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+

主题属性
--------

+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`clear_button_color<class_LineEdit_theme_color_clear_button_color>`                 | ``Color( 0.88, 0.88, 0.88, 1 )``   |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`clear_button_color_pressed<class_LineEdit_theme_color_clear_button_color_pressed>` | ``Color( 1, 1, 1, 1 )``            |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`cursor_color<class_LineEdit_theme_color_cursor_color>`                             | ``Color( 0.94, 0.94, 0.94, 1 )``   |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color<class_LineEdit_theme_color_font_color>`                                 | ``Color( 0.88, 0.88, 0.88, 1 )``   |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_selected<class_LineEdit_theme_color_font_color_selected>`               | ``Color( 0, 0, 0, 1 )``            |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_uneditable<class_LineEdit_theme_color_font_color_uneditable>`           | ``Color( 0.88, 0.88, 0.88, 0.5 )`` |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`selection_color<class_LineEdit_theme_color_selection_color>`                       | ``Color( 0.49, 0.49, 0.49, 1 )``   |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`int<class_int>`           | :ref:`minimum_spaces<class_LineEdit_theme_constant_minimum_spaces>`                      | ``12``                             |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Font<class_Font>`         | :ref:`font<class_LineEdit_theme_font_font>`                                              |                                    |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`clear<class_LineEdit_theme_icon_clear>`                                            |                                    |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`focus<class_LineEdit_theme_style_focus>`                                           |                                    |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`normal<class_LineEdit_theme_style_normal>`                                         |                                    |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`read_only<class_LineEdit_theme_style_read_only>`                                   |                                    |
+---------------------------------+------------------------------------------------------------------------------------------+------------------------------------+

信号
----

.. _class_LineEdit_signal_text_change_rejected:

- **text_change_rejected** **(** :ref:`String<class_String>` rejected_substring **)**

当附加的文本超过了\ :ref:`max_length<class_LineEdit_property_max_length>`\ 时触发。附加的文本被截断以适应\ :ref:`max_length<class_LineEdit_property_max_length>`\ ，不能适应的部分被作为\ ``rejected_substring``\ 参数传递。

----

.. _class_LineEdit_signal_text_changed:

- **text_changed** **(** :ref:`String<class_String>` new_text **)**

当文本更改时触发。

----

.. _class_LineEdit_signal_text_entered:

- **text_entered** **(** :ref:`String<class_String>` new_text **)**

当用户按\ ``LineEdit``\ 上的\ :ref:`@GlobalScope.KEY_ENTER<class_@GlobalScope_constant_KEY_ENTER>`\ 时触发。

枚举
----

.. _enum_LineEdit_Align:

.. _class_LineEdit_constant_ALIGN_LEFT:

.. _class_LineEdit_constant_ALIGN_CENTER:

.. _class_LineEdit_constant_ALIGN_RIGHT:

.. _class_LineEdit_constant_ALIGN_FILL:

enum **Align**:

- **ALIGN_LEFT** = **0** --- ``LineEdit``\ 文本左对齐。

- **ALIGN_CENTER** = **1** --- ``LineEdit``\ 文本居中。

- **ALIGN_RIGHT** = **2** --- ``LineEdit``\ 文本右对齐。

- **ALIGN_FILL** = **3** --- 拉伸空白以适应\ ``LineEdit``\ 的宽度。

----

.. _enum_LineEdit_MenuItems:

.. _class_LineEdit_constant_MENU_CUT:

.. _class_LineEdit_constant_MENU_COPY:

.. _class_LineEdit_constant_MENU_PASTE:

.. _class_LineEdit_constant_MENU_CLEAR:

.. _class_LineEdit_constant_MENU_SELECT_ALL:

.. _class_LineEdit_constant_MENU_UNDO:

.. _class_LineEdit_constant_MENU_REDO:

.. _class_LineEdit_constant_MENU_MAX:

enum **MenuItems**:

- **MENU_CUT** = **0** --- 剪切(复制并删除)选定的文本。

- **MENU_COPY** = **1** --- 复制选定的文本。

- **MENU_PASTE** = **2** --- 将剪贴板文本粘贴到所选文本上(或光标所在位置)。

不可打印的转义字符将通过\ :ref:`String.strip_escapes<class_String_method_strip_escapes>`\ 从操作系统剪贴板中自动剥离。

- **MENU_CLEAR** = **3** --- 删除整个\ ``LineEdit``\ 文本。

- **MENU_SELECT_ALL** = **4** --- 选择\ ``LineEdit``\ 中所有文本。

- **MENU_UNDO** = **5** --- 撤销之前的操作。

- **MENU_REDO** = **6** --- 反转最后一个撤销动作。

- **MENU_MAX** = **7** --- 表示\ :ref:`MenuItems<enum_LineEdit_MenuItems>`\ 枚举的大小。

属性说明
--------

.. _class_LineEdit_property_align:

- :ref:`Align<enum_LineEdit_Align>` **align**

+-----------+------------------+
| *Default* | ``0``            |
+-----------+------------------+
| *Setter*  | set_align(value) |
+-----------+------------------+
| *Getter*  | get_align()      |
+-----------+------------------+

在\ :ref:`Align<enum_LineEdit_Align>`\ 枚举中定义文本对齐方式。

----

.. _class_LineEdit_property_caret_blink:

- :ref:`bool<class_bool>` **caret_blink**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | cursor_set_blink_enabled(value) |
+-----------+---------------------------------+
| *Getter*  | cursor_get_blink_enabled()      |
+-----------+---------------------------------+

如果为\ ``true``\ ，插入符号（可视光标）将闪烁。

----

.. _class_LineEdit_property_caret_blink_speed:

- :ref:`float<class_float>` **caret_blink_speed**

+-----------+-------------------------------+
| *Default* | ``0.65``                      |
+-----------+-------------------------------+
| *Setter*  | cursor_set_blink_speed(value) |
+-----------+-------------------------------+
| *Getter*  | cursor_get_blink_speed()      |
+-----------+-------------------------------+

插入符号闪烁周期的持续时间（秒）。

----

.. _class_LineEdit_property_caret_position:

- :ref:`int<class_int>` **caret_position**

+-----------+----------------------------+
| *Default* | ``0``                      |
+-----------+----------------------------+
| *Setter*  | set_cursor_position(value) |
+-----------+----------------------------+
| *Getter*  | get_cursor_position()      |
+-----------+----------------------------+

光标在\ ``LineEdit``\ 中的位置。设置后，文本可以滚动以适应它。

----

.. _class_LineEdit_property_clear_button_enabled:

- :ref:`bool<class_bool>` **clear_button_enabled**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | set_clear_button_enabled(value) |
+-----------+---------------------------------+
| *Getter*  | is_clear_button_enabled()       |
+-----------+---------------------------------+

如果为 ``true``\ ，\ ``LineEdit`` 将在 ``text`` 非空时显示一个按钮，可以用来快速清除文本。

----

.. _class_LineEdit_property_context_menu_enabled:

- :ref:`bool<class_bool>` **context_menu_enabled**

+-----------+---------------------------------+
| *Default* | ``true``                        |
+-----------+---------------------------------+
| *Setter*  | set_context_menu_enabled(value) |
+-----------+---------------------------------+
| *Getter*  | is_context_menu_enabled()       |
+-----------+---------------------------------+

如果为\ ``true``\ ，右键单击将出现上下文菜单。

----

.. _class_LineEdit_property_editable:

- :ref:`bool<class_bool>` **editable**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_editable(value) |
+-----------+---------------------+
| *Getter*  | is_editable()       |
+-----------+---------------------+

如果为\ ``false``\ ，则不能修改现在的文本，也不能添加新文本。

----

.. _class_LineEdit_property_expand_to_text_length:

- :ref:`bool<class_bool>` **expand_to_text_length**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_expand_to_text_length(value) |
+-----------+----------------------------------+
| *Getter*  | get_expand_to_text_length()      |
+-----------+----------------------------------+

如果\ ``true``\ ，则\ ``LineEdit``\ 宽度将增加到比\ :ref:`text<class_LineEdit_property_text>`\ 长。如果\ :ref:`text<class_LineEdit_property_text>`\ 被缩短，它将\ **不**\ 压缩。

----

.. _class_LineEdit_property_max_length:

- :ref:`int<class_int>` **max_length**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_max_length(value) |
+-----------+-----------------------+
| *Getter*  | get_max_length()      |
+-----------+-----------------------+

在\ ``LineEdit``\ 内可输入的最大字符量。如果\ ``0``\ ，则没有限制。

当定义了限制时，超过\ :ref:`max_length<class_LineEdit_property_max_length>`\ 的字符会被截断。这在设置最大长度时现有的 :ref:`text<class_LineEdit_property_text>` 内容，或在\ ``LineEdit``\ 中插入的新文本，包括粘贴时发生。如果任何输入的文本被截断，\ :ref:`text_change_rejected<class_LineEdit_signal_text_change_rejected>`\ 信号将以被截断的子串为参数发送出来。

\ **例如:**\ 

::

    text = "Hello world"
    max_length = 5
    # `text` becomes "Hello".
    max_length = 10
    text += " goodbye"
    # `text` becomes "Hello good".
    # `text_change_rejected` is emitted with "bye" as parameter.

----

.. _class_LineEdit_property_placeholder_alpha:

- :ref:`float<class_float>` **placeholder_alpha**

+-----------+------------------------------+
| *Default* | ``0.6``                      |
+-----------+------------------------------+
| *Setter*  | set_placeholder_alpha(value) |
+-----------+------------------------------+
| *Getter*  | get_placeholder_alpha()      |
+-----------+------------------------------+

:ref:`placeholder_text<class_LineEdit_property_placeholder_text>`\ 的不透明度。值从\ ``0``\ 到\ ``1``\ 。

----

.. _class_LineEdit_property_placeholder_text:

- :ref:`String<class_String>` **placeholder_text**

+-----------+------------------------+
| *Default* | ``""``                 |
+-----------+------------------------+
| *Setter*  | set_placeholder(value) |
+-----------+------------------------+
| *Getter*  | get_placeholder()      |
+-----------+------------------------+

当\ ``LineEdit``\ 为空时显示的文本。它\ **不是**\ ``LineEdit``\ 的默认值（见 :ref:`text<class_LineEdit_property_text>`\ ）。

----

.. _class_LineEdit_property_right_icon:

- :ref:`Texture<class_Texture>` **right_icon**

+----------+-----------------------+
| *Setter* | set_right_icon(value) |
+----------+-----------------------+
| *Getter* | get_right_icon()      |
+----------+-----------------------+

如果没有\ :ref:`text<class_LineEdit_property_text>`\ ，或如果\ :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>`\ 设置为\ ``false``\ ，则设置将出现在\ ``LineEdit``\ 右端的图标。

----

.. _class_LineEdit_property_secret:

- :ref:`bool<class_bool>` **secret**

+-----------+-------------------+
| *Default* | ``false``         |
+-----------+-------------------+
| *Setter*  | set_secret(value) |
+-----------+-------------------+
| *Getter*  | is_secret()       |
+-----------+-------------------+

如果为\ ``true``\ ，每个字符都会被替换成密码字符（参考\ :ref:`secret_character<class_LineEdit_property_secret_character>`\ ）。

----

.. _class_LineEdit_property_secret_character:

- :ref:`String<class_String>` **secret_character**

+-----------+-----------------------------+
| *Default* | ``"*"``                     |
+-----------+-----------------------------+
| *Setter*  | set_secret_character(value) |
+-----------+-----------------------------+
| *Getter*  | get_secret_character()      |
+-----------+-----------------------------+

用来作为密码输入的字符（默认为 "\*"）。只能用一个字符作为密码字符。

----

.. _class_LineEdit_property_selecting_enabled:

- :ref:`bool<class_bool>` **selecting_enabled**

+-----------+------------------------------+
| *Default* | ``true``                     |
+-----------+------------------------------+
| *Setter*  | set_selecting_enabled(value) |
+-----------+------------------------------+
| *Getter*  | is_selecting_enabled()       |
+-----------+------------------------------+

如果为\ ``false``\ ，则无法用鼠标或键盘选择文本。

----

.. _class_LineEdit_property_shortcut_keys_enabled:

- :ref:`bool<class_bool>` **shortcut_keys_enabled**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_shortcut_keys_enabled(value) |
+-----------+----------------------------------+
| *Getter*  | is_shortcut_keys_enabled()       |
+-----------+----------------------------------+

如果为\ ``false``\ ，快捷键将被禁用。

----

.. _class_LineEdit_property_text:

- :ref:`String<class_String>` **text**

+-----------+-----------------+
| *Default* | ``""``          |
+-----------+-----------------+
| *Setter*  | set_text(value) |
+-----------+-----------------+
| *Getter*  | get_text()      |
+-----------+-----------------+

``LineEdit``\ 的字符串值。

\ **注意:**\ 使用这个属性更改文本不会触发\ :ref:`text_changed<class_LineEdit_signal_text_changed>`\ 信号。

----

.. _class_LineEdit_property_virtual_keyboard_enabled:

- :ref:`bool<class_bool>` **virtual_keyboard_enabled**

+-----------+-------------------------------------+
| *Default* | ``true``                            |
+-----------+-------------------------------------+
| *Setter*  | set_virtual_keyboard_enabled(value) |
+-----------+-------------------------------------+
| *Getter*  | is_virtual_keyboard_enabled()       |
+-----------+-------------------------------------+

如果\ ``true``\ ，则本机虚拟键盘将显示在支持它的平台上。

方法说明
--------

.. _class_LineEdit_method_append_at_cursor:

- void **append_at_cursor** **(** :ref:`String<class_String>` text **)**

在光标后添加\ ``text``\ 文本。如果产生的值长于\ :ref:`max_length<class_LineEdit_property_max_length>`\ ，则不会发生任何事情。

----

.. _class_LineEdit_method_clear:

- void **clear** **(** **)**

擦除 ``LineEdit`` 的 :ref:`text<class_LineEdit_property_text>`\ 文本 。

----

.. _class_LineEdit_method_delete_char_at_cursor:

- void **delete_char_at_cursor** **(** **)**

在光标的当前位置删除一个字符（相当于按\ ``Delete``\ 键）。

----

.. _class_LineEdit_method_delete_text:

- void **delete_text** **(** :ref:`int<class_int>` from_column, :ref:`int<class_int>` to_column **)**

删除从\ ``from_column``\ 到\ ``to_column``\ 位置的文本\ :ref:`text<class_LineEdit_property_text>`\ 的一部分。两个参数都应该在文本的长度之内。

----

.. _class_LineEdit_method_deselect:

- void **deselect** **(** **)**

清除当前选择。

----

.. _class_LineEdit_method_get_menu:

- :ref:`PopupMenu<class_PopupMenu>` **get_menu** **(** **)** |const|

返回这个\ ``LineEdit``\ 的\ :ref:`PopupMenu<class_PopupMenu>`\ 。默认情况下，这个菜单在右键点击\ ``LineEdit``\ 时显示。

\ **警告：** 这是一个必要的内部节点，移除和释放它可能会导致崩溃。如果你想隐藏它或它的任何子节点，请使用其的 :ref:`CanvasItem.visible<class_CanvasItem_property_visible>` 属性。

----

.. _class_LineEdit_method_get_scroll_offset:

- :ref:`int<class_int>` **get_scroll_offset** **(** **)** |const|

返回由\ :ref:`caret_position<class_LineEdit_property_caret_position>`\ 引起的滚动偏移，作为数字字符串。

----

.. _class_LineEdit_method_menu_option:

- void **menu_option** **(** :ref:`int<class_int>` option **)**

执行\ :ref:`MenuItems<enum_LineEdit_MenuItems>`\ 枚举中定义的给定操作。

----

.. _class_LineEdit_method_select:

- void **select** **(** :ref:`int<class_int>` from=0, :ref:`int<class_int>` to=-1 **)**

在\ ``from``\ 和\ ``to``\ 之间的\ ``LineEdit``\ 内选择字符。默认情况下，\ ``from``\ 位于开头，\ ``to``\ 位于结尾。

::

    text = "Welcome"
    select() # 将选择 "Welcome".
    select(4) # 将选择 "ome".
    select(2, 5) #将选择 "lco".

----

.. _class_LineEdit_method_select_all:

- void **select_all** **(** **)**

选择整个 :ref:`String<class_String>`\ 。

Theme Property Descriptions
---------------------------

.. _class_LineEdit_theme_color_clear_button_color:

- :ref:`Color<class_Color>` **clear_button_color**

+-----------+----------------------------------+
| *Default* | ``Color( 0.88, 0.88, 0.88, 1 )`` |
+-----------+----------------------------------+

用作清除按钮默认色调的颜色。

----

.. _class_LineEdit_theme_color_clear_button_color_pressed:

- :ref:`Color<class_Color>` **clear_button_color_pressed**

+-----------+-------------------------+
| *Default* | ``Color( 1, 1, 1, 1 )`` |
+-----------+-------------------------+

按下清除按钮时使用的颜色。

----

.. _class_LineEdit_theme_color_cursor_color:

- :ref:`Color<class_Color>` **cursor_color**

+-----------+----------------------------------+
| *Default* | ``Color( 0.94, 0.94, 0.94, 1 )`` |
+-----------+----------------------------------+

``LineEdit``\ 可视光标(插入符号)的颜色。

----

.. _class_LineEdit_theme_color_font_color:

- :ref:`Color<class_Color>` **font_color**

+-----------+----------------------------------+
| *Default* | ``Color( 0.88, 0.88, 0.88, 1 )`` |
+-----------+----------------------------------+

默认字体颜色。

----

.. _class_LineEdit_theme_color_font_color_selected:

- :ref:`Color<class_Color>` **font_color_selected**

+-----------+-------------------------+
| *Default* | ``Color( 0, 0, 0, 1 )`` |
+-----------+-------------------------+

选定文本的字体颜色(在选择矩形内)。

----

.. _class_LineEdit_theme_color_font_color_uneditable:

- :ref:`Color<class_Color>` **font_color_uneditable**

+-----------+------------------------------------+
| *Default* | ``Color( 0.88, 0.88, 0.88, 0.5 )`` |
+-----------+------------------------------------+

禁用编辑时的字体颜色。

----

.. _class_LineEdit_theme_color_selection_color:

- :ref:`Color<class_Color>` **selection_color**

+-----------+----------------------------------+
| *Default* | ``Color( 0.49, 0.49, 0.49, 1 )`` |
+-----------+----------------------------------+

选择矩形的颜色。

----

.. _class_LineEdit_theme_constant_minimum_spaces:

- :ref:`int<class_int>` **minimum_spaces**

+-----------+--------+
| *Default* | ``12`` |
+-----------+--------+

文本的最小水平空间(不包括清除按钮和内容边距)。该值以空格字符的计数来衡量(即无需滚动即可显示空格字符的数量)。

----

.. _class_LineEdit_theme_font_font:

- :ref:`Font<class_Font>` **font**

文本使用的字体。

----

.. _class_LineEdit_theme_icon_clear:

- :ref:`Texture<class_Texture>` **clear**

“清除”按钮的纹理。请参阅\ :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>`\ 。

----

.. _class_LineEdit_theme_style_focus:

- :ref:`StyleBox<class_StyleBox>` **focus**

当\ ``LineEdit``\ 具有图形用户界面焦点时使用的背景。

----

.. _class_LineEdit_theme_style_normal:

- :ref:`StyleBox<class_StyleBox>` **normal**

``LineEdit``\ 的默认背景。

----

.. _class_LineEdit_theme_style_read_only:

- :ref:`StyleBox<class_StyleBox>` **read_only**

``LineEdit``\ 处于只读模式时使用的背景(:ref:`editable<class_LineEdit_property_editable>`\ 设置为\ ``false``)。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
