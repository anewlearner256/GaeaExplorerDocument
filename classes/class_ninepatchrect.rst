:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the NinePatchRect.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_NinePatchRect:

NinePatchRect
=============

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

可扩展的基于纹理的框架，对纹理的中心和侧面进行拼接，但保持角落的原始尺寸。非常适用于面板和对话框。

描述
----

NinePatchRect也被称为9片式面板，它基于一个小的纹理，产生任何尺寸的干净面板。为了做到这一点，它将纹理分割成3×3的网格。当你缩放节点时，它在水平或垂直方向上平铺纹理的两侧，在两个轴上平铺中心，但它不会缩放或平铺角部。

属性
----

+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>` | :ref:`axis_stretch_horizontal<class_NinePatchRect_property_axis_stretch_horizontal>` | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>` | :ref:`axis_stretch_vertical<class_NinePatchRect_property_axis_stretch_vertical>`     | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                    | :ref:`draw_center<class_NinePatchRect_property_draw_center>`                         | ``true``                                                              |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`MouseFilter<enum_Control_MouseFilter>`               | mouse_filter                                                                         | ``2`` (overrides :ref:`Control<class_Control_property_mouse_filter>`) |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`patch_margin_bottom<class_NinePatchRect_property_patch_margin_bottom>`         | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`patch_margin_left<class_NinePatchRect_property_patch_margin_left>`             | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`patch_margin_right<class_NinePatchRect_property_patch_margin_right>`           | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`patch_margin_top<class_NinePatchRect_property_patch_margin_top>`               | ``0``                                                                 |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                                  | :ref:`region_rect<class_NinePatchRect_property_region_rect>`                         | ``Rect2( 0, 0, 0, 0 )``                                               |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+
| :ref:`Texture<class_Texture>`                              | :ref:`texture<class_NinePatchRect_property_texture>`                                 |                                                                       |
+------------------------------------------------------------+--------------------------------------------------------------------------------------+-----------------------------------------------------------------------+

方法
----

+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>` | :ref:`get_patch_margin<class_NinePatchRect_method_get_patch_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                      |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                  | :ref:`set_patch_margin<class_NinePatchRect_method_set_patch_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`int<class_int>` value **)** |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_NinePatchRect_signal_texture_changed:

- **texture_changed** **(** **)**

当节点的纹理发生变化时触发。

枚举
----

.. _enum_NinePatchRect_AxisStretchMode:

.. _class_NinePatchRect_constant_AXIS_STRETCH_MODE_STRETCH:

.. _class_NinePatchRect_constant_AXIS_STRETCH_MODE_TILE:

.. _class_NinePatchRect_constant_AXIS_STRETCH_MODE_TILE_FIT:

enum **AxisStretchMode**:

- **AXIS_STRETCH_MODE_STRETCH** = **0** --- 将中间纹理拉伸到9切片矩形。这可能会导致纹理失真。

- **AXIS_STRETCH_MODE_TILE** = **1** --- 在 NinePatchRect 上重复中心纹理。这不会导致任何可见的失真。纹理必须是无缝的，这样才能在边缘之间不显示伪影的情况下工作。

\ **注：** 仅在使用 GLES3 渲染器时支持。使用 GLES2 渲染器时，这将类似于 :ref:`AXIS_STRETCH_MODE_STRETCH<class_NinePatchRect_constant_AXIS_STRETCH_MODE_STRETCH>`\ 。

- **AXIS_STRETCH_MODE_TILE_FIT** = **2** --- 在 NinePatchRect 上重复中心纹理，但也会拉伸纹理以确保每个图块都完整可见。这可能会导致纹理扭曲，但小于 :ref:`AXIS_STRETCH_MODE_STRETCH<class_NinePatchRect_constant_AXIS_STRETCH_MODE_STRETCH>`\ 。纹理必须是无缝的，这样才能在边缘之间不显示伪影的情况下工作。

\ **注：** 仅在使用 GLES3 渲染器时支持。使用 GLES2 渲染器时，这将类似于 :ref:`AXIS_STRETCH_MODE_STRETCH<class_NinePatchRect_constant_AXIS_STRETCH_MODE_STRETCH>`\ 。

属性说明
--------

.. _class_NinePatchRect_property_axis_stretch_horizontal:

- :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>` **axis_stretch_horizontal**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_h_axis_stretch_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_h_axis_stretch_mode()      |
+-----------+--------------------------------+

水平拉伸/平铺时使用的拉伸模式。参阅\ :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>`\ 。

----

.. _class_NinePatchRect_property_axis_stretch_vertical:

- :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>` **axis_stretch_vertical**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_v_axis_stretch_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_v_axis_stretch_mode()      |
+-----------+--------------------------------+

用于垂直拉伸/平铺的拉伸模式。参阅\ :ref:`AxisStretchMode<enum_NinePatchRect_AxisStretchMode>`\ 。

----

.. _class_NinePatchRect_property_draw_center:

- :ref:`bool<class_bool>` **draw_center**

+-----------+--------------------------+
| *Default* | ``true``                 |
+-----------+--------------------------+
| *Setter*  | set_draw_center(value)   |
+-----------+--------------------------+
| *Getter*  | is_draw_center_enabled() |
+-----------+--------------------------+

如果\ ``true``\ ，则绘制面板的中心。否则，只画9-slice的边框。

----

.. _class_NinePatchRect_property_patch_margin_bottom:

- :ref:`int<class_int>` **patch_margin_bottom**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_patch_margin(value) |
+-----------+-------------------------+
| *Getter*  | get_patch_margin()      |
+-----------+-------------------------+

9-slice的底层行的高度。边距为16意味着9片的底角和侧面将有16像素的高度。你可以单独设置所有4个边距值来创建具有非统一边框的面板。

----

.. _class_NinePatchRect_property_patch_margin_left:

- :ref:`int<class_int>` **patch_margin_left**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_patch_margin(value) |
+-----------+-------------------------+
| *Getter*  | get_patch_margin()      |
+-----------+-------------------------+

9-切片的左列宽度。边距为16意味着9切片的左角和侧面将有16像素的宽度。你可以单独设置所有4个边距值，来创建有非统一边框的面板。

----

.. _class_NinePatchRect_property_patch_margin_right:

- :ref:`int<class_int>` **patch_margin_right**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_patch_margin(value) |
+-----------+-------------------------+
| *Getter*  | get_patch_margin()      |
+-----------+-------------------------+

9-切片的右列宽度。边距为16意味着9切片的右角和侧面将有16像素的宽度。你可以单独设置所有4个边距值，以创建有非统一边框的面板。

----

.. _class_NinePatchRect_property_patch_margin_top:

- :ref:`int<class_int>` **patch_margin_top**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_patch_margin(value) |
+-----------+-------------------------+
| *Getter*  | get_patch_margin()      |
+-----------+-------------------------+

9切片的顶行的高度。边距为16意味着9切片的顶角和侧面将有16像素的高度。你可以单独设置所有4个边距值，来创建有非统一边框的面板。

----

.. _class_NinePatchRect_property_region_rect:

- :ref:`Rect2<class_Rect2>` **region_rect**

+-----------+-------------------------+
| *Default* | ``Rect2( 0, 0, 0, 0 )`` |
+-----------+-------------------------+
| *Setter*  | set_region_rect(value)  |
+-----------+-------------------------+
| *Getter*  | get_region_rect()       |
+-----------+-------------------------+

要取样的纹理的矩形区域。如果你正在使用一个图集，使用这个属性来定义9-slice应该使用的区域。所有其他属性都是相对于这个属性而言的。如果矩形为空，NinePatchRect将使用整个纹理。

----

.. _class_NinePatchRect_property_texture:

- :ref:`Texture<class_Texture>` **texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

节点的纹理资源。

方法说明
--------

.. _class_NinePatchRect_method_get_patch_margin:

- :ref:`int<class_int>` **get_patch_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

返回由给定的\ :ref:`Margin<enum_@GlobalScope_Margin>`\ 常量标识的边距大小。

----

.. _class_NinePatchRect_method_set_patch_margin:

- void **set_patch_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`int<class_int>` value **)**

将由给定的\ :ref:`Margin<enum_@GlobalScope_Margin>`\ 常量标识的边距大小设置为\ ``value``\ ，单位为像素。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
