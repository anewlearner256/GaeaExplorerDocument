:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the GDScriptFunctionState.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GDScriptFunctionState:

GDScriptFunctionState
=====================

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

一个函数在调用后失效的状态。

描述
----

在函数中调用 :ref:`@GDScript.yield<class_@GDScript_method_yield>` 将导致该函数作为此类型的对象让步并返回其当前状态。然后可以通过在此状态对象上调用 :ref:`resume<class_GDScriptFunctionState_method_resume>` 来使让步的函数恢复调用。

方法
----

+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_valid<class_GDScriptFunctionState_method_is_valid>` **(** :ref:`bool<class_bool>` extended_check=false **)** |const| |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`resume<class_GDScriptFunctionState_method_resume>` **(** :ref:`Variant<class_Variant>` arg=null **)**                   |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_GDScriptFunctionState_signal_completed:

- **completed** **(** :ref:`Variant<class_Variant>` result **)**

方法说明
--------

.. _class_GDScriptFunctionState_method_is_valid:

- :ref:`bool<class_bool>` **is_valid** **(** :ref:`bool<class_bool>` extended_check=false **)** |const|

检查函数调用是否可以被恢复。如果函数状态已经被恢复，则不存在这种情况。

如果\ ``extended_check``\ 被启用，它还会检查相关的脚本和对象是否仍然存在。扩展检查是在调试模式下作为\ :ref:`resume<class_GDScriptFunctionState_method_resume>`\ 的一部分进行的，但是如果你知道你可能在不确定对象和/或脚本已经存活到那个点的情况下尝试恢复，你可以使用这个。

----

.. _class_GDScriptFunctionState_method_resume:

- :ref:`Variant<class_Variant>` **resume** **(** :ref:`Variant<class_Variant>` arg=null **)**

继续执行让步的函数调用。

如果传递了一个参数，则从产生的函数调用中的 :ref:`@GDScript.yield<class_@GDScript_method_yield>` 调用返回参数。你可以通过例如一个 :ref:`Array<class_Array>` 来处理多个参数。 

此函数返回接续的函数调用后返回的内容，如果再次恢复调用，可能是另一个函数状态。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
