:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the HTTPRequest.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_HTTPRequest:

HTTPRequest
===========

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

具有发送 HTTP(S) 请求能力的节点。

描述
----

有能力发送HTTP请求的节点。内部使用\ :ref:`HTTPClient<class_HTTPClient>`\ 。

可以用来进行HTTP请求，即通过HTTP下载或上传文件或网络内容。

\ **警告：**\ 参阅\ :ref:`HTTPClient<class_HTTPClient>`\ 的注释和警告，以了解其局限性，特别是关于SSL的安全性。

\ **连接REST API并打印其返回字段之一的例子：**\ 

::

    func _ready():
        # Create an HTTP request node and connect its completion signal.
        var http_request = HTTPRequest.new()
        add_child(http_request)
        http_request.connect("request_completed", self, "_http_request_completed")
    
        # Perform a GET request. The URL below returns JSON as of writing.
        var error = http_request.request("https://httpbin.org/get")
        if error != OK:
            push_error("An error occurred in the HTTP request.")
    
        # Perform a POST request. The URL below returns JSON as of writing.
        # Note: Don't make simultaneous requests using a single HTTPRequest node.
        # The snippet below is provided for reference only.
        var body = {"name": "Godette"}
        error = http_request.request("https://httpbin.org/post", [], true, HTTPClient.METHOD_POST, body)
        if error != OK:
            push_error("An error occurred in the HTTP request.")
    
    
    # Called when the HTTP request is completed.
    func _http_request_completed(result, response_code, headers, body):
        var response = parse_json(body.get_string_from_utf8())
    
        # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).
        print(response.headers["User-Agent"])

\ **使用HTTPRequest加载和显示图片的例子：**\ 

::

    func _ready():
        # Create an HTTP request node and connect its completion signal.
        var http_request = HTTPRequest.new()
        add_child(http_request)
        http_request.connect("request_completed", self, "_http_request_completed")
    
        # Perform the HTTP request. The URL below returns a PNG image as of writing.
        var error = http_request.request("https://via.placeholder.com/512")
        if error != OK:
            push_error("An error occurred in the HTTP request.")
    
    
    # Called when the HTTP request is completed.
    func _http_request_completed(result, response_code, headers, body):
        var image = Image.new()
        var error = image.load_png_from_buffer(body)
        if error != OK:
            push_error("Couldn't load the image.")
    
        var texture = ImageTexture.new()
        texture.create_from_image(image)
    
        # Display the image in a TextureRect node.
        var texture_rect = TextureRect.new()
        add_child(texture_rect)
        texture_rect.texture = texture

教程
----

- :doc:`../tutorials/networking/http_request_class`

- :doc:`../tutorials/networking/ssl_certificates`

属性
----

+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`body_size_limit<class_HTTPRequest_property_body_size_limit>`         | ``-1``    |
+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`download_chunk_size<class_HTTPRequest_property_download_chunk_size>` | ``65536`` |
+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`String<class_String>` | :ref:`download_file<class_HTTPRequest_property_download_file>`             | ``""``    |
+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`max_redirects<class_HTTPRequest_property_max_redirects>`             | ``8``     |
+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`timeout<class_HTTPRequest_property_timeout>`                         | ``0``     |
+-----------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`     | :ref:`use_threads<class_HTTPRequest_property_use_threads>`                 | ``false`` |
+-----------------------------+----------------------------------------------------------------------------+-----------+

方法
----

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`cancel_request<class_HTTPRequest_method_cancel_request>` **(** **)**                                                                                                                                                                                                                                                                                             |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_body_size<class_HTTPRequest_method_get_body_size>` **(** **)** |const|                                                                                                                                                                                                                                                                                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_downloaded_bytes<class_HTTPRequest_method_get_downloaded_bytes>` **(** **)** |const|                                                                                                                                                                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Status<enum_HTTPClient_Status>` | :ref:`get_http_client_status<class_HTTPRequest_method_get_http_client_status>` **(** **)** |const|                                                                                                                                                                                                                                                                     |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`request<class_HTTPRequest_method_request>` **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ), :ref:`bool<class_bool>` ssl_validate_domain=true, :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`String<class_String>` request_data="" **)**                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`request_raw<class_HTTPRequest_method_request_raw>` **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ), :ref:`bool<class_bool>` ssl_validate_domain=true, :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`PoolByteArray<class_PoolByteArray>` request_data_raw=PoolByteArray(  ) **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_http_proxy<class_HTTPRequest_method_set_http_proxy>` **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**                                                                                                                                                                                                                                |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_https_proxy<class_HTTPRequest_method_set_https_proxy>` **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**                                                                                                                                                                                                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

信号
----

.. _class_HTTPRequest_signal_request_completed:

- **request_completed** **(** :ref:`int<class_int>` result, :ref:`int<class_int>` response_code, :ref:`PoolStringArray<class_PoolStringArray>` headers, :ref:`PoolByteArray<class_PoolByteArray>` body **)**

请求完成时触发。

枚举
----

.. _enum_HTTPRequest_Result:

.. _class_HTTPRequest_constant_RESULT_SUCCESS:

.. _class_HTTPRequest_constant_RESULT_CHUNKED_BODY_SIZE_MISMATCH:

.. _class_HTTPRequest_constant_RESULT_CANT_CONNECT:

.. _class_HTTPRequest_constant_RESULT_CANT_RESOLVE:

.. _class_HTTPRequest_constant_RESULT_CONNECTION_ERROR:

.. _class_HTTPRequest_constant_RESULT_SSL_HANDSHAKE_ERROR:

.. _class_HTTPRequest_constant_RESULT_NO_RESPONSE:

.. _class_HTTPRequest_constant_RESULT_BODY_SIZE_LIMIT_EXCEEDED:

.. _class_HTTPRequest_constant_RESULT_REQUEST_FAILED:

.. _class_HTTPRequest_constant_RESULT_DOWNLOAD_FILE_CANT_OPEN:

.. _class_HTTPRequest_constant_RESULT_DOWNLOAD_FILE_WRITE_ERROR:

.. _class_HTTPRequest_constant_RESULT_REDIRECT_LIMIT_REACHED:

.. _class_HTTPRequest_constant_RESULT_TIMEOUT:

enum **Result**:

- **RESULT_SUCCESS** = **0** --- 请求成功。

- **RESULT_CHUNKED_BODY_SIZE_MISMATCH** = **1**

- **RESULT_CANT_CONNECT** = **2** --- 连接时请求失败。

- **RESULT_CANT_RESOLVE** = **3** --- 解析时请求失败。

- **RESULT_CONNECTION_ERROR** = **4** --- 因连接（读写）错误而失败。

- **RESULT_SSL_HANDSHAKE_ERROR** = **5** --- SSL 握手时请求失败。

- **RESULT_NO_RESPONSE** = **6** --- 请求（目前还）没有获得相应。

- **RESULT_BODY_SIZE_LIMIT_EXCEEDED** = **7** --- 请求超出了大小上限，见 :ref:`body_size_limit<class_HTTPRequest_property_body_size_limit>`\ 。

- **RESULT_REQUEST_FAILED** = **8** --- 请求失败（目前未使用）。

- **RESULT_DOWNLOAD_FILE_CANT_OPEN** = **9** --- HTTPRequest 无法打开下载文件。

- **RESULT_DOWNLOAD_FILE_WRITE_ERROR** = **10** --- HTTPRequest 无法写入下载文件。

- **RESULT_REDIRECT_LIMIT_REACHED** = **11** --- 请求超出了重定向次数上限，见 :ref:`max_redirects<class_HTTPRequest_property_max_redirects>`\ 。

- **RESULT_TIMEOUT** = **12**

属性说明
--------

.. _class_HTTPRequest_property_body_size_limit:

- :ref:`int<class_int>` **body_size_limit**

+-----------+----------------------------+
| *Default* | ``-1``                     |
+-----------+----------------------------+
| *Setter*  | set_body_size_limit(value) |
+-----------+----------------------------+
| *Getter*  | get_body_size_limit()      |
+-----------+----------------------------+

允许的最大响应体大小。

----

.. _class_HTTPRequest_property_download_chunk_size:

- :ref:`int<class_int>` **download_chunk_size**

+-----------+--------------------------------+
| *Default* | ``65536``                      |
+-----------+--------------------------------+
| *Setter*  | set_download_chunk_size(value) |
+-----------+--------------------------------+
| *Getter*  | get_download_chunk_size()      |
+-----------+--------------------------------+

使用的缓冲区大小和每次迭代读取的最大字节数。参阅 :ref:`HTTPClient.read_chunk_size<class_HTTPClient_property_read_chunk_size>`\ 。

下载小文件时将其设置为较低的值，以降低内存使用量，但会降低下载速度，例如 4096 表示 4 KiB。

----

.. _class_HTTPRequest_property_download_file:

- :ref:`String<class_String>` **download_file**

+-----------+--------------------------+
| *Default* | ``""``                   |
+-----------+--------------------------+
| *Setter*  | set_download_file(value) |
+-----------+--------------------------+
| *Getter*  | get_download_file()      |
+-----------+--------------------------+

下载到的文件。将在其中写入任何收到的文件。

----

.. _class_HTTPRequest_property_max_redirects:

- :ref:`int<class_int>` **max_redirects**

+-----------+--------------------------+
| *Default* | ``8``                    |
+-----------+--------------------------+
| *Setter*  | set_max_redirects(value) |
+-----------+--------------------------+
| *Getter*  | get_max_redirects()      |
+-----------+--------------------------+

允许的最大重定向数。

----

.. _class_HTTPRequest_property_timeout:

- :ref:`int<class_int>` **timeout**

+-----------+--------------------+
| *Default* | ``0``              |
+-----------+--------------------+
| *Setter*  | set_timeout(value) |
+-----------+--------------------+
| *Getter*  | get_timeout()      |
+-----------+--------------------+

----

.. _class_HTTPRequest_property_use_threads:

- :ref:`bool<class_bool>` **use_threads**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_use_threads(value) |
+-----------+------------------------+
| *Getter*  | is_using_threads()     |
+-----------+------------------------+

为 ``true`` 时，将启用多线程提高性能。

方法说明
--------

.. _class_HTTPRequest_method_cancel_request:

- void **cancel_request** **(** **)**

取消当前请求。

----

.. _class_HTTPRequest_method_get_body_size:

- :ref:`int<class_int>` **get_body_size** **(** **)** |const|

返回响应体长度。

\ **注意：** 部分 Web 服务器可能不发送响应体长度，此时返回值将为 ``-1``\ 。如果使用分块传输编码，响应体的长度也将为 ``-1``\ 。

----

.. _class_HTTPRequest_method_get_downloaded_bytes:

- :ref:`int<class_int>` **get_downloaded_bytes** **(** **)** |const|

返回该 HTTPRequest 已下载的字节数。

----

.. _class_HTTPRequest_method_get_http_client_status:

- :ref:`Status<enum_HTTPClient_Status>` **get_http_client_status** **(** **)** |const|

返回内部 :ref:`HTTPClient<class_HTTPClient>` 的当前状态。见 :ref:`Status<enum_HTTPClient_Status>`\ 。

----

.. _class_HTTPRequest_method_request:

- :ref:`Error<enum_@GlobalScope_Error>` **request** **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ), :ref:`bool<class_bool>` ssl_validate_domain=true, :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`String<class_String>` request_data="" **)**

在底层的 :ref:`HTTPClient<class_HTTPClient>` 上创建请求。如果没有配置错误，它会尝试使用 :ref:`HTTPClient.connect_to_host<class_HTTPClient_method_connect_to_host>` 连接并将参数传递给 :ref:`HTTPClient.request<class_HTTPClient_method_request>`\ 。

如果请求创建成功，则返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 。 （并不意味着服务器已响应），\ :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>` 如果不在树中，\ :ref:`@GlobalScope.ERR_BUSY<class_@GlobalScope_constant_ERR_BUSY>` 如果仍在处理先前的请求，\ :ref:`@GlobalScope.ERR_INVALID_PARAMETER<class_@GlobalScope_constant_ERR_INVALID_PARAMETER>` 如果给定的字符串不是有效的 URL 格式，或 :ref:`@GlobalScope.ERR_CANT_CONNECT<class_@GlobalScope_constant_ERR_CANT_CONNECT>`\ 如果不使用线程并且 :ref:`HTTPClient<class_HTTPClient>` 无法连接到主机。

\ **注意：**\ 当\ ``method``\ 为\ :ref:`HTTPClient.METHOD_GET<class_HTTPClient_constant_METHOD_GET>`\ 时，通过\ ``request_data``\ 发送的payload可能会被服务器忽略甚至导致服务器拒绝请求，参阅 `RFC 7231 第 4.3.1 节 <https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1>`__ 了解更多。作为一种解决方法，你可以将数据作为 URL 中的查询字符串发送。参阅 :ref:`String.http_escape<class_String_method_http_escape>` 示例。

----

.. _class_HTTPRequest_method_request_raw:

- :ref:`Error<enum_@GlobalScope_Error>` **request_raw** **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ), :ref:`bool<class_bool>` ssl_validate_domain=true, :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`PoolByteArray<class_PoolByteArray>` request_data_raw=PoolByteArray(  ) **)**

在底层的\ :ref:`HTTPClient<class_HTTPClient>`\ 上创建请求，使用一个原始字节数组作为请求主体。如果没有配置错误，它会尝试使用 :ref:`HTTPClient.connect_to_host<class_HTTPClient_method_connect_to_host>` 连接并将参数传递给 :ref:`HTTPClient.request<class_HTTPClient_method_request>`\ 。

如果请求创建成功，则返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 。 （并不意味着服务器已响应），\ :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>` 如果不在树中，\ :ref:`@GlobalScope.ERR_BUSY<class_@GlobalScope_constant_ERR_BUSY>` 如果仍在处理先前的请求，\ :ref:`@GlobalScope.ERR_INVALID_PARAMETER<class_@GlobalScope_constant_ERR_INVALID_PARAMETER>` 如果给定的字符串不是有效的 URL 格式，或 :ref:`@GlobalScope.ERR_CANT_CONNECT<class_@GlobalScope_constant_ERR_CANT_CONNECT>`\ 如果不使用线程并且 :ref:`HTTPClient<class_HTTPClient>` 无法连接到主机。

----

.. _class_HTTPRequest_method_set_http_proxy:

- void **set_http_proxy** **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**

Sets the proxy server for HTTP requests.

The proxy server is unset if ``host`` is empty or ``port`` is -1.

----

.. _class_HTTPRequest_method_set_https_proxy:

- void **set_https_proxy** **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**

Sets the proxy server for HTTPS requests.

The proxy server is unset if ``host`` is empty or ``port`` is -1.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
