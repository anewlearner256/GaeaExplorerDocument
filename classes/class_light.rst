:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Light.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Light:

Light
=====

**Inherits:** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`CullInstance<class_CullInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`DirectionalLight<class_DirectionalLight>`, :ref:`OmniLight<class_OmniLight>`, :ref:`SpotLight<class_SpotLight>`

为不同类型的光节点提供基类。

描述
----

Light 是灯光节点的\ *抽象*\ 基类。它不能被实例化，所以它不应该被直接使用。其他类型的灯光节点都是继承自它。灯光包含用于照明的常用变量和参数。

教程
----

- :doc:`3D lights and shadows <../tutorials/3d/lights_and_shadows>`

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

属性
----

+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`              | :ref:`editor_only<class_Light_property_editor_only>`                           | ``false``               |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`BakeMode<enum_Light_BakeMode>` | :ref:`light_bake_mode<class_Light_property_light_bake_mode>`                   | ``1``                   |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`            | :ref:`light_color<class_Light_property_light_color>`                           | ``Color( 1, 1, 1, 1 )`` |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`                | :ref:`light_cull_mask<class_Light_property_light_cull_mask>`                   | ``4294967295``          |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`light_energy<class_Light_property_light_energy>`                         | ``1.0``                 |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`light_indirect_energy<class_Light_property_light_indirect_energy>`       | ``1.0``                 |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`              | :ref:`light_negative<class_Light_property_light_negative>`                     | ``false``               |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`light_size<class_Light_property_light_size>`                             | ``0.0``                 |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`light_specular<class_Light_property_light_specular>`                     | ``0.5``                 |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`shadow_bias<class_Light_property_shadow_bias>`                           | ``0.15``                |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`            | :ref:`shadow_color<class_Light_property_shadow_color>`                         | ``Color( 0, 0, 0, 1 )`` |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`            | :ref:`shadow_contact<class_Light_property_shadow_contact>`                     | ``0.0``                 |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`              | :ref:`shadow_enabled<class_Light_property_shadow_enabled>`                     | ``false``               |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`              | :ref:`shadow_reverse_cull_face<class_Light_property_shadow_reverse_cull_face>` | ``false``               |
+--------------------------------------+--------------------------------------------------------------------------------+-------------------------+

方法
----

+---------------------------+----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`get_param<class_Light_method_get_param>` **(** :ref:`Param<enum_Light_Param>` param **)** |const|                          |
+---------------------------+----------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_param<class_Light_method_set_param>` **(** :ref:`Param<enum_Light_Param>` param, :ref:`float<class_float>` value **)** |
+---------------------------+----------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_Light_Param:

.. _class_Light_constant_PARAM_ENERGY:

.. _class_Light_constant_PARAM_INDIRECT_ENERGY:

.. _class_Light_constant_PARAM_SIZE:

.. _class_Light_constant_PARAM_SPECULAR:

.. _class_Light_constant_PARAM_RANGE:

.. _class_Light_constant_PARAM_ATTENUATION:

.. _class_Light_constant_PARAM_SPOT_ANGLE:

.. _class_Light_constant_PARAM_SPOT_ATTENUATION:

.. _class_Light_constant_PARAM_CONTACT_SHADOW_SIZE:

.. _class_Light_constant_PARAM_SHADOW_MAX_DISTANCE:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_1_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_2_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_3_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_NORMAL_BIAS:

.. _class_Light_constant_PARAM_SHADOW_BIAS:

.. _class_Light_constant_PARAM_SHADOW_BIAS_SPLIT_SCALE:

.. _class_Light_constant_PARAM_MAX:

enum **Param**:

- **PARAM_ENERGY** = **0** --- 访问\ :ref:`light_energy<class_Light_property_light_energy>`\ 的常数。

- **PARAM_INDIRECT_ENERGY** = **1** --- 访问\ :ref:`light_indirect_energy<class_Light_property_light_indirect_energy>`\ 的常数。

- **PARAM_SIZE** = **2** --- 访问\ :ref:`light_size<class_Light_property_light_size>`\ 的常数。

- **PARAM_SPECULAR** = **3** --- 访问\ :ref:`light_specular<class_Light_property_light_specular>`\ 的常数。

- **PARAM_RANGE** = **4** --- 用于访问 :ref:`OmniLight.omni_range<class_OmniLight_property_omni_range>` 或 :ref:`SpotLight.spot_range<class_SpotLight_property_spot_range>` 的常量。

- **PARAM_ATTENUATION** = **5** --- 用于访问 :ref:`OmniLight.omni_attenuation<class_OmniLight_property_omni_attenuation>` 或 :ref:`SpotLight.spot_attenuation<class_SpotLight_property_spot_attenuation>` 的常量。

- **PARAM_SPOT_ANGLE** = **6** --- 用于访问 :ref:`SpotLight.spot_angle<class_SpotLight_property_spot_angle>` 的常量。

- **PARAM_SPOT_ATTENUATION** = **7** --- 用于访问 :ref:`SpotLight.spot_angle_attenuation<class_SpotLight_property_spot_angle_attenuation>` 的常量。

- **PARAM_CONTACT_SHADOW_SIZE** = **8** --- 用于访问 :ref:`shadow_contact<class_Light_property_shadow_contact>` 的常量。

- **PARAM_SHADOW_MAX_DISTANCE** = **9** --- 用于访问 :ref:`DirectionalLight.directional_shadow_max_distance<class_DirectionalLight_property_directional_shadow_max_distance>` 的常量。

- **PARAM_SHADOW_SPLIT_1_OFFSET** = **10** --- 用于访问 :ref:`DirectionalLight.directional_shadow_split_1<class_DirectionalLight_property_directional_shadow_split_1>` 的常量。

- **PARAM_SHADOW_SPLIT_2_OFFSET** = **11** --- 用于访问 :ref:`DirectionalLight.directional_shadow_split_2<class_DirectionalLight_property_directional_shadow_split_2>` 的常量。

- **PARAM_SHADOW_SPLIT_3_OFFSET** = **12** --- 用于访问 :ref:`DirectionalLight.directional_shadow_split_3<class_DirectionalLight_property_directional_shadow_split_3>` 的常量。

- **PARAM_SHADOW_NORMAL_BIAS** = **13** --- 用于访问 :ref:`DirectionalLight.directional_shadow_normal_bias<class_DirectionalLight_property_directional_shadow_normal_bias>` 的常量。

- **PARAM_SHADOW_BIAS** = **14** --- 用于访问 :ref:`shadow_bias<class_Light_property_shadow_bias>` 的常量。

- **PARAM_SHADOW_BIAS_SPLIT_SCALE** = **15** --- 用于访问 :ref:`DirectionalLight.directional_shadow_bias_split_scale<class_DirectionalLight_property_directional_shadow_bias_split_scale>` 的常量。

- **PARAM_MAX** = **16** --- 表示 :ref:`Param<enum_Light_Param>` 枚举的大小。

----

.. _enum_Light_BakeMode:

.. _class_Light_constant_BAKE_DISABLED:

.. _class_Light_constant_BAKE_INDIRECT:

.. _class_Light_constant_BAKE_ALL:

enum **BakeMode**:

- **BAKE_DISABLED** = **0** --- 烘焙时忽略灯光。

\ **注意：**\ 隐藏灯光\ *不*\ 会影响烘焙。

- **BAKE_INDIRECT** = **1** --- 只会烘焙间接照明（默认）。

- **BAKE_ALL** = **2** --- 直接光和间接光都将被烘焙。

\ **注意：** 如果不想让灯光出现两次（动态和烘焙），则应隐藏灯光。

属性说明
--------

.. _class_Light_property_editor_only:

- :ref:`bool<class_bool>` **editor_only**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_editor_only(value) |
+-----------+------------------------+
| *Getter*  | is_editor_only()       |
+-----------+------------------------+

如果 ``true``\ ，灯光只在编辑器中出现，在运行时将不可见。

----

.. _class_Light_property_light_bake_mode:

- :ref:`BakeMode<enum_Light_BakeMode>` **light_bake_mode**

+-----------+----------------------+
| *Default* | ``1``                |
+-----------+----------------------+
| *Setter*  | set_bake_mode(value) |
+-----------+----------------------+
| *Getter*  | get_bake_mode()      |
+-----------+----------------------+

灯光的烘焙模式。参阅\ :ref:`BakeMode<enum_Light_BakeMode>`\ 。

----

.. _class_Light_property_light_color:

- :ref:`Color<class_Color>` **light_color**

+-----------+-------------------------+
| *Default* | ``Color( 1, 1, 1, 1 )`` |
+-----------+-------------------------+
| *Setter*  | set_color(value)        |
+-----------+-------------------------+
| *Getter*  | get_color()             |
+-----------+-------------------------+

光的颜色。一个过亮\ *overbright*\ 颜色可用于实现等效于增加光的能量 :ref:`light_energy<class_Light_property_light_energy>` 的结果。

----

.. _class_Light_property_light_cull_mask:

- :ref:`int<class_int>` **light_cull_mask**

+-----------+----------------------+
| *Default* | ``4294967295``       |
+-----------+----------------------+
| *Setter*  | set_cull_mask(value) |
+-----------+----------------------+
| *Getter*  | get_cull_mask()      |
+-----------+----------------------+

灯光将影响所选图层中的对象。

----

.. _class_Light_property_light_energy:

- :ref:`float<class_float>` **light_energy**

+-----------+------------------+
| *Default* | ``1.0``          |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

光的强度乘数，注，这不是物理单位。对于 :ref:`OmniLight<class_OmniLight>` 和 :ref:`SpotLight<class_SpotLight>`\ ，更改此值只会更改灯光颜色的强度，而不会更改灯光的半径。

----

.. _class_Light_property_light_indirect_energy:

- :ref:`float<class_float>` **light_indirect_energy**

+-----------+------------------+
| *Default* | ``1.0``          |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

与间接光（光反射）一起使用的辅助倍增器。这适用于 :ref:`BakedLightmap<class_BakedLightmap>` 和 :ref:`GIProbe<class_GIProbe>`\ 。

----

.. _class_Light_property_light_negative:

- :ref:`bool<class_bool>` **light_negative**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_negative(value) |
+-----------+---------------------+
| *Getter*  | is_negative()       |
+-----------+---------------------+

如果为 ``true``\ ，则光线的效果会逆转，使区域变暗并投射明亮的阴影。

----

.. _class_Light_property_light_size:

- :ref:`float<class_float>` **light_size**

+-----------+------------------+
| *Default* | ``0.0``          |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

灯光的大小，以GaaeExplorer的单位。只在烘烤的光照贴图中考虑，并且只在\ :ref:`light_bake_mode<class_Light_property_light_bake_mode>`\ 被设置为\ :ref:`BAKE_ALL<class_Light_constant_BAKE_ALL>`\ 时考虑。增加这个值会使阴影看起来更模糊。这可以在一定程度上用于模拟区域灯光。

----

.. _class_Light_property_light_specular:

- :ref:`float<class_float>` **light_specular**

+-----------+------------------+
| *Default* | ``0.5``          |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

受灯光影响的对象中镜面反射斑点的强度。在\ ``0``\ 处，灯光变成纯漫反射灯光。当不烘焙发射时，这可用于在发射表面上方放置灯光时避免不真实的反射。

----

.. _class_Light_property_shadow_bias:

- :ref:`float<class_float>` **shadow_bias**

+-----------+------------------+
| *Default* | ``0.15``         |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

用于调整阴影表现。值太小会导致自阴影（“阴影暗疮”），而值太大会导致阴影与之分离（“彼得平移”）。根据需要进行调整。

----

.. _class_Light_property_shadow_color:

- :ref:`Color<class_Color>` **shadow_color**

+-----------+-------------------------+
| *Default* | ``Color( 0, 0, 0, 1 )`` |
+-----------+-------------------------+
| *Setter*  | set_shadow_color(value) |
+-----------+-------------------------+
| *Getter*  | get_shadow_color()      |
+-----------+-------------------------+

光线投射的阴影的颜色。

----

.. _class_Light_property_shadow_contact:

- :ref:`float<class_float>` **shadow_contact**

+-----------+------------------+
| *Default* | ``0.0``          |
+-----------+------------------+
| *Setter*  | set_param(value) |
+-----------+------------------+
| *Getter*  | get_param()      |
+-----------+------------------+

尝试减少 :ref:`shadow_bias<class_Light_property_shadow_bias>` 差距。

----

.. _class_Light_property_shadow_enabled:

- :ref:`bool<class_bool>` **shadow_enabled**

+-----------+-------------------+
| *Default* | ``false``         |
+-----------+-------------------+
| *Setter*  | set_shadow(value) |
+-----------+-------------------+
| *Getter*  | has_shadow()      |
+-----------+-------------------+

如果为\ ``true``\ ，光线会投下阴影。

----

.. _class_Light_property_shadow_reverse_cull_face:

- :ref:`bool<class_bool>` **shadow_reverse_cull_face**

+-----------+-------------------------------------+
| *Default* | ``false``                           |
+-----------+-------------------------------------+
| *Setter*  | set_shadow_reverse_cull_face(value) |
+-----------+-------------------------------------+
| *Getter*  | get_shadow_reverse_cull_face()      |
+-----------+-------------------------------------+

如果 ``true``\ ，则反转网格的背面剔除。当你有一个后面有灯的平面网格时，这会很有用。如果需要在网格的两侧投射阴影，请使用 :ref:`GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED<class_GeometryInstance_constant_SHADOW_CASTING_SETTING_DOUBLE_SIDED>` 将网格设置为使用双面阴影。

方法说明
--------

.. _class_Light_method_get_param:

- :ref:`float<class_float>` **get_param** **(** :ref:`Param<enum_Light_Param>` param **)** |const|

返回指定的 :ref:`Param<enum_Light_Param>` 参数的值。

----

.. _class_Light_method_set_param:

- void **set_param** **(** :ref:`Param<enum_Light_Param>` param, :ref:`float<class_float>` value **)**

设置指定的 :ref:`Param<enum_Light_Param>` 参数的值。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
