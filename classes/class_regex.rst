:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the RegEx.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RegEx:

RegEx
=====

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

使用正则表达式搜索文本的类。

描述
----

A regular expression (or regex) is a compact language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of ``ab[0-9]`` would find any string that is ``ab`` followed by any number from ``0`` to ``9``. For a more in-depth look, you can easily find various tutorials and detailed explanations on the Internet.

To begin, the RegEx object needs to be compiled with the search pattern using :ref:`compile<class_RegEx_method_compile>` before it can be used.

::

    var regex = RegEx.new()
    regex.compile("\\w-(\\d+)")

The search pattern must be escaped first for GDScript before it is escaped for the expression. For example, ``compile("\\d+")`` would be read by RegEx as ``\d+``. Similarly, ``compile("\"(?:\\\\.|[^\"])*\"")`` would be read as ``"(?:\\.|[^"])*"``.

Using :ref:`search<class_RegEx_method_search>`, you can find the pattern within the given text. If a pattern is found, :ref:`RegExMatch<class_RegExMatch>` is returned and you can retrieve details of the results using methods such as :ref:`RegExMatch.get_string<class_RegExMatch_method_get_string>` and :ref:`RegExMatch.get_start<class_RegExMatch_method_get_start>`.

::

    var regex = RegEx.new()
    regex.compile("\\w-(\\d+)")
    var result = regex.search("abc n-0123")
    if result:
        print(result.get_string()) # Would print n-0123

The results of capturing groups ``()`` can be retrieved by passing the group number to the various methods in :ref:`RegExMatch<class_RegExMatch>`. Group 0 is the default and will always refer to the entire pattern. In the above example, calling ``result.get_string(1)`` would give you ``0123``.

This version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.

::

    var regex = RegEx.new()
    regex.compile("d(?<digit>[0-9]+)|x(?<digit>[0-9a-f]+)")
    var result = regex.search("the number is x2f")
    if result:
        print(result.get_string("digit")) # Would print 2f

If you need to process multiple results, :ref:`search_all<class_RegEx_method_search_all>` generates a list of all non-overlapping results. This can be combined with a ``for`` loop for convenience.

::

    for result in regex.search_all("d01, d03, d0c, x3f and x42"):
        print(result.get_string("digit"))
    # Would print 01 03 0 3f 42

\ **Example of splitting a string using a RegEx:**\ 

::

    var regex = RegEx.new()
    regex.compile("\\S+") # Negated whitespace character class.
    var results = []
    for result in regex.search_all("One  Two \n\tThree"):
        results.push_back(result.get_string())
    # The `results` array now contains "One", "Two", "Three".

\ **Note:** GaaeExplorer's regex implementation is based on the `PCRE2 <https://www.pcre.org/>`__ library. You can view the full pattern reference `here <https://www.pcre.org/current/doc/html/pcre2pattern.html>`__.

\ **Tip:** You can use `Regexr <https://regexr.com/>`__ to test regular expressions online.

方法
----

+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`clear<class_RegEx_method_clear>` **(** **)**                                                                                                                                                                                   |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`compile<class_RegEx_method_compile>` **(** :ref:`String<class_String>` pattern **)**                                                                                                                                           |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_group_count<class_RegEx_method_get_group_count>` **(** **)** |const|                                                                                                                                                       |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_names<class_RegEx_method_get_names>` **(** **)** |const|                                                                                                                                                                   |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_pattern<class_RegEx_method_get_pattern>` **(** **)** |const|                                                                                                                                                               |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_valid<class_RegEx_method_is_valid>` **(** **)** |const|                                                                                                                                                                     |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RegExMatch<class_RegExMatch>`   | :ref:`search<class_RegEx_method_search>` **(** :ref:`String<class_String>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const|                                                                       |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`search_all<class_RegEx_method_search_all>` **(** :ref:`String<class_String>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const|                                                               |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`sub<class_RegEx_method_sub>` **(** :ref:`String<class_String>` subject, :ref:`String<class_String>` replacement, :ref:`bool<class_bool>` all=false, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const| |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_RegEx_method_clear:

- void **clear** **(** **)**

这个方法重置了对象的状态，就像它是新创建的一样。也就是说，它取消了这个对象的正则表达式的赋值。

----

.. _class_RegEx_method_compile:

- :ref:`Error<enum_@GlobalScope_Error>` **compile** **(** :ref:`String<class_String>` pattern **)**

编译并指定要使用的搜索模式。如果编译成功，返回\ :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 。如果遇到错误，细节将被打印到标准输出，并返回一个错误。

----

.. _class_RegEx_method_get_group_count:

- :ref:`int<class_int>` **get_group_count** **(** **)** |const|

返回编译模式中捕获组的数量。

----

.. _class_RegEx_method_get_names:

- :ref:`Array<class_Array>` **get_names** **(** **)** |const|

返回一个数组，该数组是编译模式中命名的捕获组的名称。它们是按外观排序的。

----

.. _class_RegEx_method_get_pattern:

- :ref:`String<class_String>` **get_pattern** **(** **)** |const|

返回被编译的原始搜索模式。

----

.. _class_RegEx_method_is_valid:

- :ref:`bool<class_bool>` **is_valid** **(** **)** |const|

返回此对象是否分配了有效的搜索模式。

----

.. _class_RegEx_method_search:

- :ref:`RegExMatch<class_RegExMatch>` **search** **(** :ref:`String<class_String>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const|

在文本中搜索编译后的模式。如果找到，返回第一个匹配结果的\ :ref:`RegExMatch<class_RegExMatch>`\ 容器，否则返回\ ``null``\ 。可以指定要搜索的区域，而不需要修改开始和结束锚点的位置。

----

.. _class_RegEx_method_search_all:

- :ref:`Array<class_Array>` **search_all** **(** :ref:`String<class_String>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const|

在文本中搜索编译过的模式。为每个不重叠的结果返回一个\ :ref:`RegExMatch<class_RegExMatch>`\ 容器数组。如果没有发现任何结果，则返回一个空数组。可以指定要搜索的区域，而不需要修改开始和结束锚点的位置。

----

.. _class_RegEx_method_sub:

- :ref:`String<class_String>` **sub** **(** :ref:`String<class_String>` subject, :ref:`String<class_String>` replacement, :ref:`bool<class_bool>` all=false, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 **)** |const|

搜索文本中的编译模式，并将其替换为指定的字符串。诸如\ ``$1``\ 和\ ``$name``\ 等转义和反向引用会被展开和解决。默认情况下，只有第一个实例被替换，但可以对所有实例进行修改（全局替换）。可以指定要搜索的区域，而不需要修改开始和结束锚的位置。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
