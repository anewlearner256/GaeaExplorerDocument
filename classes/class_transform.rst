:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Transform.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Transform:

Transform
=========

3D 变换（3×4 矩阵）。

描述
----

用于 3D 线性变换的 3×4 矩阵（3 行 4 列），可以表示平移、旋转、缩放等变换。它由一个 :ref:`basis<class_Transform_property_basis>`\ （前 3 列）和一个 :ref:`origin<class_Transform_property_origin>` 的 :ref:`Vector3<class_Vector3>`\ （最后一列）组成。

更多信息请阅读文档文章《矩阵和变换》。

教程
----

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Matrices and transforms <../tutorials/math/matrices_and_transforms>`

- :doc:`Using 3D transforms <../tutorials/3d/using_transforms>`

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

属性
----

+-------------------------------+------------------------------------------------+----------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`basis<class_Transform_property_basis>`   | ``Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )`` |
+-------------------------------+------------------------------------------------+----------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`origin<class_Transform_property_origin>` | ``Vector3( 0, 0, 0 )``                 |
+-------------------------------+------------------------------------------------+----------------------------------------+

方法
----

+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis, :ref:`Vector3<class_Vector3>` origin **)** |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Basis<class_Basis>` basis, :ref:`Vector3<class_Vector3>` origin **)**                                                                                  |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Transform2D<class_Transform2D>` from **)**                                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Quat<class_Quat>` from **)**                                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Basis<class_Basis>` from **)**                                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`affine_inverse<class_Transform_method_affine_inverse>` **(** **)**                                                                                                                                              |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`interpolate_with<class_Transform_method_interpolate_with>` **(** :ref:`Transform<class_Transform>` transform, :ref:`float<class_float>` weight **)**                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`inverse<class_Transform_method_inverse>` **(** **)**                                                                                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_equal_approx<class_Transform_method_is_equal_approx>` **(** :ref:`Transform<class_Transform>` transform **)**                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`looking_at<class_Transform_method_looking_at>` **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up **)**                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`orthonormalized<class_Transform_method_orthonormalized>` **(** **)**                                                                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`rotated<class_Transform_method_rotated>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**                                                                                          |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`scaled<class_Transform_method_scaled>` **(** :ref:`Vector3<class_Vector3>` scale **)**                                                                                                                          |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`translated<class_Transform_method_translated>` **(** :ref:`Vector3<class_Vector3>` offset **)**                                                                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`xform<class_Transform_method_xform>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`xform_inv<class_Transform_method_xform_inv>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

常量
----

.. _class_Transform_constant_IDENTITY:

.. _class_Transform_constant_FLIP_X:

.. _class_Transform_constant_FLIP_Y:

.. _class_Transform_constant_FLIP_Z:

- **IDENTITY** = **Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )** --- 未应用平移、旋转、缩放的 ``Transform``\ 。当应用于其他数据结构时，\ :ref:`IDENTITY<class_Transform_constant_IDENTITY>` 不执行变换。

- **FLIP_X** = **Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )** --- ``Transform`` 变换与垂直于YZ平面的镜像应用。

- **FLIP_Y** = **Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )** --- ``Transform`` 变换与垂直于XZ平面的镜像应用。

- **FLIP_Z** = **Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )** --- ``Transform``\ 变换与垂直于XY平面的镜像应用。

属性说明
--------

.. _class_Transform_property_basis:

- :ref:`Basis<class_Basis>` **basis**

+-----------+----------------------------------------+
| *Default* | ``Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )`` |
+-----------+----------------------------------------+

基础是一个包含3个\ :ref:`Vector3<class_Vector3>`\ 作为其列的矩阵：X轴、Y轴和Z轴。这些向量可以被解释为随物体移动的局部坐标系的基础向量。

----

.. _class_Transform_property_origin:

- :ref:`Vector3<class_Vector3>` **origin**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

变换的平移偏移量，即第3、4列。相当于数组索引\ ``3``\ 。

方法说明
--------

.. _class_Transform_method_Transform:

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis, :ref:`Vector3<class_Vector3>` origin **)**

从四个 :ref:`Vector3<class_Vector3>` 值（即矩阵列）构造一个变换。每个轴对应于局部基础向量，其中一些可能被缩放。

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Basis<class_Basis>` basis, :ref:`Vector3<class_Vector3>` origin **)**

从 :ref:`Basis<class_Basis>` 和 :ref:`Vector3<class_Vector3>` 构造一个 Transform 变换。

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Transform2D<class_Transform2D>` from **)**

从一个 :ref:`Transform2D<class_Transform2D>` 构造一个 Transform 变换。

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Quat<class_Quat>` from **)**

从一个 :ref:`Quat<class_Quat>` 构造一个 Transform 变换。原点是 ``Vector3(0, 0, 0)``\ 。

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Basis<class_Basis>` from **)**

从一个 :ref:`Basis<class_Basis>` 构造 Transform 变换。原点是 Vector3(0, 0, 0)。

----

.. _class_Transform_method_affine_inverse:

- :ref:`Transform<class_Transform>` **affine_inverse** **(** **)**

返回变换的反值，假设变换是由旋转、缩放和平移组成的。

----

.. _class_Transform_method_interpolate_with:

- :ref:`Transform<class_Transform>` **interpolate_with** **(** :ref:`Transform<class_Transform>` transform, :ref:`float<class_float>` weight **)**

通过权重，即在0.0到1.0的范围内，将变换与其他变换进行插值。

----

.. _class_Transform_method_inverse:

- :ref:`Transform<class_Transform>` **inverse** **(** **)**

返回变换的反值，假设该变换是由旋转和平移组成的（没有缩放，对有缩放的变换使用 affine_inverse）。

----

.. _class_Transform_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Transform<class_Transform>` transform **)**

如果这个变换和\ ``transform``\ 近似相等，通过对每个分量调用\ ``is_equal_approx``\ ，而返回\ ``true``\ 。

----

.. _class_Transform_method_looking_at:

- :ref:`Transform<class_Transform>` **looking_at** **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up **)**

返回一个旋转后的变换副本，使其-Z轴指向\ ``target``\ 位置。

变换将首先围绕给定的\ ``up``\ 向量旋转，然后进一步通过围绕垂直于\ ``target``\ 和\ ``up``\ 向量的轴旋转，来完全与目标对齐。

操作是在全局空间进行的。

----

.. _class_Transform_method_orthonormalized:

- :ref:`Transform<class_Transform>` **orthonormalized** **(** **)**

返回具有基于正交，即90度，和归一化轴向量的变换。

----

.. _class_Transform_method_rotated:

- :ref:`Transform<class_Transform>` **rotated** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**

使用矩阵乘法，围绕给定的轴旋转给定的角度，即弧度。轴必须是一个归一化的向量。

----

.. _class_Transform_method_scaled:

- :ref:`Transform<class_Transform>` **scaled** **(** :ref:`Vector3<class_Vector3>` scale **)**

使用矩阵乘法，通过给定的缩放系数，对变换的基础和原点进行缩放。

----

.. _class_Transform_method_translated:

- :ref:`Transform<class_Transform>` **translated** **(** :ref:`Vector3<class_Vector3>` offset **)**

相对于变换的基础向量，将变换按给定的偏移量进行平移。

与\ :ref:`rotated<class_Transform_method_rotated>`\ 和\ :ref:`scaled<class_Transform_method_scaled>`\ 不同，它不使用矩阵乘法。

----

.. _class_Transform_method_xform:

- :ref:`Variant<class_Variant>` **xform** **(** :ref:`Variant<class_Variant>` v **)**

通过这个变换对指定的\ :ref:`Vector3<class_Vector3>`\ 、\ :ref:`Plane<class_Plane>`\ 、\ :ref:`AABB<class_AABB>`\ 或\ :ref:`PoolVector3Array<class_PoolVector3Array>`\ 进行变换。

----

.. _class_Transform_method_xform_inv:

- :ref:`Variant<class_Variant>` **xform_inv** **(** :ref:`Variant<class_Variant>` v **)**

将给定的 :ref:`Vector3<class_Vector3>`\ 、\ :ref:`Plane<class_Plane>`\ 、\ :ref:`AABB<class_AABB>`\ 、\ :ref:`PoolVector3Array<class_PoolVector3Array>` 做该变换的逆变换，前提假设是该变换仅由旋转和平移构成（不包括缩放）。等价于调用该变换的 ``inverse().xform(v)``\ 。仿射变换（即包含缩放）请参阅 :ref:`affine_inverse<class_Transform_method_affine_inverse>` 方法。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
