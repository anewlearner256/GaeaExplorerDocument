:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Quat.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Quat:

Quat
====

四元数.

描述
----

一个用于表示 3D 旋转的单位四元数。四元数需要经过归一化才能用于旋转。

它类似于 Basis，后者实现了旋转的矩阵表示，并且可以使用轴-角对或欧拉角进行参数化。Basis 可以存储旋转、缩放和错切，而 Quat 只存储旋转。

由于它的紧凑性和在内存中的存储方式，某些操作（特别是获得轴角和执行 SLERP）更加有效，并且对浮点错误有很强的抵抗力。

教程
----

- `Using 3D transforms <../tutorials/3d/using_transforms.html#interpolating-with-quaternions>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

属性
----

+---------------------------+---------------------------------+---------+
| :ref:`float<class_float>` | :ref:`w<class_Quat_property_w>` | ``1.0`` |
+---------------------------+---------------------------------+---------+
| :ref:`float<class_float>` | :ref:`x<class_Quat_property_x>` | ``0.0`` |
+---------------------------+---------------------------------+---------+
| :ref:`float<class_float>` | :ref:`y<class_Quat_property_y>` | ``0.0`` |
+---------------------------+---------------------------------+---------+
| :ref:`float<class_float>` | :ref:`z<class_Quat_property_z>` | ``0.0`` |
+---------------------------+---------------------------------+---------+

方法
----

+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`Quat<class_Quat_method_Quat>` **(** :ref:`Basis<class_Basis>` from **)**                                                                                                           |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`Quat<class_Quat_method_Quat>` **(** :ref:`Vector3<class_Vector3>` euler **)**                                                                                                      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`Quat<class_Quat_method_Quat>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                                      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`Quat<class_Quat_method_Quat>` **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z, :ref:`float<class_float>` w **)**                       |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`angle_to<class_Quat_method_angle_to>` **(** :ref:`Quat<class_Quat>` to **)**                                                                                                       |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`cubic_slerp<class_Quat_method_cubic_slerp>` **(** :ref:`Quat<class_Quat>` b, :ref:`Quat<class_Quat>` pre_a, :ref:`Quat<class_Quat>` post_b, :ref:`float<class_float>` weight **)** |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`dot<class_Quat_method_dot>` **(** :ref:`Quat<class_Quat>` b **)**                                                                                                                  |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_euler<class_Quat_method_get_euler>` **(** **)**                                                                                                                                |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`inverse<class_Quat_method_inverse>` **(** **)**                                                                                                                                    |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_Quat_method_is_equal_approx>` **(** :ref:`Quat<class_Quat>` quat **)**                                                                                       |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_normalized<class_Quat_method_is_normalized>` **(** **)**                                                                                                                        |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`length<class_Quat_method_length>` **(** **)**                                                                                                                                      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`length_squared<class_Quat_method_length_squared>` **(** **)**                                                                                                                      |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`normalized<class_Quat_method_normalized>` **(** **)**                                                                                                                              |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_axis_angle<class_Quat_method_set_axis_angle>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                  |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_euler<class_Quat_method_set_euler>` **(** :ref:`Vector3<class_Vector3>` euler **)**                                                                                            |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`slerp<class_Quat_method_slerp>` **(** :ref:`Quat<class_Quat>` to, :ref:`float<class_float>` weight **)**                                                                           |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`slerpni<class_Quat_method_slerpni>` **(** :ref:`Quat<class_Quat>` to, :ref:`float<class_float>` weight **)**                                                                       |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`xform<class_Quat_method_xform>` **(** :ref:`Vector3<class_Vector3>` v **)**                                                                                                        |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

常量
----

.. _class_Quat_constant_IDENTITY:

- **IDENTITY** = **Quat( 0, 0, 0, 1 )** --- 单位四元数，代表无旋转。等效于单位 :ref:`Basis<class_Basis>` 矩阵。如果一个向量被一个单位四元数变换，它不会改变。

属性说明
--------

.. _class_Quat_property_w:

- :ref:`float<class_float>` **w**

+-----------+---------+
| *Default* | ``1.0`` |
+-----------+---------+

四元数的W分量（实数部分）。

四元数分量通常不应该被直接操作。

----

.. _class_Quat_property_x:

- :ref:`float<class_float>` **x**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

四元数的X分量（虚轴\ ``i``\ 部分）。

四元数分量通常不应直接操作。

----

.. _class_Quat_property_y:

- :ref:`float<class_float>` **y**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

四元数的Y分量（虚轴\ ``j``\ 部分）。

四元数分量通常不应直接操作。

----

.. _class_Quat_property_z:

- :ref:`float<class_float>` **z**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

四元数的Z分量（虚轴\ ``k``\ 部分）。

四元数分量通常不应该被直接操作。

方法说明
--------

.. _class_Quat_method_Quat:

- :ref:`Quat<class_Quat>` **Quat** **(** :ref:`Basis<class_Basis>` from **)**

从给定的 :ref:`Basis<class_Basis>` 构造一个四元数。

----

- :ref:`Quat<class_Quat>` **Quat** **(** :ref:`Vector3<class_Vector3>` euler **)**

构造一个四元数，该四元数将执行由欧拉角指定的旋转（按照YXZ惯例：分解时，首先是Z，然后是X，最后是Y），以向量格式给出（X角，Y角，Z角）。

----

- :ref:`Quat<class_Quat>` **Quat** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

构造一个四元数，它将围绕给定的轴旋转指定的角度。轴必须是一个归一化的向量。

----

- :ref:`Quat<class_Quat>` **Quat** **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z, :ref:`float<class_float>` w **)**

构建一个由给定值定义的四元数。

----

.. _class_Quat_method_angle_to:

- :ref:`float<class_float>` **angle_to** **(** :ref:`Quat<class_Quat>` to **)**

返回此四元数与 ``to`` 之间的角度。这是从一个到另一个旋转所需的角度大小。

\ **注意：**\ 该方法的浮点错误率异常高，因此\ :ref:`@GDScript.is_zero_approx<class_@GDScript_method_is_zero_approx>`\ 等方法结果不可靠。

----

.. _class_Quat_method_cubic_slerp:

- :ref:`Quat<class_Quat>` **cubic_slerp** **(** :ref:`Quat<class_Quat>` b, :ref:`Quat<class_Quat>` pre_a, :ref:`Quat<class_Quat>` post_b, :ref:`float<class_float>` weight **)**

在四元数 ``pre_a``\ 、该向量 ``b`` 和 ``post_b`` 之间执行三次球面插值，按给定的 ``weight``\ 。

----

.. _class_Quat_method_dot:

- :ref:`float<class_float>` **dot** **(** :ref:`Quat<class_Quat>` b **)**

返回两个四元数的点积。

----

.. _class_Quat_method_get_euler:

- :ref:`Vector3<class_Vector3>` **get_euler** **(** **)**

返回与单位四元数所代表的旋转相对应的欧拉角（按照YXZ惯例：分解时，先Z后X，最后是Y）。返回的向量包含格式为（X角、Y角、Z角）的旋转角。

----

.. _class_Quat_method_inverse:

- :ref:`Quat<class_Quat>` **inverse** **(** **)**

返回四元数的取逆。(译注:即xyz的值分别取反).

----

.. _class_Quat_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Quat<class_Quat>` quat **)**

通过在每个分量上进行 :ref:`@GDScript.is_equal_approx<class_@GDScript_method_is_equal_approx>`\ ，如果此四元数和 ``quat`` 近似相等，则返回 ``true``\ 。

----

.. _class_Quat_method_is_normalized:

- :ref:`bool<class_bool>` **is_normalized** **(** **)**

返回四元数是否被归一化。

----

.. _class_Quat_method_length:

- :ref:`float<class_float>` **length** **(** **)**

返回四元数的长度。

----

.. _class_Quat_method_length_squared:

- :ref:`float<class_float>` **length_squared** **(** **)**

返回四元数的长度的平方。

----

.. _class_Quat_method_normalized:

- :ref:`Quat<class_Quat>` **normalized** **(** **)**

返回四元数的副本，归一化为单位长度。

----

.. _class_Quat_method_set_axis_angle:

- void **set_axis_angle** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

将四元数设置为绕轴旋转指定角度（以弧度为单位）的旋转。轴必须是归一化向量。

----

.. _class_Quat_method_set_euler:

- void **set_euler** **(** :ref:`Vector3<class_Vector3>` euler **)**

将四元数设置为由欧拉角指定的旋转（按照惯例：分解时，首先是 Z，然后是 X，最后是 Y），以向量格式给出（X 角、Y 角、Z 角）。

----

.. _class_Quat_method_slerp:

- :ref:`Quat<class_Quat>` **slerp** **(** :ref:`Quat<class_Quat>` to, :ref:`float<class_float>` weight **)**

返回四元数 ``to``\ 和 ``weight``\ 值的球面线性插值的结果。

\ **注意:** 四元数必须被归一化。

----

.. _class_Quat_method_slerpni:

- :ref:`Quat<class_Quat>` **slerpni** **(** :ref:`Quat<class_Quat>` to, :ref:`float<class_float>` weight **)**

以\ ``weight``\ 值为权重,返回这个四元数和\ ``to``\ 之间的球面线性插值的结果，但不会检查旋转路径是否不大于90度。

----

.. _class_Quat_method_xform:

- :ref:`Vector3<class_Vector3>` **xform** **(** :ref:`Vector3<class_Vector3>` v **)**

返回一个由该四元数转换（相乘）的向量。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
