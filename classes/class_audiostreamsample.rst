:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the AudioStreamSample.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AudioStreamSample:

AudioStreamSample
=================

**Inherits:** :ref:`AudioStream<class_AudioStream>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

存储从WAV文件加载的音频数据。

描述
----

AudioStreamSample 存储从 WAV 文件加载的声音样本。要播放存储的声音，请使用 :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`\ （用于非定位音频）或 :ref:`AudioStreamPlayer2D<class_AudioStreamPlayer2D>`/:ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>`\ （用于定位音频）。声音可以循环播放。

此类还可用于存储动态生成的 PCM 音频数据。另请参阅 :ref:`AudioStreamGenerator<class_AudioStreamGenerator>` 以了解程序式音频生成。

属性
----

+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`        | :ref:`data<class_AudioStreamSample_property_data>`             | ``PoolByteArray(  )`` |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`Format<enum_AudioStreamSample_Format>`     | :ref:`format<class_AudioStreamSample_property_format>`         | ``0``                 |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`                            | :ref:`loop_begin<class_AudioStreamSample_property_loop_begin>` | ``0``                 |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`                            | :ref:`loop_end<class_AudioStreamSample_property_loop_end>`     | ``0``                 |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`LoopMode<enum_AudioStreamSample_LoopMode>` | :ref:`loop_mode<class_AudioStreamSample_property_loop_mode>`   | ``0``                 |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`                            | :ref:`mix_rate<class_AudioStreamSample_property_mix_rate>`     | ``44100``             |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+
| :ref:`bool<class_bool>`                          | :ref:`stereo<class_AudioStreamSample_property_stereo>`         | ``false``             |
+--------------------------------------------------+----------------------------------------------------------------+-----------------------+

方法
----

+---------------------------------------+-------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`save_to_wav<class_AudioStreamSample_method_save_to_wav>` **(** :ref:`String<class_String>` path **)** |
+---------------------------------------+-------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_AudioStreamSample_Format:

.. _class_AudioStreamSample_constant_FORMAT_8_BITS:

.. _class_AudioStreamSample_constant_FORMAT_16_BITS:

.. _class_AudioStreamSample_constant_FORMAT_IMA_ADPCM:

enum **Format**:

- **FORMAT_8_BITS** = **0** --- 8位音频编解码器。

- **FORMAT_16_BITS** = **1** --- 16位音频编解码器。

- **FORMAT_IMA_ADPCM** = **2** --- 音频使用 IMA ADPCM 进行压缩。

----

.. _enum_AudioStreamSample_LoopMode:

.. _class_AudioStreamSample_constant_LOOP_DISABLED:

.. _class_AudioStreamSample_constant_LOOP_FORWARD:

.. _class_AudioStreamSample_constant_LOOP_PING_PONG:

.. _class_AudioStreamSample_constant_LOOP_BACKWARD:

enum **LoopMode**:

- **LOOP_DISABLED** = **0** --- 音频不循环。

- **LOOP_FORWARD** = **1** --- 音频循环播放 :ref:`loop_begin<class_AudioStreamSample_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamSample_property_loop_end>` 之间的数据，只向前播放。

- **LOOP_PING_PONG** = **2** --- 音频在 :ref:`loop_begin<class_AudioStreamSample_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamSample_property_loop_end>` 之间循环数据，来回播放。

- **LOOP_BACKWARD** = **3** --- 音频在 :ref:`loop_begin<class_AudioStreamSample_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamSample_property_loop_end>` 之间循环数据，仅向后播放。

属性说明
--------

.. _class_AudioStreamSample_property_data:

- :ref:`PoolByteArray<class_PoolByteArray>` **data**

+-----------+-----------------------+
| *Default* | ``PoolByteArray(  )`` |
+-----------+-----------------------+
| *Setter*  | set_data(value)       |
+-----------+-----------------------+
| *Getter*  | get_data()            |
+-----------+-----------------------+

包含以字节为单位的音频数据。

\ **注意：**\ 此属性需要有符号的 PCM8数据。要将无符号的 PCM8转换为有符号的 PCM8，需要从每个字节中减去128。

----

.. _class_AudioStreamSample_property_format:

- :ref:`Format<enum_AudioStreamSample_Format>` **format**

+-----------+-------------------+
| *Default* | ``0``             |
+-----------+-------------------+
| *Setter*  | set_format(value) |
+-----------+-------------------+
| *Getter*  | get_format()      |
+-----------+-------------------+

音频格式。参阅\ :ref:`Format<enum_AudioStreamSample_Format>`\ 常量的值。

----

.. _class_AudioStreamSample_property_loop_begin:

- :ref:`int<class_int>` **loop_begin**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_loop_begin(value) |
+-----------+-----------------------+
| *Getter*  | get_loop_begin()      |
+-----------+-----------------------+

循环起始点(相对于样本开始的样本数)。如果存在此信息，将自动从 WAV 文件导入。

----

.. _class_AudioStreamSample_property_loop_end:

- :ref:`int<class_int>` **loop_end**

+-----------+---------------------+
| *Default* | ``0``               |
+-----------+---------------------+
| *Setter*  | set_loop_end(value) |
+-----------+---------------------+
| *Getter*  | get_loop_end()      |
+-----------+---------------------+

循环结束点(相对于样本开始的样本数)。如果存在此信息，将自动从 WAV 文件导入。

----

.. _class_AudioStreamSample_property_loop_mode:

- :ref:`LoopMode<enum_AudioStreamSample_LoopMode>` **loop_mode**

+-----------+----------------------+
| *Default* | ``0``                |
+-----------+----------------------+
| *Setter*  | set_loop_mode(value) |
+-----------+----------------------+
| *Getter*  | get_loop_mode()      |
+-----------+----------------------+

循环模式。该信息将自动从WAV文件中导入（如果存在）。有关值，请参阅\ :ref:`LoopMode<enum_AudioStreamSample_LoopMode>`\ 常量。

----

.. _class_AudioStreamSample_property_mix_rate:

- :ref:`int<class_int>` **mix_rate**

+-----------+---------------------+
| *Default* | ``44100``           |
+-----------+---------------------+
| *Setter*  | set_mix_rate(value) |
+-----------+---------------------+
| *Getter*  | get_mix_rate()      |
+-----------+---------------------+

混合这个音频的采样率。更高的数值需要更多的存储空间，但会带来更好的质量。

在游戏中，常用的采样率有\ ``11025``\ 、\ ``16000``\ 、\ ``22050``\ 、\ ``32000``\ 、\ ``44100``\ ，以及\ ``48000``\ 。

根据\ `Nyquist-Shannon采样定理 <https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem>`__\ ，当超过40000赫兹时，对于人的听觉没有质量上的差别（因为大多数人只能听到~20000赫兹，往往更少）。如果你使用低音调的声音，如语音，较低的采样率，如\ ``32000``\ 或\ ``22050``\ 可能是可用的，没有质量上的损失。

----

.. _class_AudioStreamSample_property_stereo:

- :ref:`bool<class_bool>` **stereo**

+-----------+-------------------+
| *Default* | ``false``         |
+-----------+-------------------+
| *Setter*  | set_stereo(value) |
+-----------+-------------------+
| *Getter*  | is_stereo()       |
+-----------+-------------------+

如果\ ``true``\ ，音频为立体声。

方法说明
--------

.. _class_AudioStreamSample_method_save_to_wav:

- :ref:`Error<enum_@GlobalScope_Error>` **save_to_wav** **(** :ref:`String<class_String>` path **)**

将AudioStreamSample作为WAV文件保存到\ ``path``\ 。无法保存IMA ADPCM格式的样本。

\ **注意：**\ 如果缺少\ ``.wav``\ 扩展名，则会自动将其附加到\ ``path``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
