:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Physics2DDirectSpaceState.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Physics2DDirectSpaceState:

Physics2DDirectSpaceState
=========================

**Inherits:** :ref:`Object<class_Object>`

直接访问\ :ref:`Physics2DServer<class_Physics2DServer>`\ 中的空间的对象。

描述
----

直接访问\ :ref:`Physics2DServer<class_Physics2DServer>`\ 中的空间的对象。它主要用于对位于给定空间中的对象和区域进行查询。

教程
----

- :doc:`Physics introduction <../tutorials/physics/physics_introduction>`

- :doc:`Ray-casting <../tutorials/physics/ray-casting>`

方法
----

+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`cast_motion<class_Physics2DDirectSpaceState_method_cast_motion>` **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape **)**                                                                                                                                                                                                                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`collide_shape<class_Physics2DDirectSpaceState_method_collide_shape>` **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape, :ref:`int<class_int>` max_results=32 **)**                                                                                                                                                                                                                     |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_rest_info<class_Physics2DDirectSpaceState_method_get_rest_info>` **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape **)**                                                                                                                                                                                                                                                           |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`intersect_point<class_Physics2DDirectSpaceState_method_intersect_point>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`int<class_int>` max_results=32, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)**                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`intersect_point_on_canvas<class_Physics2DDirectSpaceState_method_intersect_point_on_canvas>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`int<class_int>` canvas_instance_id, :ref:`int<class_int>` max_results=32, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)** |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`intersect_ray<class_Physics2DDirectSpaceState_method_intersect_ray>` **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)**                                                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`intersect_shape<class_Physics2DDirectSpaceState_method_intersect_shape>` **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape, :ref:`int<class_int>` max_results=32 **)**                                                                                                                                                                                                                 |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_Physics2DDirectSpaceState_method_cast_motion:

- :ref:`Array<class_Array>` **cast_motion** **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape **)**

检查 :ref:`Shape2D<class_Shape2D>` 可以移动多远而不会发生碰撞。查询的所有参数，包括形状和运动，都是通过 :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` 对象提供的。

返回一个包含运动的安全和不安全比例（0 到 1 之间）的数组。安全比例是在没有碰撞的情况下可以进行的运动的最大比例。不安全比例是碰撞必须移动的距离的最小部分。如果没有检测到碰撞，将返回 ``[1.0, 1.0]`` 的结果。

\ **注意：** 任何已经碰撞的\ :ref:`Shape2D<class_Shape2D>`\ (比如内部的)会被忽略。使用 :ref:`collide_shape<class_Physics2DDirectSpaceState_method_collide_shape>` 确定形状已经碰撞的 :ref:`Shape2D<class_Shape2D>`\ 。

----

.. _class_Physics2DDirectSpaceState_method_collide_shape:

- :ref:`Array<class_Array>` **collide_shape** **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape, :ref:`int<class_int>` max_results=32 **)**

通过\ :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>`\ 对象给出的形状与空间的检查交点。结果数组包含一个形状与另一个形状相交的点的列表。像\ :ref:`intersect_shape<class_Physics2DDirectSpaceState_method_intersect_shape>`\ 一样，可以限制返回结果的数量以节省处理时间。

----

.. _class_Physics2DDirectSpaceState_method_get_rest_info:

- :ref:`Dictionary<class_Dictionary>` **get_rest_info** **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape **)**

通过\ :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>`\ 对象给出的形状与空间的检查交点。如果它与一个以上的形状发生碰撞，则选择最近的一个。如果该形状没有与任何对象相交，那么将返回一个空字典。

\ **注意：** 这个方法不考虑对象的\ ``motion``\ 属性。返回的对象是包含以下字段的字典。

\ ``collider_id``:碰撞对象的ID。

\ ``linear_velocity``:碰撞物体的速度\ :ref:`Vector2<class_Vector2>`\ 。如果对象是一个\ :ref:`Area2D<class_Area2D>`\ ，结果是\ ``(0, 0)``\ 。

\ ``metadata``:相交形状的元数据。这个元数据与\ :ref:`Object.get_meta<class_Object_method_get_meta>`\ 不同，它是用\ :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_method_shape_set_data>`\ 设置的。

\ ``normal``:物体在交点处的表面法线。

\ ``point``:相交点。

\ ``rid``:相交物体的\ :ref:`RID<class_RID>`\ 。

\ ``shape``:碰撞形状的形状索引。

----

.. _class_Physics2DDirectSpaceState_method_intersect_point:

- :ref:`Array<class_Array>` **intersect_point** **(** :ref:`Vector2<class_Vector2>` point, :ref:`int<class_int>` max_results=32, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)**

检查一个点是否在任意实体形状内。点所处的形状会以数组的形式返回，该数组包含有以下字段的字典：

\ ``collider``\ ：碰撞的对象。

\ ``collider_id``\ ：碰撞对象的 ID。

\ ``metadata``\ ：相交形状的元数据。这个元数据与 :ref:`Object.get_meta<class_Object_method_get_meta>` 不同，是用 :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_method_shape_set_data>` 设置的。

\ ``rid``\ ：相交物体的 :ref:`RID<class_RID>`\ 。

\ ``shape``\ ：碰撞形状的形状索引。

为了减少处理时间，可以通过 ``max_results`` 参数对相交的数量进行限制。

此外，该方法可以接受一个 ``exclude`` 数组，该数组中的对象或 :ref:`RID<class_RID>` 将被排除在碰撞之外，\ ``collision_mask`` 位掩码表示要检查的物理层，或者布尔值来确定射线是否应该分别与 :ref:`PhysicsBody2D<class_PhysicsBody2D>` 或 :ref:`Area2D<class_Area2D>` 发生碰撞。

\ **注意：**\ :ref:`ConcavePolygonShape2D<class_ConcavePolygonShape2D>` 和 :ref:`CollisionPolygon2D<class_CollisionPolygon2D>` 在 ``Segments`` 构建模式中不是实体形状。因此，它们将不会被检测到。

----

.. _class_Physics2DDirectSpaceState_method_intersect_point_on_canvas:

- :ref:`Array<class_Array>` **intersect_point_on_canvas** **(** :ref:`Vector2<class_Vector2>` point, :ref:`int<class_int>` canvas_instance_id, :ref:`int<class_int>` max_results=32, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)**

检查一个点是否在任意实体形状内，仅在 ``canvas_instance_id`` 所指定的画布层上检查。点所处的形状会以数组的形式返回，该数组包含有以下字段的字典：

\ ``collider``\ ：碰撞的对象。

\ ``collider_id``\ ：碰撞对象的 ID。

\ ``metadata``\ ：相交形状的元数据。这个元数据与 :ref:`Object.get_meta<class_Object_method_get_meta>` 不同，是用 :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_method_shape_set_data>` 设置的。

\ ``rid``\ ：相交物体的 :ref:`RID<class_RID>`\ 。

\ ``shape``\ ：碰撞形状的形状索引。

为了减少处理时间，可以通过 ``max_results`` 参数对相交的数量进行限制。

此外，该方法可以接受一个 ``exclude`` 数组，该数组中的对象或 :ref:`RID<class_RID>` 将被排除在碰撞之外，\ ``collision_mask`` 位掩码表示要检查的物理层，或者布尔值来确定射线是否应该分别与 :ref:`PhysicsBody<class_PhysicsBody>` 或 :ref:`Area<class_Area>` 发生碰撞。

\ **注意：**\ :ref:`ConcavePolygonShape2D<class_ConcavePolygonShape2D>` 和 :ref:`CollisionPolygon2D<class_CollisionPolygon2D>` 在 ``Segments`` 构建模式中不是实体形状。因此，它们将不会被检测到。

----

.. _class_Physics2DDirectSpaceState_method_intersect_ray:

- :ref:`Dictionary<class_Dictionary>` **intersect_ray** **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Array<class_Array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647, :ref:`bool<class_bool>` collide_with_bodies=true, :ref:`bool<class_bool>` collide_with_areas=false **)**

在给定的空间中与一条射线相交。返回的对象是具有下列字段的字典：

\ ``collider``\ ：碰撞的对象。

\ ``collider_id``\ ：碰撞对象的 ID。

\ ``metadata``\ ：相交形状的元数据。这个元数据与 :ref:`Object.get_meta<class_Object_method_get_meta>` 不同，是用 :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_method_shape_set_data>` 设置的。

\ ``normal``\ ：相交点处对象表面的法线。

\ ``position``\ ：相交点。

\ ``rid``\ ：相交物体的 :ref:`RID<class_RID>`\ 。

\ ``shape``\ ：碰撞形状的形状索引。

如果射线没有与任何东西相交，将返回一个空字典。

此外，该方法可以接受一个 ``exclude`` 对象或 :ref:`RID<class_RID>` 数组，该数组将被排除在碰撞之外，\ ``collision_mask`` 位掩码表示要检查的物理层，或者布尔值来确定射线是否应该分别与 :ref:`PhysicsBody2D<class_PhysicsBody2D>` 或 :ref:`Area2D<class_Area2D>` 发生碰撞。

----

.. _class_Physics2DDirectSpaceState_method_intersect_shape:

- :ref:`Array<class_Array>` **intersect_shape** **(** :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` shape, :ref:`int<class_int>` max_results=32 **)**

Checks the intersections of a shape, given through a :ref:`Physics2DShapeQueryParameters<class_Physics2DShapeQueryParameters>` object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:

\ ``collider``: The colliding object.

\ ``collider_id``: The colliding object's ID.

\ ``metadata``: The intersecting shape's metadata. This metadata is different from :ref:`Object.get_meta<class_Object_method_get_meta>`, and is set with :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_method_shape_set_data>`.

\ ``rid``: The intersecting object's :ref:`RID<class_RID>`.

\ ``shape``: The shape index of the colliding shape.

The number of intersections can be limited with the ``max_results`` parameter, to reduce the processing time.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
