:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the FuncRef.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_FuncRef:

FuncRef
=======

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

对一个对象中的一个函数的引用。

描述
----

在GDScript中，函数不是\ *第一类对象*\ 。这意味着不可能将它们直接作为变量存储，从另一个函数中返回，或将它们作为参数传递。

然而，通过使用\ :ref:`@GDScript.funcref<class_@GDScript_method_funcref>`\ 函数创建一个\ ``FuncRef``\ ，可以创建、传递和调用给定对象中的一个函数的引用。

属性
----

+-----------------------------+--------------------------------------------------+--------+
| :ref:`String<class_String>` | :ref:`function<class_FuncRef_property_function>` | ``""`` |
+-----------------------------+--------------------------------------------------+--------+

方法
----

+-------------------------------+---------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`call_func<class_FuncRef_method_call_func>` **(** ... **)** |vararg|                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`call_funcv<class_FuncRef_method_call_funcv>` **(** :ref:`Array<class_Array>` arg_array **)**      |
+-------------------------------+---------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_valid<class_FuncRef_method_is_valid>` **(** **)** |const|                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_instance<class_FuncRef_method_set_instance>` **(** :ref:`Object<class_Object>` instance **)** |
+-------------------------------+---------------------------------------------------------------------------------------------------------+

属性说明
--------

.. _class_FuncRef_property_function:

- :ref:`String<class_String>` **function**

+-----------+---------------------+
| *Default* | ``""``              |
+-----------+---------------------+
| *Setter*  | set_function(value) |
+-----------+---------------------+
| *Getter*  | get_function()      |
+-----------+---------------------+

被引用函数的名称。

方法说明
--------

.. _class_FuncRef_method_call_func:

- :ref:`Variant<class_Variant>` **call_func** **(** ... **)** |vararg|

调用以前设置在 :ref:`function<class_FuncRef_property_function>` 或 :ref:`@GDScript.funcref<class_@GDScript_method_funcref>` 中的引用函数。

----

.. _class_FuncRef_method_call_funcv:

- :ref:`Variant<class_Variant>` **call_funcv** **(** :ref:`Array<class_Array>` arg_array **)**

调用先前在 :ref:`function<class_FuncRef_property_function>` 或 :ref:`@GDScript.funcref<class_@GDScript_method_funcref>` 中设置的引用函数。与 :ref:`call_func<class_FuncRef_method_call_func>` 相反，此方法不支持可变数量的参数，但希望所有参数都通过单个数组形式 :ref:`Array<class_Array>` 传递。

----

.. _class_FuncRef_method_is_valid:

- :ref:`bool<class_bool>` **is_valid** **(** **)** |const|

返回该对象是否仍然存在并被分配了该函数。

----

.. _class_FuncRef_method_set_instance:

- void **set_instance** **(** :ref:`Object<class_Object>` instance **)**

包含被引用函数的对象。这个对象必须是实际继承自\ :ref:`Object<class_Object>`\ 的类型，而不是像\ :ref:`int<class_int>`\ 、\ :ref:`Vector2<class_Vector2>`\ 或\ :ref:`Dictionary<class_Dictionary>`\ 这样的内置类型。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
