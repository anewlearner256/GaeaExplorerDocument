:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the AStar2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AStar2D:

AStar2D
=======

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

使用二维向量作为边缘的AStar类表示。

描述
----

这是\ :ref:`AStar<class_AStar>`\ 类的包装，该类使用2D向量而不是3D向量。

方法
----

+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                       | :ref:`_compute_cost<class_AStar2D_method__compute_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                       | :ref:`_estimate_cost<class_AStar2D_method__estimate_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|                                    |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`add_point<class_AStar2D_method_add_point>` **(** :ref:`int<class_int>` id, :ref:`Vector2<class_Vector2>` position, :ref:`float<class_float>` weight_scale=1.0 **)**      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`are_points_connected<class_AStar2D_method_are_points_connected>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)** |const|                               |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`clear<class_AStar2D_method_clear>` **(** **)**                                                                                                                           |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`connect_points<class_AStar2D_method_connect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`disconnect_points<class_AStar2D_method_disconnect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)**                                             |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_available_point_id<class_AStar2D_method_get_available_point_id>` **(** **)** |const|                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_closest_point<class_AStar2D_method_get_closest_point>` **(** :ref:`Vector2<class_Vector2>` to_position, :ref:`bool<class_bool>` include_disabled=false **)** |const| |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                   | :ref:`get_closest_position_in_segment<class_AStar2D_method_get_closest_position_in_segment>` **(** :ref:`Vector2<class_Vector2>` to_position **)** |const|                     |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`         | :ref:`get_id_path<class_AStar2D_method_get_id_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**                                                    |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_point_capacity<class_AStar2D_method_get_point_capacity>` **(** **)** |const|                                                                                         |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`         | :ref:`get_point_connections<class_AStar2D_method_get_point_connections>` **(** :ref:`int<class_int>` id **)**                                                                  |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_point_count<class_AStar2D_method_get_point_count>` **(** **)** |const|                                                                                               |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>` | :ref:`get_point_path<class_AStar2D_method_get_point_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**                                              |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                   | :ref:`get_point_position<class_AStar2D_method_get_point_position>` **(** :ref:`int<class_int>` id **)** |const|                                                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                       | :ref:`get_point_weight_scale<class_AStar2D_method_get_point_weight_scale>` **(** :ref:`int<class_int>` id **)** |const|                                                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`get_points<class_AStar2D_method_get_points>` **(** **)**                                                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`has_point<class_AStar2D_method_has_point>` **(** :ref:`int<class_int>` id **)** |const|                                                                                  |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`is_point_disabled<class_AStar2D_method_is_point_disabled>` **(** :ref:`int<class_int>` id **)** |const|                                                                  |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`remove_point<class_AStar2D_method_remove_point>` **(** :ref:`int<class_int>` id **)**                                                                                    |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`reserve_space<class_AStar2D_method_reserve_space>` **(** :ref:`int<class_int>` num_nodes **)**                                                                           |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`set_point_disabled<class_AStar2D_method_set_point_disabled>` **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` disabled=true **)**                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`set_point_position<class_AStar2D_method_set_point_position>` **(** :ref:`int<class_int>` id, :ref:`Vector2<class_Vector2>` position **)**                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`set_point_weight_scale<class_AStar2D_method_set_point_weight_scale>` **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_AStar2D_method__compute_cost:

- :ref:`float<class_float>` **_compute_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|

计算两个连接点之间的成本时调用。

注意这个函数隐藏在默认的\ ``AStar2D``\ 类中。

----

.. _class_AStar2D_method__estimate_cost:

- :ref:`float<class_float>` **_estimate_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|

当估计一个点和路径终点之间的成本时调用。

请注意，这个函数隐藏在默认的 ``AStar2D`` 类中。

----

.. _class_AStar2D_method_add_point:

- void **add_point** **(** :ref:`int<class_int>` id, :ref:`Vector2<class_Vector2>` position, :ref:`float<class_float>` weight_scale=1.0 **)**

在给定的位置添加一个新的点，并使用给定的标识符。\ ``id``\ 必须是0或者更大，\ ``weight_scale``\ 必须是1或者更大。

在确定从相邻点到此点的一段路程的总成本时，\ ``weight_scale``\ 要乘以\ :ref:`_compute_cost<class_AStar2D_method__compute_cost>`\ 的结果。因此，在其他条件相同的情况下，算法优先选择\ ``weight_scale``\ 较低的点来形成路径。

::

    var astar = AStar2D.new()
    astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1

如果已经存在一个给定\ ``id``\ 的点，它的位置和权重将被更新为给定值。

----

.. _class_AStar2D_method_are_points_connected:

- :ref:`bool<class_bool>` **are_points_connected** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)** |const|

返回给定点之间是否有连接/分割。

----

.. _class_AStar2D_method_clear:

- void **clear** **(** **)**

清除所有点和线段。

----

.. _class_AStar2D_method_connect_points:

- void **connect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**

在给定的点之间创建一个分段。如果 ``bidirectional`` 为 ``false``\ ，则只允许从 ``id`` 到 ``to_id`` 之间的移动，不允许反方向移动。

(codeblock)

var astar = AStar2D.new()

astar.add_point(1, Vector2(1, 1))

astar.add_point(2, Vector2(0, 5))

astar.connect_points(1, 2, false)


----

.. _class_AStar2D_method_disconnect_points:

- void **disconnect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)**

删除给定点之间的线段。

----

.. _class_AStar2D_method_get_available_point_id:

- :ref:`int<class_int>` **get_available_point_id** **(** **)** |const|

返回没有关联的下一个可用点的ID。

----

.. _class_AStar2D_method_get_closest_point:

- :ref:`int<class_int>` **get_closest_point** **(** :ref:`Vector2<class_Vector2>` to_position, :ref:`bool<class_bool>` include_disabled=false **)** |const|

返回离\ ``to_position``\ 最近的点的ID，可以选择将禁用的点考虑在内。如果点池中没有点，返回\ ``-1``\ 。

\ **注意:** 如果几个点都是离\ ``to_position``\ 最近的点，将返回ID最小的那个点，以保证结果的确定性。

----

.. _class_AStar2D_method_get_closest_position_in_segment:

- :ref:`Vector2<class_Vector2>` **get_closest_position_in_segment** **(** :ref:`Vector2<class_Vector2>` to_position **)** |const|

返回位于两个连接点之间的线段中离 ``to_position`` 最近的位置。

::

    var astar = AStar2D.new()
    astar.add_point(1, Vector2(0, 0))
    astar.add_point(2, Vector2(0, 5))
    astar.connect_points(1, 2)
    var res = astar.get_closest_position_in_segment(Vector2(3, 3))# 返回 (0, 3)

结果是在从 ``y=0`` 到 ``y=5`` 的线段中。它是该段中离给定点最近的位置。

----

.. _class_AStar2D_method_get_id_path:

- :ref:`PoolIntArray<class_PoolIntArray>` **get_id_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**

返回一个数组，该数组中包含了由 AStar2D 在给定点之间找到的路径的点的 ID。数组从路径的起点到终点排序。

::

    var astar = AStar2D.new()
    astar.add_point(1, Vector2(0, 0))
    astar.add_point(2, Vector2(0, 1), 1) # 默认权重为 1
    astar.add_point(3, Vector2(1, 1))
    astar.add_point(4, Vector2(2, 0))
    
    astar.connect_points(1, 2, false)
    astar.connect_points(2, 3, false)
    astar.connect_points(4, 3, false)
    astar.connect_points(1, 4, false)
    
    var res = astar.get_id_path(1, 3) # 返回 [1, 2, 3]

如果你把第 2 点的权重改为3，那么结果就会变成 ``[1, 4, 3]``\ ，因为现在虽然距离长了，但通过第 4 点比通过第 2 点“容易”。

----

.. _class_AStar2D_method_get_point_capacity:

- :ref:`int<class_int>` **get_point_capacity** **(** **)** |const|

返回支持点的结构的容量，与 ``reserve_space`` 配合使用。

----

.. _class_AStar2D_method_get_point_connections:

- :ref:`PoolIntArray<class_PoolIntArray>` **get_point_connections** **(** :ref:`int<class_int>` id **)**

返回一个数组，其中包含与给定点形成连接的点的 ID。

::

    var astar = AStar2D.new()
    astar.add_point(1, Vector2(0, 0))
    astar.add_point(2, Vector2(0, 1))
    astar.add_point(3, Vector2(1, 1))
    astar.add_point(4, Vector2(2, 0))
    
    astar.connect_points(1, 2, true)
    astar.connect_points(1, 3, true)
    
    var neighbors = astar.get_point_connections(1) # 返回 [2, 3]

----

.. _class_AStar2D_method_get_point_count:

- :ref:`int<class_int>` **get_point_count** **(** **)** |const|

返回当前积分池中的积分数量。

----

.. _class_AStar2D_method_get_point_path:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **get_point_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**

返回一个数组，该数组包含了AStar2D在给定点之间找到的路径中的点。该数组从路径的起点到终点排序。

\ **注意：** 这个方法不是线程安全的。如果从一个\ :ref:`Thread<class_Thread>`\ 线程中调用，它将返回一个空的\ :ref:`PoolVector2Array<class_PoolVector2Array>`\ ，并打印一个错误信息。

----

.. _class_AStar2D_method_get_point_position:

- :ref:`Vector2<class_Vector2>` **get_point_position** **(** :ref:`int<class_int>` id **)** |const|

返回与给定\ ``id``\ 相关联的点的位置。

----

.. _class_AStar2D_method_get_point_weight_scale:

- :ref:`float<class_float>` **get_point_weight_scale** **(** :ref:`int<class_int>` id **)** |const|

返回与给定\ ``id``\ 关联的点的权重比例。

----

.. _class_AStar2D_method_get_points:

- :ref:`Array<class_Array>` **get_points** **(** **)**

返回所有点的数组。

----

.. _class_AStar2D_method_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`int<class_int>` id **)** |const|

返回与给定\ ``id``\ 相关联的点是否存在。

----

.. _class_AStar2D_method_is_point_disabled:

- :ref:`bool<class_bool>` **is_point_disabled** **(** :ref:`int<class_int>` id **)** |const|

返回是否禁用点以进行寻路。默认情况下，所有点均处于启用状态。

----

.. _class_AStar2D_method_remove_point:

- void **remove_point** **(** :ref:`int<class_int>` id **)**

从积分池中删除与给定\ ``id``\ 关联的积分。

----

.. _class_AStar2D_method_reserve_space:

- void **reserve_space** **(** :ref:`int<class_int>` num_nodes **)**

在内部为\ ``num_nodes``\ 个点保留空间，如果您一次要添加一个已知的大量点（例如对于一个网格），则很有用。新容量必须大于或等于旧容量。

----

.. _class_AStar2D_method_set_point_disabled:

- void **set_point_disabled** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` disabled=true **)**

禁用或启用指定点的寻路功能。用于制作临时障碍物。

----

.. _class_AStar2D_method_set_point_position:

- void **set_point_position** **(** :ref:`int<class_int>` id, :ref:`Vector2<class_Vector2>` position **)**

为具有给定\ ``id``\ 的点设置\ ``position``\ 。

----

.. _class_AStar2D_method_set_point_weight_scale:

- void **set_point_weight_scale** **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**

为给定的\ ``id``\ 的点设置\ ``weight_scale``\ 。在确定从邻接点到这个点的一段路程的总成本时，\ ``weight_scale``\ 要乘以\ :ref:`_compute_cost<class_AStar2D_method__compute_cost>`\ 的结果。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
