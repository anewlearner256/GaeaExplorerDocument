:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the Expression.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Expression:

Expression
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

一个存储你可以执行的表达式的类。

描述
----

表达式可以由任何算术运算、内置数学函数调用、传递实例的方法调用或内置类型构造调用组成。

一个使用内置数学函数的表达式文本示例可以是\ ``sqrt(pow(3,2)+pow(4,2))``\ 。

在下面的例子中，我们使用一个\ :ref:`LineEdit<class_LineEdit>`\ 节点来写我们的表达式并显示结果。

::

    onready var expression = Expression.new()
    
    func _ready():
        $LineEdit.connect("text_entered", self, "_on_text_entered")
    
    func _on_text_entered(command):
        var error = expression.parse(command, [])
        if error != OK:
            print(expression.get_error_text())
            return
        var result = expression.execute([], null, true)
        if not expression.has_execute_failed():
            $LineEdit.text = str(result)

方法
----

+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`execute<class_Expression_method_execute>` **(** :ref:`Array<class_Array>` inputs=[  ], :ref:`Object<class_Object>` base_instance=null, :ref:`bool<class_bool>` show_error=true **)** |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_error_text<class_Expression_method_get_error_text>` **(** **)** |const|                                                                                                          |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_execute_failed<class_Expression_method_has_execute_failed>` **(** **)** |const|                                                                                                  |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`parse<class_Expression_method_parse>` **(** :ref:`String<class_String>` expression, :ref:`PoolStringArray<class_PoolStringArray>` input_names=PoolStringArray(  ) **)**              |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

方法说明
--------

.. _class_Expression_method_execute:

- :ref:`Variant<class_Variant>` **execute** **(** :ref:`Array<class_Array>` inputs=[  ], :ref:`Object<class_Object>` base_instance=null, :ref:`bool<class_bool>` show_error=true **)**

执行之前由\ :ref:`parse<class_Expression_method_parse>`\ 解析的表达式，并返回结果。在使用返回的对象之前，应该通过调用 :ref:`has_execute_failed<class_Expression_method_has_execute_failed>` 来检查方法是否失败。

如果你在 :ref:`parse<class_Expression_method_parse>` 中定义了输入变量，你可以在输入数组中以同样的顺序指定它们的值。

----

.. _class_Expression_method_get_error_text:

- :ref:`String<class_String>` **get_error_text** **(** **)** |const|

如果\ :ref:`parse<class_Expression_method_parse>`\ 失败了，返回错误文本。

----

.. _class_Expression_method_has_execute_failed:

- :ref:`bool<class_bool>` **has_execute_failed** **(** **)** |const|

如果\ :ref:`execute<class_Expression_method_execute>`\ 失败，返回\ ``true``\ 。

----

.. _class_Expression_method_parse:

- :ref:`Error<enum_@GlobalScope_Error>` **parse** **(** :ref:`String<class_String>` expression, :ref:`PoolStringArray<class_PoolStringArray>` input_names=PoolStringArray(  ) **)**

解析表达式并返回一个\ :ref:`Error<enum_@GlobalScope_Error>`\ 代码。

你可以选择用\ ``input_names``\ 指定可能出现在表达式中的变量名称，这样你就可以在表达式被执行时绑定它们。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
