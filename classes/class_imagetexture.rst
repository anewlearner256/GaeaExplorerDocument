:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in GaaeExplorer's source tree.
.. DO NOT EDIT THIS FILE, but the ImageTexture.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ImageTexture:

ImageTexture
============

**Inherits:** :ref:`Texture<class_Texture>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

基于 :ref:`Image<class_Image>` 图片的 :ref:`Texture<class_Texture>` 纹理。

描述
----

基于图片的纹理，要显示一个图片，必须使用 :ref:`create_from_image<class_ImageTexture_method_create_from_image>` 方法来创建一个 ``ImageTexture`` 图片纹理数据:

::

    var texture = ImageTexture.new()
    var image = Image.new()
    image.load("res://icon.png")
    texture.create_from_image(image)
    $Sprite.texture = texture

通过这种方式，可以在运行时通过从编辑器内部和外部加载图像来创建纹理。

\ **警告：** 最好用 :ref:`@GDScript.load<class_@GDScript_method_load>` 加载导入的纹理，而不是使用 :ref:`Image.load<class_Image_method_load>` 从文件系统中动态加载它们，因为它可能无法在导出的项目中工作：

::

    var texture = load("res://icon.png")
    $Sprite.texture = texture

这是因为图像必须首先作为 :ref:`StreamTexture<class_StreamTexture>` 导入才能使用 :ref:`@GDScript.load<class_@GDScript_method_load>` 加载。如果您仍然想像任何其他 :ref:`Resource<class_Resource>` 一样加载图像文件，请将其作为 :ref:`Image<class_Image>` 资源导入，然后使用 :ref:`@GDScript.load<class_@GDScript_method_load>` 方法正常加载它。

但请注意，仍然可以使用 :ref:`Texture.get_data<class_Texture_method_get_data>` 方法从导入的纹理中检索图像数据，该方法返回数据的副本：

::

    var texture = load("res://icon.png")
    var image : Image = texture.get_data()

\ ``ImageTexture`` 不是直接在编辑器界面中操作的，主要用于通过代码在屏幕上动态渲染图像。如果您需要在编辑器中按程序生成图像，请考虑将图像保存和导入为自定义纹理资源，以实现新的 :ref:`EditorImportPlugin<class_EditorImportPlugin>`\ 。

\ **注意：**\ 由于图形硬件限制，最大纹理尺寸为16384×16384像素。

教程
----

- :doc:`Importing images <../tutorials/assets_pipeline/importing_images>`

属性
----

+-------------------------------------------+-----------------------------------------------------------------+----------------------------------------------------------------+
| :ref:`int<class_int>`                     | flags                                                           | ``7`` (overrides :ref:`Texture<class_Texture_property_flags>`) |
+-------------------------------------------+-----------------------------------------------------------------+----------------------------------------------------------------+
| :ref:`float<class_float>`                 | :ref:`lossy_quality<class_ImageTexture_property_lossy_quality>` | ``0.7``                                                        |
+-------------------------------------------+-----------------------------------------------------------------+----------------------------------------------------------------+
| :ref:`Storage<enum_ImageTexture_Storage>` | :ref:`storage<class_ImageTexture_property_storage>`             | ``0``                                                          |
+-------------------------------------------+-----------------------------------------------------------------+----------------------------------------------------------------+

方法
----

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`create<class_ImageTexture_method_create>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Format<enum_Image_Format>` format, :ref:`int<class_int>` flags=7 **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`create_from_image<class_ImageTexture_method_create_from_image>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` flags=7 **)**                                              |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Format<enum_Image_Format>`      | :ref:`get_format<class_ImageTexture_method_get_format>` **(** **)** |const|                                                                                                                   |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`load<class_ImageTexture_method_load>` **(** :ref:`String<class_String>` path **)**                                                                                                      |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_data<class_ImageTexture_method_set_data>` **(** :ref:`Image<class_Image>` image **)**                                                                                               |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_size_override<class_ImageTexture_method_set_size_override>` **(** :ref:`Vector2<class_Vector2>` size **)**                                                                          |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

枚举
----

.. _enum_ImageTexture_Storage:

.. _class_ImageTexture_constant_STORAGE_RAW:

.. _class_ImageTexture_constant_STORAGE_COMPRESS_LOSSY:

.. _class_ImageTexture_constant_STORAGE_COMPRESS_LOSSLESS:

enum **Storage**:

- **STORAGE_RAW** = **0** --- :ref:`Image<class_Image>` 图像的原始储存数据。

- **STORAGE_COMPRESS_LOSSY** = **1** --- :ref:`Image<class_Image>`\ 数据是用有损算法压缩的。 你可以用\ :ref:`lossy_quality<class_ImageTexture_property_lossy_quality>`\ 设置存储质量。

- **STORAGE_COMPRESS_LOSSLESS** = **2** --- :ref:`Image<class_Image>`\ 数据是用无损算法压缩的。

属性说明
--------

.. _class_ImageTexture_property_lossy_quality:

- :ref:`float<class_float>` **lossy_quality**

+-----------+----------------------------------+
| *Default* | ``0.7``                          |
+-----------+----------------------------------+
| *Setter*  | set_lossy_storage_quality(value) |
+-----------+----------------------------------+
| *Getter*  | get_lossy_storage_quality()      |
+-----------+----------------------------------+

:ref:`STORAGE_COMPRESS_LOSSY<class_ImageTexture_constant_STORAGE_COMPRESS_LOSSY>`\ 的存储质量。

----

.. _class_ImageTexture_property_storage:

- :ref:`Storage<enum_ImageTexture_Storage>` **storage**

+-----------+--------------------+
| *Default* | ``0``              |
+-----------+--------------------+
| *Setter*  | set_storage(value) |
+-----------+--------------------+
| *Getter*  | get_storage()      |
+-----------+--------------------+

存储类型，即原始、有损、或压缩。

方法说明
--------

.. _class_ImageTexture_method_create:

- void **create** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Format<enum_Image_Format>` format, :ref:`int<class_int>` flags=7 **)**

创建具有\ ``width``\ 和\ ``height``\ 的新\ ``ImageTexture``\ 。

\ ``format``\ 是\ :ref:`Format<enum_Image_Format>`\ 中的一个值，\ ``flags``\ 是\ :ref:`Flags<enum_Texture_Flags>`\ 的任意组合。

----

.. _class_ImageTexture_method_create_from_image:

- void **create_from_image** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` flags=7 **)**

通过使用 :ref:`Flags<enum_Texture_Flags>` 中的 ``flags`` 分配和设置来自 :ref:`Image<class_Image>` 的数据来初始化纹理。根据 :ref:`Format<enum_Image_Format>`\ ，可以进行 sRGB 到线性颜色空间的转换。

----

.. _class_ImageTexture_method_get_format:

- :ref:`Format<enum_Image_Format>` **get_format** **(** **)** |const|

返回纹理的格式，\ :ref:`Format<enum_Image_Format>` 之一。

----

.. _class_ImageTexture_method_load:

- :ref:`Error<enum_@GlobalScope_Error>` **load** **(** :ref:`String<class_String>` path **)**

从文件路径加载图像,并从中创建一个纹理图片。

\ **注释:**:该方法已被废弃,并将在GaaeExplorer 4.0中被删除,请建议使用Image.load()和create_from_image()代替。

----

.. _class_ImageTexture_method_set_data:

- void **set_data** **(** :ref:`Image<class_Image>` image **)**

用新的 :ref:`Image<class_Image>` 替换纹理的数据。

\ **注意：**\ 纹理必须先用 :ref:`create_from_image<class_ImageTexture_method_create_from_image>` 方法初始化，然后才能更新。新的图像尺寸、格式和多级渐远纹理配置应与现有纹理的图像配置相匹配，否则必须使用 :ref:`create_from_image<class_ImageTexture_method_create_from_image>` 方法重新创建。

如果需要频繁更新纹理，请在 :ref:`create_from_image<class_ImageTexture_method_create_from_image>` 上使用此方法，这比每次为新纹理分配额外内存要快。

----

.. _class_ImageTexture_method_set_size_override:

- void **set_size_override** **(** :ref:`Vector2<class_Vector2>` size **)**

将纹理的大小调整为指定的尺寸。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
