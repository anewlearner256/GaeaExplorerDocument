# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_astar.rst:10
msgid "AStar"
msgstr ""

#: ../classes/class_astar.rst:12
msgid "**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_astar.rst:14
msgid "A\\* 的一种实现，用于寻找空间中连接点之间的最短路径。"
msgstr ""

#: ../classes/class_astar.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_astar.rst:19
msgid "A\\*（A 星）是一种计算机算法，广泛用于寻路和图遍历，是通过一组给定的边（线段），在顶点（点）之间绘制短路径的过程。A\\* 因其性能和准确性而被广泛使用。GaaeExplorer 的 A\\* 实现默认使用三维空间中的点和欧式距离。"
msgstr ""

#: ../classes/class_astar.rst:21
msgid "您需要使用 :ref:`add_point<class_AStar_method_add_point>` 手动添加点，并使用 :ref:`connect_points<class_AStar_method_connect_points>` 手动创建线段。然后，可以使用 :ref:`are_points_connected<class_AStar_method_are_points_connected>` 函数测试两点之间是否存在路径，通过 :ref:`get_id_path<class_AStar_method_get_id_path>` 获取包含索引的路径，或使用 :ref:`get_point_path<class_AStar_method_get_point_path>` 获取包含实际坐标的路径。"
msgstr ""

#: ../classes/class_astar.rst:23
msgid "也可以使用非欧式距离。为此，创建一个扩展 ``AStar`` 的类并重写方法 :ref:`_compute_cost<class_AStar_method__compute_cost>` 和 :ref:`_estimate_cost<class_AStar_method__estimate_cost>`\\ 。这两个方法都接受两个索引并返回一个长度，如以下示例所示："
msgstr ""

#: ../classes/class_astar.rst:36
msgid "\\ :ref:`_estimate_cost<class_AStar_method__estimate_cost>` 应返回距离的下限，即 ``_estimate_cost(u, v) <= _compute_cost(u, v)``\\ 。这可以作为算法的提示，因为自定义 ``_compute_cost`` 可能计算量很大。如果不是这种情况，请使 :ref:`_estimate_cost<class_AStar_method__estimate_cost>` 返回与 :ref:`_compute_cost<class_AStar_method__compute_cost>` 相同的值，以便为算法提供最准确的信息。"
msgstr ""

#: ../classes/class_astar.rst:38
msgid "如果使用默认的 :ref:`_estimate_cost<class_AStar_method__estimate_cost>` 和 :ref:`_compute_cost<class_AStar_method__compute_cost>` 方法，或者如果提供的 :ref:`_estimate_cost<class_AStar_method__estimate_cost>` 方法返回成本的下限，则 A\\* 返回的路径将是成本最低的路径。这里，路径的代价等于路径中所有段的\\ :ref:`_compute_cost<class_AStar_method__compute_cost>`\\ 结果之和乘以各个段端点的\\ ``weight_scale``\\ 权重。如果使用默认方法并且所有点的 ``weight_scale`` 设置为 ``1.0``\\ ，则这等于路径中所有段的欧式距离之和。"
msgstr ""

#: ../classes/class_astar.rst:41
msgid "方法"
msgstr ""

#: ../classes/class_astar.rst:44
#: ../classes/class_astar.rst:46
#: ../classes/class_astar.rst:76
msgid ":ref:`float<class_float>`"
msgstr ""

#: ../classes/class_astar.rst:44
msgid ":ref:`_compute_cost<class_AStar_method__compute_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|"
msgstr ""

#: ../classes/class_astar.rst:46
msgid ":ref:`_estimate_cost<class_AStar_method__estimate_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|"
msgstr ""

#: ../classes/class_astar.rst:48
#: ../classes/class_astar.rst:52
#: ../classes/class_astar.rst:54
#: ../classes/class_astar.rst:56
#: ../classes/class_astar.rst:84
#: ../classes/class_astar.rst:86
#: ../classes/class_astar.rst:88
#: ../classes/class_astar.rst:90
#: ../classes/class_astar.rst:92
msgid "void"
msgstr ""

#: ../classes/class_astar.rst:48
msgid ":ref:`add_point<class_AStar_method_add_point>` **(** :ref:`int<class_int>` id, :ref:`Vector3<class_Vector3>` position, :ref:`float<class_float>` weight_scale=1.0 **)**"
msgstr ""

#: ../classes/class_astar.rst:50
#: ../classes/class_astar.rst:80
#: ../classes/class_astar.rst:82
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../classes/class_astar.rst:50
msgid ":ref:`are_points_connected<class_AStar_method_are_points_connected>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:52
msgid ":ref:`clear<class_AStar_method_clear>` **(** **)**"
msgstr ""

#: ../classes/class_astar.rst:54
msgid ":ref:`connect_points<class_AStar_method_connect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**"
msgstr ""

#: ../classes/class_astar.rst:56
msgid ":ref:`disconnect_points<class_AStar_method_disconnect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**"
msgstr ""

#: ../classes/class_astar.rst:58
#: ../classes/class_astar.rst:60
#: ../classes/class_astar.rst:66
#: ../classes/class_astar.rst:70
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../classes/class_astar.rst:58
msgid ":ref:`get_available_point_id<class_AStar_method_get_available_point_id>` **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:60
msgid ":ref:`get_closest_point<class_AStar_method_get_closest_point>` **(** :ref:`Vector3<class_Vector3>` to_position, :ref:`bool<class_bool>` include_disabled=false **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:62
#: ../classes/class_astar.rst:74
msgid ":ref:`Vector3<class_Vector3>`"
msgstr ""

#: ../classes/class_astar.rst:62
msgid ":ref:`get_closest_position_in_segment<class_AStar_method_get_closest_position_in_segment>` **(** :ref:`Vector3<class_Vector3>` to_position **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:64
#: ../classes/class_astar.rst:68
msgid ":ref:`PoolIntArray<class_PoolIntArray>`"
msgstr ""

#: ../classes/class_astar.rst:64
msgid ":ref:`get_id_path<class_AStar_method_get_id_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**"
msgstr ""

#: ../classes/class_astar.rst:66
msgid ":ref:`get_point_capacity<class_AStar_method_get_point_capacity>` **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:68
msgid ":ref:`get_point_connections<class_AStar_method_get_point_connections>` **(** :ref:`int<class_int>` id **)**"
msgstr ""

#: ../classes/class_astar.rst:70
msgid ":ref:`get_point_count<class_AStar_method_get_point_count>` **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:72
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>`"
msgstr ""

#: ../classes/class_astar.rst:72
msgid ":ref:`get_point_path<class_AStar_method_get_point_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**"
msgstr ""

#: ../classes/class_astar.rst:74
msgid ":ref:`get_point_position<class_AStar_method_get_point_position>` **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:76
msgid ":ref:`get_point_weight_scale<class_AStar_method_get_point_weight_scale>` **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:78
msgid ":ref:`Array<class_Array>`"
msgstr ""

#: ../classes/class_astar.rst:78
msgid ":ref:`get_points<class_AStar_method_get_points>` **(** **)**"
msgstr ""

#: ../classes/class_astar.rst:80
msgid ":ref:`has_point<class_AStar_method_has_point>` **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:82
msgid ":ref:`is_point_disabled<class_AStar_method_is_point_disabled>` **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:84
msgid ":ref:`remove_point<class_AStar_method_remove_point>` **(** :ref:`int<class_int>` id **)**"
msgstr ""

#: ../classes/class_astar.rst:86
msgid ":ref:`reserve_space<class_AStar_method_reserve_space>` **(** :ref:`int<class_int>` num_nodes **)**"
msgstr ""

#: ../classes/class_astar.rst:88
msgid ":ref:`set_point_disabled<class_AStar_method_set_point_disabled>` **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` disabled=true **)**"
msgstr ""

#: ../classes/class_astar.rst:90
msgid ":ref:`set_point_position<class_AStar_method_set_point_position>` **(** :ref:`int<class_int>` id, :ref:`Vector3<class_Vector3>` position **)**"
msgstr ""

#: ../classes/class_astar.rst:92
msgid ":ref:`set_point_weight_scale<class_AStar_method_set_point_weight_scale>` **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**"
msgstr ""

#: ../classes/class_astar.rst:96
msgid "方法说明"
msgstr ""

#: ../classes/class_astar.rst:100
msgid ":ref:`float<class_float>` **_compute_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|"
msgstr ""

#: ../classes/class_astar.rst:102
msgid "计算两个连接点之间的成本时调用。"
msgstr ""

#: ../classes/class_astar.rst:104
#: ../classes/class_astar.rst:114
msgid "注意这个函数隐藏在默认的 ``AStar`` 类中。"
msgstr ""

#: ../classes/class_astar.rst:110
msgid ":ref:`float<class_float>` **_estimate_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** |virtual|"
msgstr ""

#: ../classes/class_astar.rst:112
msgid "当估计一个点和路径终点之间的成本时调用。"
msgstr ""

#: ../classes/class_astar.rst:120
msgid "void **add_point** **(** :ref:`int<class_int>` id, :ref:`Vector3<class_Vector3>` position, :ref:`float<class_float>` weight_scale=1.0 **)**"
msgstr ""

#: ../classes/class_astar.rst:122
msgid "在给定的位置添加一个新的点，并使用给定的标识符。\\ ``id``\\ 必须是0或者更大，\\ ``weight_scale``\\ 必须是1或者更大。"
msgstr ""

#: ../classes/class_astar.rst:124
msgid "在确定从邻点到此点的一段路程的总成本时，\\ ``weight_scale``\\ 要乘以\\ :ref:`_compute_cost<class_AStar_method__compute_cost>`\\ 的结果。因此，在其他条件相同的情况下，算法优先选择\\ ``weight_scale``\\ 较低的点来形成路径。"
msgstr ""

#: ../classes/class_astar.rst:131
msgid "如果对于给定的\\ ``id``\\ 已经存在一个点，它的位置和权重将被更新为给定的值。"
msgstr ""

#: ../classes/class_astar.rst:137
msgid ":ref:`bool<class_bool>` **are_points_connected** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:139
msgid "返回两个给定点是否通过线段直接连接。如果 ``bidirectional`` 为 ``false``\\ ，则返回是否可以通过此段从 ``id`` 到 ``to_id`` 进行移动。"
msgstr ""

#: ../classes/class_astar.rst:145
msgid "void **clear** **(** **)**"
msgstr ""

#: ../classes/class_astar.rst:147
msgid "清除所有点和线段。"
msgstr ""

#: ../classes/class_astar.rst:153
msgid "void **connect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**"
msgstr ""

#: ../classes/class_astar.rst:155
msgid "在给定点之间创建线段。如果 ``bidirectiona`` 为 ``false``\\ ，则仅允许从 ``id`` 到 ``to_id`` 的移动，而不允许反向移动。"
msgstr ""

#: ../classes/class_astar.rst:168
msgid "void **disconnect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**"
msgstr ""

#: ../classes/class_astar.rst:170
msgid "删除给定点之间的段。如果 ``bidirectional`` 为 ``false``\\ ，则只阻止从 ``id`` 到 ``to_id`` 的移动，可能会保留一个单向的线段。"
msgstr ""

#: ../classes/class_astar.rst:176
msgid ":ref:`int<class_int>` **get_available_point_id** **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:178
msgid "返回没有关联的下一个可用点的ID。"
msgstr ""

#: ../classes/class_astar.rst:184
msgid ":ref:`int<class_int>` **get_closest_point** **(** :ref:`Vector3<class_Vector3>` to_position, :ref:`bool<class_bool>` include_disabled=false **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:186
msgid "返回离\\ ``to_position``\\ 最近的点的ID，可以选择将禁用的点考虑在内。如果点池中没有点，返回\\ ``-1``\\ 。"
msgstr ""

#: ../classes/class_astar.rst:188
msgid "\\ **注意:** 如果几个点都是离\\ ``to_position``\\ 最近的点，将返回ID最小的那个点，以保证结果的确定性。"
msgstr ""

#: ../classes/class_astar.rst:194
msgid ":ref:`Vector3<class_Vector3>` **get_closest_position_in_segment** **(** :ref:`Vector3<class_Vector3>` to_position **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:196
msgid "返回位于两个连接点之间的线段中离 ``to_position`` 最近的位置。"
msgstr ""

#: ../classes/class_astar.rst:206
msgid "结果是在从 ``y=0`` 到 ``y=5`` 的线段中。它是该段中离给定点最近的位置。"
msgstr ""

#: ../classes/class_astar.rst:212
msgid ":ref:`PoolIntArray<class_PoolIntArray>` **get_id_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**"
msgstr ""

#: ../classes/class_astar.rst:214
msgid "返回一个数组，该数组中包含了 AStar 在给定点之间找到的路径的点的 ID。数组从路径的起始点到结束点排序。"
msgstr ""

#: ../classes/class_astar.rst:231
msgid "如果你把第 2 点的权重改为 3，那么结果就会变成 ``[1, 4, 3]``\\ ，因为现在虽然距离长了，但通过第 4 点比通过第 2 点 “容易”。"
msgstr ""

#: ../classes/class_astar.rst:237
msgid ":ref:`int<class_int>` **get_point_capacity** **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:239
msgid "返回支持点的结构的容量，与 ``reserve_space`` 配合使用。"
msgstr ""

#: ../classes/class_astar.rst:245
msgid ":ref:`PoolIntArray<class_PoolIntArray>` **get_point_connections** **(** :ref:`int<class_int>` id **)**"
msgstr ""

#: ../classes/class_astar.rst:247
msgid "返回一个数组，其中包含与给定点形成连接的点的 ID。"
msgstr ""

#: ../classes/class_astar.rst:266
msgid ":ref:`int<class_int>` **get_point_count** **(** **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:268
msgid "返回当前积分池中的积分数量。"
msgstr ""

#: ../classes/class_astar.rst:274
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **get_point_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**"
msgstr ""

#: ../classes/class_astar.rst:276
msgid "返回一个数组，其中包含 AStar 在给定点之间找到的路径中的点。数组从路径的起点到终点进行排序。"
msgstr ""

#: ../classes/class_astar.rst:278
msgid "\\ **注意：** 这个方法不是线程安全的。如果从 :ref:`Thread<class_Thread>` 调用，它将返回一个空的 :ref:`PoolVector3Array<class_PoolVector3Array>` 并打印一条错误消息。"
msgstr ""

#: ../classes/class_astar.rst:284
msgid ":ref:`Vector3<class_Vector3>` **get_point_position** **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:286
msgid "返回与给定\\ ``id``\\ 相关联的点的位置。"
msgstr ""

#: ../classes/class_astar.rst:292
msgid ":ref:`float<class_float>` **get_point_weight_scale** **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:294
msgid "返回与给定\\ ``id``\\ 关联的点的权重比例。"
msgstr ""

#: ../classes/class_astar.rst:300
msgid ":ref:`Array<class_Array>` **get_points** **(** **)**"
msgstr ""

#: ../classes/class_astar.rst:302
msgid "返回所有点的数组。"
msgstr ""

#: ../classes/class_astar.rst:308
msgid ":ref:`bool<class_bool>` **has_point** **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:310
msgid "返回与给定\\ ``id``\\ 相关联的点是否存在。"
msgstr ""

#: ../classes/class_astar.rst:316
msgid ":ref:`bool<class_bool>` **is_point_disabled** **(** :ref:`int<class_int>` id **)** |const|"
msgstr ""

#: ../classes/class_astar.rst:318
msgid "返回是否禁用点以进行寻路。默认情况下，所有点均处于启用状态。"
msgstr ""

#: ../classes/class_astar.rst:324
msgid "void **remove_point** **(** :ref:`int<class_int>` id **)**"
msgstr ""

#: ../classes/class_astar.rst:326
msgid "从积分池中删除与给定\\ ``id``\\ 关联的积分。"
msgstr ""

#: ../classes/class_astar.rst:332
msgid "void **reserve_space** **(** :ref:`int<class_int>` num_nodes **)**"
msgstr ""

#: ../classes/class_astar.rst:334
msgid "在内部为\\ ``num_nodes``\\ 个点保留空间，如果您一次要添加一个已知的大量点（例如对于一个网格），则很有用。新容量必须大于或等于旧容量。"
msgstr ""

#: ../classes/class_astar.rst:340
msgid "void **set_point_disabled** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` disabled=true **)**"
msgstr ""

#: ../classes/class_astar.rst:342
msgid "禁用或启用指定点的寻路功能。用于制作临时障碍物。"
msgstr ""

#: ../classes/class_astar.rst:348
msgid "void **set_point_position** **(** :ref:`int<class_int>` id, :ref:`Vector3<class_Vector3>` position **)**"
msgstr ""

#: ../classes/class_astar.rst:350
msgid "为具有给定\\ ``id``\\ 的点设置\\ ``position``\\ 。"
msgstr ""

#: ../classes/class_astar.rst:356
msgid "void **set_point_weight_scale** **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**"
msgstr ""

#: ../classes/class_astar.rst:358
msgid "为给定的\\ ``id``\\ 的点设置\\ ``weight_scale``\\ 。在确定从邻接点到这个点的一段路程的总成本时，\\ ``weight_scale``\\ 要乘以\\ :ref:`_compute_cost<class_AStar_method__compute_cost>`\\ 的结果。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
