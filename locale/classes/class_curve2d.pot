# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_curve2d.rst:10
msgid "Curve2D"
msgstr ""

#: ../classes/class_curve2d.rst:12
msgid "**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_curve2d.rst:14
msgid "描述二维空间的贝兹尔曲线。"
msgstr ""

#: ../classes/class_curve2d.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_curve2d.rst:19
msgid "该类描述了二维空间中的贝兹尔曲线。它主要用于给\\ :ref:`Path2D<class_Path2D>`\\ 一个形状，但也可以手动采样用于其他目的。"
msgstr ""

#: ../classes/class_curve2d.rst:21
msgid "它保留了沿曲线的预计算点的缓存，以加快进一步的计算。"
msgstr ""

#: ../classes/class_curve2d.rst:24
msgid "属性"
msgstr ""

#: ../classes/class_curve2d.rst:27
#: ../classes/class_curve2d.rst:38
#: ../classes/class_curve2d.rst:42
msgid ":ref:`float<class_float>`"
msgstr ""

#: ../classes/class_curve2d.rst:27
msgid ":ref:`bake_interval<class_Curve2D_property_bake_interval>`"
msgstr ""

#: ../classes/class_curve2d.rst:27
#: ../classes/class_curve2d.rst:79
msgid "``5.0``"
msgstr ""

#: ../classes/class_curve2d.rst:31
msgid "方法"
msgstr ""

#: ../classes/class_curve2d.rst:34
#: ../classes/class_curve2d.rst:36
#: ../classes/class_curve2d.rst:60
#: ../classes/class_curve2d.rst:62
#: ../classes/class_curve2d.rst:64
#: ../classes/class_curve2d.rst:66
msgid "void"
msgstr ""

#: ../classes/class_curve2d.rst:34
msgid ":ref:`add_point<class_Curve2D_method_add_point>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`Vector2<class_Vector2>` in=Vector2( 0, 0 ), :ref:`Vector2<class_Vector2>` out=Vector2( 0, 0 ), :ref:`int<class_int>` at_position=-1 **)**"
msgstr ""

#: ../classes/class_curve2d.rst:36
msgid ":ref:`clear_points<class_Curve2D_method_clear_points>` **(** **)**"
msgstr ""

#: ../classes/class_curve2d.rst:38
msgid ":ref:`get_baked_length<class_Curve2D_method_get_baked_length>` **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:40
#: ../classes/class_curve2d.rst:68
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>`"
msgstr ""

#: ../classes/class_curve2d.rst:40
msgid ":ref:`get_baked_points<class_Curve2D_method_get_baked_points>` **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:42
msgid ":ref:`get_closest_offset<class_Curve2D_method_get_closest_offset>` **(** :ref:`Vector2<class_Vector2>` to_point **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:44
#: ../classes/class_curve2d.rst:48
#: ../classes/class_curve2d.rst:50
#: ../classes/class_curve2d.rst:52
#: ../classes/class_curve2d.rst:54
#: ../classes/class_curve2d.rst:56
#: ../classes/class_curve2d.rst:58
msgid ":ref:`Vector2<class_Vector2>`"
msgstr ""

#: ../classes/class_curve2d.rst:44
msgid ":ref:`get_closest_point<class_Curve2D_method_get_closest_point>` **(** :ref:`Vector2<class_Vector2>` to_point **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:46
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../classes/class_curve2d.rst:46
msgid ":ref:`get_point_count<class_Curve2D_method_get_point_count>` **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:48
msgid ":ref:`get_point_in<class_Curve2D_method_get_point_in>` **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:50
msgid ":ref:`get_point_out<class_Curve2D_method_get_point_out>` **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:52
msgid ":ref:`get_point_position<class_Curve2D_method_get_point_position>` **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:54
msgid ":ref:`interpolate<class_Curve2D_method_interpolate>` **(** :ref:`int<class_int>` idx, :ref:`float<class_float>` t **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:56
msgid ":ref:`interpolate_baked<class_Curve2D_method_interpolate_baked>` **(** :ref:`float<class_float>` offset, :ref:`bool<class_bool>` cubic=false **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:58
msgid ":ref:`interpolatef<class_Curve2D_method_interpolatef>` **(** :ref:`float<class_float>` fofs **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:60
msgid ":ref:`remove_point<class_Curve2D_method_remove_point>` **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../classes/class_curve2d.rst:62
msgid ":ref:`set_point_in<class_Curve2D_method_set_point_in>` **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:64
msgid ":ref:`set_point_out<class_Curve2D_method_set_point_out>` **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:66
msgid ":ref:`set_point_position<class_Curve2D_method_set_point_position>` **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:68
msgid ":ref:`tessellate<class_Curve2D_method_tessellate>` **(** :ref:`int<class_int>` max_stages=5, :ref:`float<class_float>` tolerance_degrees=4 **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:72
msgid "属性说明"
msgstr ""

#: ../classes/class_curve2d.rst:76
msgid ":ref:`float<class_float>` **bake_interval**"
msgstr ""

#: ../classes/class_curve2d.rst:79
msgid "*Default*"
msgstr ""

#: ../classes/class_curve2d.rst:81
msgid "*Setter*"
msgstr ""

#: ../classes/class_curve2d.rst:81
msgid "set_bake_interval(value)"
msgstr ""

#: ../classes/class_curve2d.rst:83
msgid "*Getter*"
msgstr ""

#: ../classes/class_curve2d.rst:83
msgid "get_bake_interval()"
msgstr ""

#: ../classes/class_curve2d.rst:86
msgid "相邻两个缓存点之间的距离，以像素为单位。改变它将迫使缓存在下次调用\\ :ref:`get_baked_points<class_Curve2D_method_get_baked_points>`\\ 或\\ :ref:`get_baked_length<class_Curve2D_method_get_baked_length>`\\ 函数时重新计算。距离越小，缓存中的点越多，占用的内存也越多，所以使用时要注意。"
msgstr ""

#: ../classes/class_curve2d.rst:89
msgid "方法说明"
msgstr ""

#: ../classes/class_curve2d.rst:93
msgid "void **add_point** **(** :ref:`Vector2<class_Vector2>` position, :ref:`Vector2<class_Vector2>` in=Vector2( 0, 0 ), :ref:`Vector2<class_Vector2>` out=Vector2( 0, 0 ), :ref:`int<class_int>` at_position=-1 **)**"
msgstr ""

#: ../classes/class_curve2d.rst:95
msgid "在曲线的 ``position`` 上添加一个点，控制点 ``in`` 和 ``out``\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:97
msgid "如果给定了 ``at_position``\\ ，这个点会被插入到点号 ``at_position`` 之前，并将这个点（以及之后的每一个点）移到被插入点之后。如果\\ ``at_position``\\ 没有给定，或者是一个非法值(``at_position <0``\\ 或\\ ``at_position >= [method get_point_count]``)，该点将被追加在点列表的最后。"
msgstr ""

#: ../classes/class_curve2d.rst:103
msgid "void **clear_points** **(** **)**"
msgstr ""

#: ../classes/class_curve2d.rst:105
msgid "从曲线中删除所有点。"
msgstr ""

#: ../classes/class_curve2d.rst:111
msgid ":ref:`float<class_float>` **get_baked_length** **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:113
msgid "根据缓存的点，返回曲线的总长度。给予足够的密度(参阅\\ :ref:`bake_interval<class_Curve2D_property_bake_interval>`)，它应该是足够近似的。"
msgstr ""

#: ../classes/class_curve2d.rst:119
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>` **get_baked_points** **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:121
msgid "以\\ :ref:`PoolVector2Array<class_PoolVector2Array>`\\ 的形式返回缓存的点。"
msgstr ""

#: ../classes/class_curve2d.rst:127
msgid ":ref:`float<class_float>` **get_closest_offset** **(** :ref:`Vector2<class_Vector2>` to_point **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:129
msgid "返回与 ``to_point`` 最近的偏移量。这个偏移量在 :ref:`interpolate_baked<class_Curve2D_method_interpolate_baked>` 中使用。"
msgstr ""

#: ../classes/class_curve2d.rst:131
msgid "\\ ``to_point`` 必须在这条曲线的局部空间中。"
msgstr ""

#: ../classes/class_curve2d.rst:137
msgid ":ref:`Vector2<class_Vector2>` **get_closest_point** **(** :ref:`Vector2<class_Vector2>` to_point **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:139
msgid "返回最接近 ``to_point`` 并烘焙好的点（在曲线的局部空间）。"
msgstr ""

#: ../classes/class_curve2d.rst:141
msgid "\\ ``to_point`` 必须是在这个曲线的局部空间。"
msgstr ""

#: ../classes/class_curve2d.rst:147
msgid ":ref:`int<class_int>` **get_point_count** **(** **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:149
msgid "返回描述曲线的点数。"
msgstr ""

#: ../classes/class_curve2d.rst:155
msgid ":ref:`Vector2<class_Vector2>` **get_point_in** **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:157
msgid "返回指向顶点\\ ``idx``\\ 的控制点位置。返回的位置是相对于顶点\\ ``idx``\\ 的。如果索引超出了范围，函数会向控制台发送一条错误，并返回\\ ``(0, 0)``\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:163
msgid ":ref:`Vector2<class_Vector2>` **get_point_out** **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:165
msgid "返回从顶点\\ ``idx``\\ 引出的控制点位置。返回的位置是相对于顶点 ``idx``\\ 。如果索引越界，函数会向控制台发送错误，并返回 ``(0, 0)``\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:171
msgid ":ref:`Vector2<class_Vector2>` **get_point_position** **(** :ref:`int<class_int>` idx **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:173
msgid "返回顶点的位置\\ ``idx``\\ 。如果索引超出边界，函数会向控制台发送一个错误信息，并返回\\ ``(0，0)``\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:179
msgid ":ref:`Vector2<class_Vector2>` **interpolate** **(** :ref:`int<class_int>` idx, :ref:`float<class_float>` t **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:181
msgid "返回顶点 ``idx`` 和顶点 ``idx + 1`` 之间的位置，其中 ``t`` 控制该点是第一个顶点 (``t = 0.0``)、最后一个顶点 (``t = 1.0``)，还是介于两者之间。范围外的\\ ``t``\\ 的值(``0.0 >= t <=1``)会产生奇怪但可预测的结果。"
msgstr ""

#: ../classes/class_curve2d.rst:183
msgid "如果\\ ``idx``\\ 超出边界，则截断到第一个或最后一个顶点，而\\ ``t``\\ 则被忽略。如果曲线没有点，函数会向控制台发送一个错误，并返回 ``(0，0)``\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:189
msgid ":ref:`Vector2<class_Vector2>` **interpolate_baked** **(** :ref:`float<class_float>` offset, :ref:`bool<class_bool>` cubic=false **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:191
msgid "返回曲线中位于 ``offset`` 位置的一个点，其中 ``offset`` 是沿曲线的像素距离。"
msgstr ""

#: ../classes/class_curve2d.rst:193
msgid "为此，它找到 ``offset`` 所在的两个缓存点，然后对其进行插值。如果将 ``cubic`` 设置为 ``true`` 则为立方插值，如果设置为 ``false`` 则为线性插值。"
msgstr ""

#: ../classes/class_curve2d.rst:195
msgid "立方内插往往能更好地跟随曲线，但线性内插速度更快（而且通常足够精确）。"
msgstr ""

#: ../classes/class_curve2d.rst:201
msgid ":ref:`Vector2<class_Vector2>` **interpolatef** **(** :ref:`float<class_float>` fofs **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:203
msgid "返回顶点 ``fofs`` 的位置。它使用 ``fofs`` 的整数部分作为 ``idx`` 和分数部分作为 ``t`` 调用 :ref:`interpolate<class_Curve2D_method_interpolate>`\\ 。"
msgstr ""

#: ../classes/class_curve2d.rst:209
msgid "void **remove_point** **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../classes/class_curve2d.rst:211
msgid "从曲线上删除点 ``idx`` 。如果 ``idx`` 越界，会向控制台发送错误信息。"
msgstr ""

#: ../classes/class_curve2d.rst:217
msgid "void **set_point_in** **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:219
msgid "设置通往顶点 ``idx`` 的控制点位置。如果索引超出范围，函数会向控制台发送错误信息。"
msgstr ""

#: ../classes/class_curve2d.rst:225
msgid "void **set_point_out** **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:227
msgid "设置从顶点\\ ``idx``\\ 引出的控制点位置。如果索引超出范围，该函数会向控制台发送错误。位置是相对于顶点的。"
msgstr ""

#: ../classes/class_curve2d.rst:233
msgid "void **set_point_position** **(** :ref:`int<class_int>` idx, :ref:`Vector2<class_Vector2>` position **)**"
msgstr ""

#: ../classes/class_curve2d.rst:235
msgid "设置顶点\\ ``idx``\\ 的位置。如果索引超出范围，函数会向控制台发送一个错误信息。"
msgstr ""

#: ../classes/class_curve2d.rst:241
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>` **tessellate** **(** :ref:`int<class_int>` max_stages=5, :ref:`float<class_float>` tolerance_degrees=4 **)** |const|"
msgstr ""

#: ../classes/class_curve2d.rst:243
msgid "返回沿曲线的点的列表，点的密度由曲率控制。也就是说，曲线部分比直线部分有更多的点。"
msgstr ""

#: ../classes/class_curve2d.rst:245
msgid "这个近似值在每个点之间做了直段，然后将这些直段细分，直到得到的形状足够相似。"
msgstr ""

#: ../classes/class_curve2d.rst:247
msgid "\\ ``max_stages`` 控制一个曲线段在被认为足够近似之前可能面临多少次细分。每一次细分都会将曲线段分成两半，所以默认的 5 个阶段意味着每条曲线段最多可以细分 32 次。请谨慎增加!"
msgstr ""

#: ../classes/class_curve2d.rst:249
msgid "\\ ``tolerance_degrees`` 控制一个曲线段的中点与实际曲线的偏差多少度才会被细分。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
