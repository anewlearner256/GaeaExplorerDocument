# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_resource.rst:10
msgid "Resource"
msgstr ""

#: ../classes/class_resource.rst:12
msgid "**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_resource.rst:14
msgid "**Inherited By:** :ref:`Animation<class_Animation>`, :ref:`AnimationNode<class_AnimationNode>`, :ref:`AnimationNodeStateMachinePlayback<class_AnimationNodeStateMachinePlayback>`, :ref:`AnimationNodeStateMachineTransition<class_AnimationNodeStateMachineTransition>`, :ref:`AudioBusLayout<class_AudioBusLayout>`, :ref:`AudioEffect<class_AudioEffect>`, :ref:`AudioStream<class_AudioStream>`, :ref:`BakedLightmapData<class_BakedLightmapData>`, :ref:`BitMap<class_BitMap>`, :ref:`ButtonGroup<class_ButtonGroup>`, :ref:`CryptoKey<class_CryptoKey>`, :ref:`CubeMap<class_CubeMap>`, :ref:`Curve<class_Curve>`, :ref:`Curve2D<class_Curve2D>`, :ref:`Curve3D<class_Curve3D>`, :ref:`DynamicFontData<class_DynamicFontData>`, :ref:`EditorSettings<class_EditorSettings>`, :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>`, :ref:`Environment<class_Environment>`, :ref:`Font<class_Font>`, :ref:`GDNativeLibrary<class_GDNativeLibrary>`, :ref:`GIProbeData<class_GIProbeData>`, :ref:`GLTFAccessor<class_GLTFAccessor>`, :ref:`GLTFAnimation<class_GLTFAnimation>`, :ref:`GLTFBufferView<class_GLTFBufferView>`, :ref:`GLTFCamera<class_GLTFCamera>`, :ref:`GLTFDocument<class_GLTFDocument>`, :ref:`GLTFLight<class_GLTFLight>`, :ref:`GLTFMesh<class_GLTFMesh>`, :ref:`GLTFNode<class_GLTFNode>`, :ref:`GLTFSkeleton<class_GLTFSkeleton>`, :ref:`GLTFSkin<class_GLTFSkin>`, :ref:`GLTFSpecGloss<class_GLTFSpecGloss>`, :ref:`GLTFState<class_GLTFState>`, :ref:`GLTFTexture<class_GLTFTexture>`, :ref:`Gradient<class_Gradient>`, :ref:`Image<class_Image>`, :ref:`InputEvent<class_InputEvent>`, :ref:`Material<class_Material>`, :ref:`Mesh<class_Mesh>`, :ref:`MeshLibrary<class_MeshLibrary>`, :ref:`MultiMesh<class_MultiMesh>`, :ref:`NavigationMesh<class_NavigationMesh>`, :ref:`NavigationPolygon<class_NavigationPolygon>`, :ref:`OccluderPolygon2D<class_OccluderPolygon2D>`, :ref:`OccluderShape<class_OccluderShape>`, :ref:`OpenSimplexNoise<class_OpenSimplexNoise>`, :ref:`PackedDataContainer<class_PackedDataContainer>`, :ref:`PackedScene<class_PackedScene>`, :ref:`PhysicsMaterial<class_PhysicsMaterial>`, :ref:`PolygonPathFinder<class_PolygonPathFinder>`, :ref:`RichTextEffect<class_RichTextEffect>`, :ref:`Script<class_Script>`, :ref:`Shader<class_Shader>`, :ref:`Shape<class_Shape>`, :ref:`Shape2D<class_Shape2D>`, :ref:`ShortCut<class_ShortCut>`, :ref:`Skin<class_Skin>`, :ref:`Sky<class_Sky>`, :ref:`SpriteFrames<class_SpriteFrames>`, :ref:`StyleBox<class_StyleBox>`, :ref:`TextFile<class_TextFile>`, :ref:`Texture<class_Texture>`, :ref:`TextureLayered<class_TextureLayered>`, :ref:`Theme<class_Theme>`, :ref:`TileSet<class_TileSet>`, :ref:`Translation<class_Translation>`, :ref:`VideoStream<class_VideoStream>`, :ref:`VisualScriptNode<class_VisualScriptNode>`, :ref:`VisualShaderNode<class_VisualShaderNode>`, :ref:`World<class_World>`, :ref:`World2D<class_World2D>`, :ref:`X509Certificate<class_X509Certificate>`"
msgstr ""

#: ../classes/class_resource.rst:16
msgid "所有资源的基类。"
msgstr ""

#: ../classes/class_resource.rst:19
msgid "描述"
msgstr ""

#: ../classes/class_resource.rst:21
msgid "资源是所有GaaeExplorer特定资源类型的基类，主要作为数据容器。由于它们继承自\\ :ref:`Reference<class_Reference>`\\ ，资源被引用计数，并在不再使用时被释放。一旦从磁盘加载，它们也会被缓存，因此任何从给定路径加载资源的尝试都会返回相同的引用（这与\\ :ref:`Node<class_Node>`\\ 相反，\\ :ref:`Node<class_Node>`\\ 没有引用计数，可以根据需要从磁盘实例化多次）。资源可以从外部保存在磁盘上，也可以捆绑在另一个对象中，如\\ :ref:`Node<class_Node>`\\ 或另一个资源。"
msgstr ""

#: ../classes/class_resource.rst:23
msgid "\\ **注意：** 在C#中，资源不再被使用后不会立即被释放。相反，垃圾回收将定期运行，并释放不再使用的资源。这意味着未使用的资源在被删除之前会停留一段时间。"
msgstr ""

#: ../classes/class_resource.rst:26
msgid "教程"
msgstr ""

#: ../classes/class_resource.rst:28
msgid ":doc:`Resources <../tutorials/scripting/resources>`"
msgstr ""

#: ../classes/class_resource.rst:30
msgid ":doc:`When and how to avoid using nodes for everything <../tutorials/best_practices/node_alternatives>`"
msgstr ""

#: ../classes/class_resource.rst:33
msgid "属性"
msgstr ""

#: ../classes/class_resource.rst:36
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../classes/class_resource.rst:36
msgid ":ref:`resource_local_to_scene<class_Resource_property_resource_local_to_scene>`"
msgstr ""

#: ../classes/class_resource.rst:36
#: ../classes/class_resource.rst:81
msgid "``false``"
msgstr ""

#: ../classes/class_resource.rst:38
#: ../classes/class_resource.rst:40
msgid ":ref:`String<class_String>`"
msgstr ""

#: ../classes/class_resource.rst:38
msgid ":ref:`resource_name<class_Resource_property_resource_name>`"
msgstr ""

#: ../classes/class_resource.rst:38
#: ../classes/class_resource.rst:40
#: ../classes/class_resource.rst:97
#: ../classes/class_resource.rst:113
msgid "``\"\"``"
msgstr ""

#: ../classes/class_resource.rst:40
msgid ":ref:`resource_path<class_Resource_property_resource_path>`"
msgstr ""

#: ../classes/class_resource.rst:44
msgid "方法"
msgstr ""

#: ../classes/class_resource.rst:47
#: ../classes/class_resource.rst:51
#: ../classes/class_resource.rst:57
#: ../classes/class_resource.rst:59
msgid "void"
msgstr ""

#: ../classes/class_resource.rst:47
msgid ":ref:`_setup_local_to_scene<class_Resource_method__setup_local_to_scene>` **(** **)** |virtual|"
msgstr ""

#: ../classes/class_resource.rst:49
msgid ":ref:`Resource<class_Resource>`"
msgstr ""

#: ../classes/class_resource.rst:49
msgid ":ref:`duplicate<class_Resource_method_duplicate>` **(** :ref:`bool<class_bool>` subresources=false **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:51
msgid ":ref:`emit_changed<class_Resource_method_emit_changed>` **(** **)**"
msgstr ""

#: ../classes/class_resource.rst:53
msgid ":ref:`Node<class_Node>`"
msgstr ""

#: ../classes/class_resource.rst:53
msgid ":ref:`get_local_scene<class_Resource_method_get_local_scene>` **(** **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:55
msgid ":ref:`RID<class_RID>`"
msgstr ""

#: ../classes/class_resource.rst:55
msgid ":ref:`get_rid<class_Resource_method_get_rid>` **(** **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:57
msgid ":ref:`setup_local_to_scene<class_Resource_method_setup_local_to_scene>` **(** **)**"
msgstr ""

#: ../classes/class_resource.rst:59
msgid ":ref:`take_over_path<class_Resource_method_take_over_path>` **(** :ref:`String<class_String>` path **)**"
msgstr ""

#: ../classes/class_resource.rst:63
msgid "信号"
msgstr ""

#: ../classes/class_resource.rst:67
msgid "**changed** **(** **)**"
msgstr ""

#: ../classes/class_resource.rst:69
msgid "每当资源发生变化时就会发射。"
msgstr ""

#: ../classes/class_resource.rst:71
msgid "\\ **注意：**\\ 对于自定义资源，这个信号不会自动发射，这意味着你需要自己创建一个设置器setter并发射信号。"
msgstr ""

#: ../classes/class_resource.rst:74
msgid "属性说明"
msgstr ""

#: ../classes/class_resource.rst:78
msgid ":ref:`bool<class_bool>` **resource_local_to_scene**"
msgstr ""

#: ../classes/class_resource.rst:81
#: ../classes/class_resource.rst:97
#: ../classes/class_resource.rst:113
msgid "*Default*"
msgstr ""

#: ../classes/class_resource.rst:83
#: ../classes/class_resource.rst:99
#: ../classes/class_resource.rst:115
msgid "*Setter*"
msgstr ""

#: ../classes/class_resource.rst:83
msgid "set_local_to_scene(value)"
msgstr ""

#: ../classes/class_resource.rst:85
#: ../classes/class_resource.rst:101
#: ../classes/class_resource.rst:117
msgid "*Getter*"
msgstr ""

#: ../classes/class_resource.rst:85
msgid "is_local_to_scene()"
msgstr ""

#: ../classes/class_resource.rst:88
msgid "如果 ``true``\\ ，则资源在其本地场景的每个实例中都将是唯一的。因此，它可以在场景实例中进行修改，而不会影响同一场景的其他实例。"
msgstr ""

#: ../classes/class_resource.rst:94
msgid ":ref:`String<class_String>` **resource_name**"
msgstr ""

#: ../classes/class_resource.rst:99
msgid "set_name(value)"
msgstr ""

#: ../classes/class_resource.rst:101
msgid "get_name()"
msgstr ""

#: ../classes/class_resource.rst:104
msgid "资源名称。这是一个可选的标识符。如果 :ref:`resource_name<class_Resource_property_resource_name>` 资源名不是空的，则将显示其值，以表示编辑器检查器中的当前资源。对于内置脚本，\\ :ref:`resource_name<class_Resource_property_resource_name>`\\ 将作为脚本编辑器中的选项卡名称显示。"
msgstr ""

#: ../classes/class_resource.rst:110
msgid ":ref:`String<class_String>` **resource_path**"
msgstr ""

#: ../classes/class_resource.rst:115
msgid "set_path(value)"
msgstr ""

#: ../classes/class_resource.rst:117
msgid "get_path()"
msgstr ""

#: ../classes/class_resource.rst:120
msgid "资源的路径。如果它有自己的文件，它将返回其文件路径。如果它是与场景绑定的，它将返回场景的路径和资源的索引。"
msgstr ""

#: ../classes/class_resource.rst:123
msgid "方法说明"
msgstr ""

#: ../classes/class_resource.rst:127
msgid "void **_setup_local_to_scene** **(** **)** |virtual|"
msgstr ""

#: ../classes/class_resource.rst:129
msgid "可以重写的虚函数，用于自定义 :ref:`setup_local_to_scene<class_Resource_method_setup_local_to_scene>` 的行为值。"
msgstr ""

#: ../classes/class_resource.rst:135
msgid ":ref:`Resource<class_Resource>` **duplicate** **(** :ref:`bool<class_bool>` subresources=false **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:137
msgid "复制资源，返回一个复制了导出成员属性的新资源。\\ **注意：**\\ 为了复制资源，构造函数被调用，没有参数。当构造函数没有默认值时，这个方法会出错。"
msgstr ""

#: ../classes/class_resource.rst:139
msgid "默认情况下，为了提高效率，子资源在资源副本之间被共享。这可以通过向\\ ``subresources``\\ 参数传递\\ ``true``\\ 来改变，它将复制子资源。"
msgstr ""

#: ../classes/class_resource.rst:141
msgid "\\ **注意：** 如果\\ ``subresources``\\ 是\\ ``true``\\ ，这个方法将只执行一个浅层拷贝。子资源中的嵌套资源不会被复制，仍然会被共享。"
msgstr ""

#: ../classes/class_resource.rst:143
msgid "\\ **注意：**\\ 当复制一个资源时，只有导出\\ ``export``\\ 的属性被复制。其他属性将被设置为新资源中的默认值。"
msgstr ""

#: ../classes/class_resource.rst:149
msgid "void **emit_changed** **(** **)**"
msgstr ""

#: ../classes/class_resource.rst:151
msgid "发出\\ :ref:`changed<class_Resource_signal_changed>`\\ 更改信号。"
msgstr ""

#: ../classes/class_resource.rst:153
msgid "如果依赖该资源的外部对象应该被更新，那么每当该资源的状态发生变化（如属性的修改）时，必须手动调用该方法。"
msgstr ""

#: ../classes/class_resource.rst:155
msgid "该方法等同于。"
msgstr ""

#: ../classes/class_resource.rst:161
msgid "\\ **注意：** 这个方法对于内置资源来说是自动调用的。"
msgstr ""

#: ../classes/class_resource.rst:167
msgid ":ref:`Node<class_Node>` **get_local_scene** **(** **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:169
msgid "如果\\ :ref:`resource_local_to_scene<class_Resource_property_resource_local_to_scene>`\\ 被启用，并且该资源是从一个\\ :ref:`PackedScene<class_PackedScene>`\\ 实例中加载的，则返回该资源的唯一副本正在使用的本地场景。否则，返回\\ ``null``\\ 。"
msgstr ""

#: ../classes/class_resource.rst:175
msgid ":ref:`RID<class_RID>` **get_rid** **(** **)** |const|"
msgstr ""

#: ../classes/class_resource.rst:177
msgid "返回资源的RID（或者一个空的RID）。许多资源（如\\ :ref:`Texture<class_Texture>`\\ 、\\ :ref:`Mesh<class_Mesh>`\\ 等）是存储在服务器server中的资源的高级抽象，所以这个函数将返回原始的RID。"
msgstr ""

#: ../classes/class_resource.rst:183
msgid "void **setup_local_to_scene** **(** **)**"
msgstr ""

#: ../classes/class_resource.rst:185
msgid "当启用了\\ :ref:`resource_local_to_scene<class_Resource_property_resource_local_to_scene>`\\ 的资源从\\ :ref:`PackedScene<class_PackedScene>`\\ 实例化中加载时，这个方法会被调用。它的行为可以通过覆盖脚本中的\\ :ref:`_setup_local_to_scene<class_Resource_method__setup_local_to_scene>`\\ 进行定制。"
msgstr ""

#: ../classes/class_resource.rst:187
msgid "对于大多数资源，该方法不执行任何基本逻辑。\\ :ref:`ViewportTexture<class_ViewportTexture>`\\ 执行自定义逻辑以正确设置本地视窗中的代理纹理和标志。"
msgstr ""

#: ../classes/class_resource.rst:193
msgid "void **take_over_path** **(** :ref:`String<class_String>` path **)**"
msgstr ""

#: ../classes/class_resource.rst:195
msgid "设置资源的路径，可能会覆盖这个路径的现有缓存条目。这与设置\\ :ref:`resource_path<class_Resource_property_resource_path>`\\ 不同，因为后者会在其他资源已经被缓存在给定的路径上时出错。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
