# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_dtlsserver.rst:10
msgid "DTLSServer"
msgstr ""

#: ../classes/class_dtlsserver.rst:12
msgid "**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_dtlsserver.rst:14
msgid "实现DTLS服务器的辅助类。"
msgstr ""

#: ../classes/class_dtlsserver.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_dtlsserver.rst:19
msgid "这个类用来存储DTLS服务器的状态。在\\ :ref:`setup<class_DTLSServer_method_setup>`\\ 时，它将连接的\\ :ref:`PacketPeerUDP<class_PacketPeerUDP>`\\ 转换为\\ :ref:`PacketPeerDTLS<class_PacketPeerDTLS>`\\ ，通过\\ :ref:`take_connection<class_DTLSServer_method_take_connection>`\\ 接受它们作为DTLS客户端。底下，这个类是用来存储服务器的DTLS状态和cookie的。为什么需要状态和cookie的原因不在本文档的范围内。"
msgstr ""

#: ../classes/class_dtlsserver.rst:21
msgid "下面以一个小例子来说明如何使用它。"
msgstr ""

#: ../classes/class_dtlsserver.rst:77
msgid "方法"
msgstr ""

#: ../classes/class_dtlsserver.rst:80
msgid ":ref:`Error<enum_@GlobalScope_Error>`"
msgstr ""

#: ../classes/class_dtlsserver.rst:80
msgid ":ref:`setup<class_DTLSServer_method_setup>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate, :ref:`X509Certificate<class_X509Certificate>` chain=null **)**"
msgstr ""

#: ../classes/class_dtlsserver.rst:82
msgid ":ref:`PacketPeerDTLS<class_PacketPeerDTLS>`"
msgstr ""

#: ../classes/class_dtlsserver.rst:82
msgid ":ref:`take_connection<class_DTLSServer_method_take_connection>` **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` udp_peer **)**"
msgstr ""

#: ../classes/class_dtlsserver.rst:86
msgid "方法说明"
msgstr ""

#: ../classes/class_dtlsserver.rst:90
msgid ":ref:`Error<enum_@GlobalScope_Error>` **setup** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate, :ref:`X509Certificate<class_X509Certificate>` chain=null **)**"
msgstr ""

#: ../classes/class_dtlsserver.rst:92
msgid "设置 DTLS 服务器使用给定的 ``private_key`` 并向客户端提供给定的 ``certificate`` 。您可以传递可选的 ``chain`` 参数，以便在提供证书的同时提供额外的 CA 证书息。"
msgstr ""

#: ../classes/class_dtlsserver.rst:98
msgid ":ref:`PacketPeerDTLS<class_PacketPeerDTLS>` **take_connection** **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` udp_peer **)**"
msgstr ""

#: ../classes/class_dtlsserver.rst:100
msgid "尝试与给定的\\ ``udp_peer``\\ 启动DTLS握手，该peer必须已经连接，参阅\\ :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`\\ 。"
msgstr ""

#: ../classes/class_dtlsserver.rst:102
msgid "\\ **注意:** 你必须检查返回PacketPeerUDP的状态是否为\\ :ref:`PacketPeerDTLS.STATUS_HANDSHAKING<class_PacketPeerDTLS_constant_STATUS_HANDSHAKING>`\\ ，因为正常情况下，50%的新连接会因为cookie交换而无效。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
