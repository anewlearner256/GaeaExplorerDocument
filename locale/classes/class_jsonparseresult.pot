# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_jsonparseresult.rst:10
msgid "JSONParseResult"
msgstr ""

#: ../classes/class_jsonparseresult.rst:12
msgid "**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:14
msgid "解码 JSON 的数据类包装器。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_jsonparseresult.rst:19
msgid "由\\ :ref:`JSON.parse<class_JSON_method_parse>`\\ 返回，\\ ``JSONParseResult``\\ 包含解码的JSON或错误信息（如果JSON源没有被成功解析）。你可以用\\ ``if json_result.error == OK``\\ 检查JSON源是否被成功解析。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:22
msgid "属性"
msgstr ""

#: ../classes/class_jsonparseresult.rst:25
msgid ":ref:`Error<enum_@GlobalScope_Error>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:25
msgid ":ref:`error<class_JSONParseResult_property_error>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:27
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:27
msgid ":ref:`error_line<class_JSONParseResult_property_error_line>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:27
#: ../classes/class_jsonparseresult.rst:56
msgid "``-1``"
msgstr ""

#: ../classes/class_jsonparseresult.rst:29
msgid ":ref:`String<class_String>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:29
msgid ":ref:`error_string<class_JSONParseResult_property_error_string>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:29
#: ../classes/class_jsonparseresult.rst:72
msgid "``\"\"``"
msgstr ""

#: ../classes/class_jsonparseresult.rst:31
msgid ":ref:`Variant<class_Variant>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:31
msgid ":ref:`result<class_JSONParseResult_property_result>`"
msgstr ""

#: ../classes/class_jsonparseresult.rst:35
msgid "属性说明"
msgstr ""

#: ../classes/class_jsonparseresult.rst:39
msgid ":ref:`Error<enum_@GlobalScope_Error>` **error**"
msgstr ""

#: ../classes/class_jsonparseresult.rst:42
#: ../classes/class_jsonparseresult.rst:58
#: ../classes/class_jsonparseresult.rst:74
#: ../classes/class_jsonparseresult.rst:88
msgid "*Setter*"
msgstr ""

#: ../classes/class_jsonparseresult.rst:42
msgid "set_error(value)"
msgstr ""

#: ../classes/class_jsonparseresult.rst:44
#: ../classes/class_jsonparseresult.rst:60
#: ../classes/class_jsonparseresult.rst:76
#: ../classes/class_jsonparseresult.rst:90
msgid "*Getter*"
msgstr ""

#: ../classes/class_jsonparseresult.rst:44
msgid "get_error()"
msgstr ""

#: ../classes/class_jsonparseresult.rst:47
msgid "未成功解析 JSON 源时的错误类型。请参阅 :ref:`Error<enum_@GlobalScope_Error>` 常量。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:53
msgid ":ref:`int<class_int>` **error_line**"
msgstr ""

#: ../classes/class_jsonparseresult.rst:56
#: ../classes/class_jsonparseresult.rst:72
msgid "*Default*"
msgstr ""

#: ../classes/class_jsonparseresult.rst:58
msgid "set_error_line(value)"
msgstr ""

#: ../classes/class_jsonparseresult.rst:60
msgid "get_error_line()"
msgstr ""

#: ../classes/class_jsonparseresult.rst:63
msgid "如果JSON源没有被成功解析，返回发生错误的行号。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:69
msgid ":ref:`String<class_String>` **error_string**"
msgstr ""

#: ../classes/class_jsonparseresult.rst:74
msgid "set_error_string(value)"
msgstr ""

#: ../classes/class_jsonparseresult.rst:76
msgid "get_error_string()"
msgstr ""

#: ../classes/class_jsonparseresult.rst:79
msgid "未成功解析 JSON 源时的错误消息。请参阅 :ref:`Error<enum_@GlobalScope_Error>` 常量。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:85
msgid ":ref:`Variant<class_Variant>` **result**"
msgstr ""

#: ../classes/class_jsonparseresult.rst:88
msgid "set_result(value)"
msgstr ""

#: ../classes/class_jsonparseresult.rst:90
msgid "get_result()"
msgstr ""

#: ../classes/class_jsonparseresult.rst:93
msgid "包含解析过JSON的变量\\ :ref:`Variant<class_Variant>`\\ 。使用\\ :ref:`@GDScript.typeof<class_@GDScript_method_typeof>`\\ 或\\ ``is``\\ 关键字来检查它是否是你期望的。例如，如果JSON源以花括号开始（\\ ``{}``\\ ），将返回一个字典\\ :ref:`Dictionary<class_Dictionary>`\\ 。如果JSON源以方括号开始（\\ ``[]``\\ ），将返回一个数组\\ :ref:`Array<class_Array>`\\ 。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:95
msgid "\\ **注意:** JSON规范没有定义整数或浮点数类型，而只有一个数字\\ *number*\\ 类型。因此，解析JSON文本将把所有的数字值转换为浮点\\ :ref:`float<class_float>`\\ 类型。"
msgstr ""

#: ../classes/class_jsonparseresult.rst:97
msgid "\\ **注意：**\\ JSON对象不像GaaeExplorer字典那样保留键的顺序，因此，如果一个字典是由JSON构建的，你不应该依赖键是按一定顺序的。与此相反，JSON数组保留其元素的顺序。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
