# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_texture.rst:10
msgid "Texture"
msgstr ""

#: ../classes/class_texture.rst:12
msgid "**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_texture.rst:14
msgid "**Inherited By:** :ref:`AnimatedTexture<class_AnimatedTexture>`, :ref:`AtlasTexture<class_AtlasTexture>`, :ref:`CameraTexture<class_CameraTexture>`, :ref:`CurveTexture<class_CurveTexture>`, :ref:`ExternalTexture<class_ExternalTexture>`, :ref:`GradientTexture<class_GradientTexture>`, :ref:`ImageTexture<class_ImageTexture>`, :ref:`LargeTexture<class_LargeTexture>`, :ref:`MeshTexture<class_MeshTexture>`, :ref:`NoiseTexture<class_NoiseTexture>`, :ref:`ProxyTexture<class_ProxyTexture>`, :ref:`StreamTexture<class_StreamTexture>`, :ref:`ViewportTexture<class_ViewportTexture>`"
msgstr ""

#: ../classes/class_texture.rst:16
msgid "用于 2D 和 3D 的纹理。"
msgstr ""

#: ../classes/class_texture.rst:19
msgid "描述"
msgstr ""

#: ../classes/class_texture.rst:21
msgid "纹理的原理是在视频硬件中注册图像，然后就可以在 3D 模型、2D 精灵 :ref:`Sprite<class_Sprite>`\\ 、GUI 控件 :ref:`Control<class_Control>` 中使用。"
msgstr ""

#: ../classes/class_texture.rst:23
msgid "纹理通常是通过从文件中加载来创建的。请参阅 :ref:`@GDScript.load<class_@GDScript_method_load>`\\ 。"
msgstr ""

#: ../classes/class_texture.rst:25
msgid "\\ ``Texture`` 是一些其他资源的基类，无法直接使用。"
msgstr ""

#: ../classes/class_texture.rst:27
msgid "\\ **注意：**\\ 由于图形硬件的限制，最大的纹理尺寸是 16384×16384 像素。较大的纹理可能无法导入。"
msgstr ""

#: ../classes/class_texture.rst:30
msgid "属性"
msgstr ""

#: ../classes/class_texture.rst:33
#: ../classes/class_texture.rst:48
#: ../classes/class_texture.rst:52
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../classes/class_texture.rst:33
msgid ":ref:`flags<class_Texture_property_flags>`"
msgstr ""

#: ../classes/class_texture.rst:33
#: ../classes/class_texture.rst:110
msgid "``4``"
msgstr ""

#: ../classes/class_texture.rst:37
msgid "方法"
msgstr ""

#: ../classes/class_texture.rst:40
#: ../classes/class_texture.rst:42
#: ../classes/class_texture.rst:44
msgid "void"
msgstr ""

#: ../classes/class_texture.rst:40
msgid ":ref:`draw<class_Texture_method_draw>` **(** :ref:`RID<class_RID>` canvas_item, :ref:`Vector2<class_Vector2>` position, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:42
msgid ":ref:`draw_rect<class_Texture_method_draw_rect>` **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect, :ref:`bool<class_bool>` tile, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:44
msgid ":ref:`draw_rect_region<class_Texture_method_draw_rect_region>` **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null, :ref:`bool<class_bool>` clip_uv=true **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:46
msgid ":ref:`Image<class_Image>`"
msgstr ""

#: ../classes/class_texture.rst:46
msgid ":ref:`get_data<class_Texture_method_get_data>` **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:48
msgid ":ref:`get_height<class_Texture_method_get_height>` **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:50
msgid ":ref:`Vector2<class_Vector2>`"
msgstr ""

#: ../classes/class_texture.rst:50
msgid ":ref:`get_size<class_Texture_method_get_size>` **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:52
msgid ":ref:`get_width<class_Texture_method_get_width>` **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:54
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../classes/class_texture.rst:54
msgid ":ref:`has_alpha<class_Texture_method_has_alpha>` **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:58
msgid "枚举"
msgstr ""

#: ../classes/class_texture.rst:78
msgid "enum **Flags**:"
msgstr ""

#: ../classes/class_texture.rst:80
msgid "**FLAGS_DEFAULT** = **7** --- 默认的标志。\\ :ref:`FLAG_MIPMAPS<class_Texture_constant_FLAG_MIPMAPS>`\\ 、\\ :ref:`FLAG_REPEAT<class_Texture_constant_FLAG_REPEAT>` 和 :ref:`FLAG_FILTER<class_Texture_constant_FLAG_FILTER>` 均被启用。"
msgstr ""

#: ../classes/class_texture.rst:82
msgid "**FLAG_MIPMAPS** = **1** --- 生成多级渐远纹理，它是同一纹理的较小版本，在放大时使用，保持长宽比。"
msgstr ""

#: ../classes/class_texture.rst:84
msgid "**FLAG_REPEAT** = **2** --- 重复纹理（而不是限制到边）。"
msgstr ""

#: ../classes/class_texture.rst:86
msgid "\\ **注意：**\\ 使用 :ref:`AtlasTexture<class_AtlasTexture>` 时忽略，因为它们不支持重复。"
msgstr ""

#: ../classes/class_texture.rst:88
msgid "**FLAG_FILTER** = **4** --- 使用放大过滤器，以实现纹理的平滑放大。"
msgstr ""

#: ../classes/class_texture.rst:90
msgid "**FLAG_ANISOTROPIC_FILTER** = **8** --- 使用各向异性的多级渐远纹理过滤。生成具有不同长宽比的同一纹理的较小版本。"
msgstr ""

#: ../classes/class_texture.rst:92
msgid "当从斜角观看时，这会产生更好看的纹理。"
msgstr ""

#: ../classes/class_texture.rst:94
msgid "**FLAG_CONVERT_TO_LINEAR** = **16** --- 将纹理转换为 sRGB 颜色空间。"
msgstr ""

#: ../classes/class_texture.rst:96
msgid "**FLAG_MIRRORED_REPEAT** = **32** --- 重复纹理的交替部分，并对其进行镜像。"
msgstr ""

#: ../classes/class_texture.rst:98
msgid "\\ **注意：**\\ 在使用 :ref:`AtlasTexture<class_AtlasTexture>` 时被忽略，因为它们不支持重复。"
msgstr ""

#: ../classes/class_texture.rst:100
msgid "**FLAG_VIDEO_SURFACE** = **2048** --- 纹理是视频表面。"
msgstr ""

#: ../classes/class_texture.rst:103
msgid "属性说明"
msgstr ""

#: ../classes/class_texture.rst:107
msgid ":ref:`int<class_int>` **flags**"
msgstr ""

#: ../classes/class_texture.rst:110
msgid "*Default*"
msgstr ""

#: ../classes/class_texture.rst:112
msgid "*Setter*"
msgstr ""

#: ../classes/class_texture.rst:112
msgid "set_flags(value)"
msgstr ""

#: ../classes/class_texture.rst:114
msgid "*Getter*"
msgstr ""

#: ../classes/class_texture.rst:114
msgid "get_flags()"
msgstr ""

#: ../classes/class_texture.rst:117
msgid "纹理的 :ref:`Flags<enum_Texture_Flags>`\\ 。\\ :ref:`Flags<enum_Texture_Flags>` 用于设置 ``Texture`` 的各种属性。"
msgstr ""

#: ../classes/class_texture.rst:120
msgid "方法说明"
msgstr ""

#: ../classes/class_texture.rst:124
msgid "void **draw** **(** :ref:`RID<class_RID>` canvas_item, :ref:`Vector2<class_Vector2>` position, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:126
msgid "在指定的位置\\ ``position``\\ 使用\\ :ref:`VisualServer<class_VisualServer>`\\ API的\\ :ref:`CanvasItem<class_CanvasItem>`\\ 来绘制纹理。相当于\\ :ref:`VisualServer.canvas_item_add_texture_rect<class_VisualServer_method_canvas_item_add_texture_rect>`\\ ，在位置\\ ``position``\\ 有一个矩形，尺寸为这个\\ ``Texture``\\ 。"
msgstr ""

#: ../classes/class_texture.rst:132
msgid "void **draw_rect** **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect, :ref:`bool<class_bool>` tile, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:134
msgid "使用 :ref:`VisualServer<class_VisualServer>` API 的 :ref:`CanvasItem<class_CanvasItem>` 来绘制纹理。相当于方法 :ref:`VisualServer.canvas_item_add_texture_rect<class_VisualServer_method_canvas_item_add_texture_rect>`\\ 。"
msgstr ""

#: ../classes/class_texture.rst:140
msgid "void **draw_rect_region** **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Color<class_Color>` modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_Texture>` normal_map=null, :ref:`bool<class_bool>` clip_uv=true **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:142
msgid "使用 :ref:`VisualServer<class_VisualServer>` API 的 :ref:`CanvasItem<class_CanvasItem>` 来绘制纹理的一个部分。相当于方法 :ref:`VisualServer.canvas_item_add_texture_rect_region<class_VisualServer_method_canvas_item_add_texture_rect_region>`\\ 。"
msgstr ""

#: ../classes/class_texture.rst:148
msgid ":ref:`Image<class_Image>` **get_data** **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:150
msgid "返回一个 :ref:`Image<class_Image>`\\ ，它是此 ``Texture`` 中数据的副本。 :ref:`Image<class_Image>` 图像可以直接访问和操作。"
msgstr ""

#: ../classes/class_texture.rst:156
msgid ":ref:`int<class_int>` **get_height** **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:158
msgid "返回纹理高度。"
msgstr ""

#: ../classes/class_texture.rst:164
msgid ":ref:`Vector2<class_Vector2>` **get_size** **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:166
msgid "返回纹理尺寸。"
msgstr ""

#: ../classes/class_texture.rst:172
msgid ":ref:`int<class_int>` **get_width** **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:174
msgid "返回纹理宽度。"
msgstr ""

#: ../classes/class_texture.rst:180
msgid ":ref:`bool<class_bool>` **has_alpha** **(** **)** |const|"
msgstr ""

#: ../classes/class_texture.rst:182
msgid "如果这个 ``Texture`` 有 Alpha 通道，则返回 ``true``\\ 。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
