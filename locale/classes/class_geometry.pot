# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_geometry.rst:10
msgid "Geometry"
msgstr ""

#: ../classes/class_geometry.rst:12
msgid "**Inherits:** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_geometry.rst:14
msgid "用于计算通用几何操作的辅助节点。"
msgstr ""

#: ../classes/class_geometry.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_geometry.rst:19
msgid "Geometry 为用户提供了一组辅助函数，用于创建几何形状、计算形状之间的交点以及处理各种其他几何操作。"
msgstr ""

#: ../classes/class_geometry.rst:22
msgid "方法"
msgstr ""

#: ../classes/class_geometry.rst:25
#: ../classes/class_geometry.rst:27
#: ../classes/class_geometry.rst:29
#: ../classes/class_geometry.rst:33
#: ../classes/class_geometry.rst:35
#: ../classes/class_geometry.rst:39
#: ../classes/class_geometry.rst:55
#: ../classes/class_geometry.rst:57
#: ../classes/class_geometry.rst:69
#: ../classes/class_geometry.rst:71
#: ../classes/class_geometry.rst:73
msgid ":ref:`Array<class_Array>`"
msgstr ""

#: ../classes/class_geometry.rst:25
msgid ":ref:`build_box_planes<class_Geometry_method_build_box_planes>` **(** :ref:`Vector3<class_Vector3>` extents **)**"
msgstr ""

#: ../classes/class_geometry.rst:27
msgid ":ref:`build_capsule_planes<class_Geometry_method_build_capsule_planes>` **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, :ref:`int<class_int>` lats, Vector3.Axis axis=2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:29
msgid ":ref:`build_cylinder_planes<class_Geometry_method_build_cylinder_planes>` **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, Vector3.Axis axis=2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:31
#: ../classes/class_geometry.rst:49
#: ../classes/class_geometry.rst:81
#: ../classes/class_geometry.rst:83
#: ../classes/class_geometry.rst:87
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>`"
msgstr ""

#: ../classes/class_geometry.rst:31
msgid ":ref:`clip_polygon<class_Geometry_method_clip_polygon>` **(** :ref:`PoolVector3Array<class_PoolVector3Array>` points, :ref:`Plane<class_Plane>` plane **)**"
msgstr ""

#: ../classes/class_geometry.rst:33
msgid ":ref:`clip_polygons_2d<class_Geometry_method_clip_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:35
msgid ":ref:`clip_polyline_with_polygon_2d<class_Geometry_method_clip_polyline_with_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:37
#: ../classes/class_geometry.rst:51
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>`"
msgstr ""

#: ../classes/class_geometry.rst:37
msgid ":ref:`convex_hull_2d<class_Geometry_method_convex_hull_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**"
msgstr ""

#: ../classes/class_geometry.rst:39
msgid ":ref:`exclude_polygons_2d<class_Geometry_method_exclude_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:41
#: ../classes/class_geometry.rst:45
msgid ":ref:`Vector3<class_Vector3>`"
msgstr ""

#: ../classes/class_geometry.rst:41
msgid ":ref:`get_closest_point_to_segment<class_Geometry_method_get_closest_point_to_segment>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:43
#: ../classes/class_geometry.rst:47
msgid ":ref:`Vector2<class_Vector2>`"
msgstr ""

#: ../classes/class_geometry.rst:43
msgid ":ref:`get_closest_point_to_segment_2d<class_Geometry_method_get_closest_point_to_segment_2d>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:45
msgid ":ref:`get_closest_point_to_segment_uncapped<class_Geometry_method_get_closest_point_to_segment_uncapped>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:47
msgid ":ref:`get_closest_point_to_segment_uncapped_2d<class_Geometry_method_get_closest_point_to_segment_uncapped_2d>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:49
msgid ":ref:`get_closest_points_between_segments<class_Geometry_method_get_closest_points_between_segments>` **(** :ref:`Vector3<class_Vector3>` p1, :ref:`Vector3<class_Vector3>` p2, :ref:`Vector3<class_Vector3>` q1, :ref:`Vector3<class_Vector3>` q2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:51
msgid ":ref:`get_closest_points_between_segments_2d<class_Geometry_method_get_closest_points_between_segments_2d>` **(** :ref:`Vector2<class_Vector2>` p1, :ref:`Vector2<class_Vector2>` q1, :ref:`Vector2<class_Vector2>` p2, :ref:`Vector2<class_Vector2>` q2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:53
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../classes/class_geometry.rst:53
msgid ":ref:`get_uv84_normal_bit<class_Geometry_method_get_uv84_normal_bit>` **(** :ref:`Vector3<class_Vector3>` normal **)**"
msgstr ""

#: ../classes/class_geometry.rst:55
msgid ":ref:`intersect_polygons_2d<class_Geometry_method_intersect_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:57
msgid ":ref:`intersect_polyline_with_polygon_2d<class_Geometry_method_intersect_polyline_with_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:59
#: ../classes/class_geometry.rst:61
#: ../classes/class_geometry.rst:63
#: ../classes/class_geometry.rst:75
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../classes/class_geometry.rst:59
msgid ":ref:`is_point_in_circle<class_Geometry_method_is_point_in_circle>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:61
msgid ":ref:`is_point_in_polygon<class_Geometry_method_is_point_in_polygon>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:63
msgid ":ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:65
#: ../classes/class_geometry.rst:77
#: ../classes/class_geometry.rst:85
#: ../classes/class_geometry.rst:89
msgid ":ref:`Variant<class_Variant>`"
msgstr ""

#: ../classes/class_geometry.rst:65
msgid ":ref:`line_intersects_line_2d<class_Geometry_method_line_intersects_line_2d>` **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` dir_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` dir_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:67
msgid ":ref:`Dictionary<class_Dictionary>`"
msgstr ""

#: ../classes/class_geometry.rst:67
msgid ":ref:`make_atlas<class_Geometry_method_make_atlas>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` sizes **)**"
msgstr ""

#: ../classes/class_geometry.rst:69
msgid ":ref:`merge_polygons_2d<class_Geometry_method_merge_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:71
msgid ":ref:`offset_polygon_2d<class_Geometry_method_offset_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0 **)**"
msgstr ""

#: ../classes/class_geometry.rst:73
msgid ":ref:`offset_polyline_2d<class_Geometry_method_offset_polyline_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0, :ref:`PolyEndType<enum_Geometry_PolyEndType>` end_type=3 **)**"
msgstr ""

#: ../classes/class_geometry.rst:75
msgid ":ref:`point_is_inside_triangle<class_Geometry_method_point_is_inside_triangle>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` a, :ref:`Vector2<class_Vector2>` b, :ref:`Vector2<class_Vector2>` c **)** |const|"
msgstr ""

#: ../classes/class_geometry.rst:77
msgid ":ref:`ray_intersects_triangle<class_Geometry_method_ray_intersects_triangle>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**"
msgstr ""

#: ../classes/class_geometry.rst:79
msgid ":ref:`float<class_float>`"
msgstr ""

#: ../classes/class_geometry.rst:79
msgid ":ref:`segment_intersects_circle<class_Geometry_method_segment_intersects_circle>` **(** :ref:`Vector2<class_Vector2>` segment_from, :ref:`Vector2<class_Vector2>` segment_to, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:81
msgid ":ref:`segment_intersects_convex<class_Geometry_method_segment_intersects_convex>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Array<class_Array>` planes **)**"
msgstr ""

#: ../classes/class_geometry.rst:83
msgid ":ref:`segment_intersects_cylinder<class_Geometry_method_segment_intersects_cylinder>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` height, :ref:`float<class_float>` radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:85
msgid ":ref:`segment_intersects_segment_2d<class_Geometry_method_segment_intersects_segment_2d>` **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` to_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` to_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:87
msgid ":ref:`segment_intersects_sphere<class_Geometry_method_segment_intersects_sphere>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` sphere_position, :ref:`float<class_float>` sphere_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:89
msgid ":ref:`segment_intersects_triangle<class_Geometry_method_segment_intersects_triangle>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**"
msgstr ""

#: ../classes/class_geometry.rst:91
#: ../classes/class_geometry.rst:93
msgid ":ref:`PoolIntArray<class_PoolIntArray>`"
msgstr ""

#: ../classes/class_geometry.rst:91
msgid ":ref:`triangulate_delaunay_2d<class_Geometry_method_triangulate_delaunay_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**"
msgstr ""

#: ../classes/class_geometry.rst:93
msgid ":ref:`triangulate_polygon<class_Geometry_method_triangulate_polygon>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:97
msgid "枚举"
msgstr ""

#: ../classes/class_geometry.rst:109
msgid "enum **PolyBooleanOperation**:"
msgstr ""

#: ../classes/class_geometry.rst:111
msgid "**OPERATION_UNION** = **0** --- 创建区域，其中主体或剪辑多边形（或两者）被填充。"
msgstr ""

#: ../classes/class_geometry.rst:113
msgid "**OPERATION_DIFFERENCE** = **1** --- 创建主体多边形被填充的区域，但剪辑多边形被填充的区域除外。"
msgstr ""

#: ../classes/class_geometry.rst:115
msgid "**OPERATION_INTERSECTION** = **2** --- 创建主体和剪辑多边形都被填充的区域。"
msgstr ""

#: ../classes/class_geometry.rst:117
msgid "**OPERATION_XOR** = **3** --- 创建主体或剪辑多边形被填充的区域，但不是两者都被填充的区域。"
msgstr ""

#: ../classes/class_geometry.rst:129
msgid "enum **PolyJoinType**:"
msgstr ""

#: ../classes/class_geometry.rst:131
msgid "**JOIN_SQUARE** = **0** --- 在\\ ``1 * delta``\\ 的所有凸边连接处均匀地应用平方。"
msgstr ""

#: ../classes/class_geometry.rst:133
msgid "**JOIN_ROUND** = **1** --- 虽然扁平化路径不可能完美地追踪一个弧线，但它们可以通过一系列弧弦来近似。"
msgstr ""

#: ../classes/class_geometry.rst:135
msgid "**JOIN_MITER** = **2** --- 对斜接有一个必要的限制，因为以非常尖锐的角度连接的边缘偏移会产生过长和过窄的 \"尖刺\"。对于任何给定的边缘连接，当斜接偏移会超过最大距离时，就采用 \"方形 \"连接。"
msgstr ""

#: ../classes/class_geometry.rst:151
msgid "enum **PolyEndType**:"
msgstr ""

#: ../classes/class_geometry.rst:153
msgid "**END_POLYGON** = **0** --- 端点使用\\ :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`\\ 值连接，路径被填充为多边形。"
msgstr ""

#: ../classes/class_geometry.rst:155
msgid "**END_JOINED** = **1** --- 端点使用\\ :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`\\ 值连接，路径被填充为多边形线。"
msgstr ""

#: ../classes/class_geometry.rst:157
msgid "**END_BUTT** = **2** --- 端点是方形的，没有延伸。"
msgstr ""

#: ../classes/class_geometry.rst:159
msgid "**END_SQUARE** = **3** --- 端点被平方化并扩展了\\ ``delta``\\ 单位。"
msgstr ""

#: ../classes/class_geometry.rst:161
msgid "**END_ROUND** = **4** --- 端点被四舍五入，并以\\ ``delta``\\ 为单位进行扩展。"
msgstr ""

#: ../classes/class_geometry.rst:164
msgid "方法说明"
msgstr ""

#: ../classes/class_geometry.rst:168
msgid ":ref:`Array<class_Array>` **build_box_planes** **(** :ref:`Vector3<class_Vector3>` extents **)**"
msgstr ""

#: ../classes/class_geometry.rst:170
msgid "返回一个包含6个\\ :ref:`Plane<class_Plane>`\\ 的数组，描述以原点为中心的盒子的边。盒子的大小由\\ ``extents``\\ 定义，它代表盒子的一个（正）角（即其实际大小的一半）。"
msgstr ""

#: ../classes/class_geometry.rst:176
msgid ":ref:`Array<class_Array>` **build_capsule_planes** **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, :ref:`int<class_int>` lats, Vector3.Axis axis=2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:178
msgid "返回一个\\ :ref:`Plane<class_Plane>`\\ 数组，该数组紧密地绑定着一个以原点为中心，半径为\\ ``radius``\\ ，高度为\\ ``height``\\ 的面状胶囊。参数\\ ``side``\\ 定义了将为胶囊的侧面部分生成多少个平面，而\\ ``lats``\\ 则给出了胶囊底部和顶部的纬向阶梯数。参数\\ ``axis``\\ 描述了胶囊的方向轴（0为X，1为Y，2为Z）。"
msgstr ""

#: ../classes/class_geometry.rst:184
msgid ":ref:`Array<class_Array>` **build_cylinder_planes** **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, Vector3.Axis axis=2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:186
msgid "返回一个\\ :ref:`Plane<class_Plane>`\\ 数组，该数组紧密绑定以原点为中心的切面圆柱体，其半径为\\ ``radius``\\ ，高度为\\ ``height``\\ 。参数\\ ``side``\\ 定义了将为圆柱体的圆形部分生成多少个平面。参数\\ ``axis``\\ 描述了圆柱体的方向轴（0代表X，1代表Y，2代表Z）。"
msgstr ""

#: ../classes/class_geometry.rst:192
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **clip_polygon** **(** :ref:`PoolVector3Array<class_PoolVector3Array>` points, :ref:`Plane<class_Plane>` plane **)**"
msgstr ""

#: ../classes/class_geometry.rst:194
msgid "将\\ ``point``\\ 中的点所定义的多边形与\\ ``plane``\\ 进行对比，并返回被剪切的多边形的点。"
msgstr ""

#: ../classes/class_geometry.rst:200
msgid ":ref:`Array<class_Array>` **clip_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:202
msgid "将\\ ``polygon_a``\\ 与\\ ``polygon_b``\\ 进行对比，并返回一个被剪切的多边形数组。这在多边形之间执行\\ :ref:`OPERATION_DIFFERENCE<class_Geometry_constant_OPERATION_DIFFERENCE>`\\ 。如果\\ ``polygon_b``\\ 与\\ ``polygon_a``\\ 完全重合，则返回一个空数组。"
msgstr ""

#: ../classes/class_geometry.rst:204
msgid "如果\\ ``polygon_b``\\ 被\\ ``polygon_a``\\ 包围，返回一个外部多边形（边界）和内部多边形（孔），可以通过调用\\ :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`\\ 来区分。"
msgstr ""

#: ../classes/class_geometry.rst:210
msgid ":ref:`Array<class_Array>` **clip_polyline_with_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:212
msgid "将\\ ``polyline``\\ 与\\ ``polygon``\\ 相对应，并返回一个折线数组。在折线和多边形之间执行\\ :ref:`OPERATION_DIFFERENCE<class_Geometry_constant_OPERATION_DIFFERENCE>`\\ 。这个操作可以被认为是用一个封闭的形状切割一条线。"
msgstr ""

#: ../classes/class_geometry.rst:218
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>` **convex_hull_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**"
msgstr ""

#: ../classes/class_geometry.rst:220
msgid "给出一个\\ :ref:`Vector2<class_Vector2>`\\ s的数组，以逆时针的顺序返回凸面的点的列表。最后一个点与第一个点相同。"
msgstr ""

#: ../classes/class_geometry.rst:226
msgid ":ref:`Array<class_Array>` **exclude_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:228
msgid "相互排除由 ``polygon_a`` 和 ``polygon_b``\\ （见 :ref:`intersect_polygons_2d<class_Geometry_method_intersect_polygons_2d>`\\ ）的交叉点定义的公共区域，并返回一个排除的多边形数组。这在多边形之间执行了 :ref:`OPERATION_XOR<class_Geometry_constant_OPERATION_XOR>`\\ 。换句话说，返回多边形之间除公共区域外的所有区域。"
msgstr ""

#: ../classes/class_geometry.rst:230
#: ../classes/class_geometry.rst:356
msgid "该操作可能会产生一个外部多边形（边界）和内部多边形（孔），可以通过调用 :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>` 来区分。"
msgstr ""

#: ../classes/class_geometry.rst:236
msgid ":ref:`Vector3<class_Vector3>` **get_closest_point_to_segment** **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:238
msgid "返回3D部份（\\ ``s1``, ``s2``\\ ）上离\\ ``point``\\ 最近的3D点。返回的点将总是在指定的部份内。"
msgstr ""

#: ../classes/class_geometry.rst:244
msgid ":ref:`Vector2<class_Vector2>` **get_closest_point_to_segment_2d** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:246
msgid "返回2D段（\\ ``s1``, ``s2``\\ ）上最接近\\ ``point``\\ 的2D点。返回的点将总是在指定的线段内。"
msgstr ""

#: ../classes/class_geometry.rst:252
msgid ":ref:`Vector3<class_Vector3>` **get_closest_point_to_segment_uncapped** **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:254
msgid "返回由（\\ ``s1``, ``s2``\\ ）定义的三维直线上最接近 ``point``\\ 的三维点。返回的点可以在线段内（\\ ``s1``, ``s2``\\ ），也可以在线段外，即在线段延伸的某处。"
msgstr ""

#: ../classes/class_geometry.rst:260
msgid ":ref:`Vector2<class_Vector2>` **get_closest_point_to_segment_uncapped_2d** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:262
msgid "返回由（\\ ``s1``, ``s2``\\ ）定义的二维线上最接近\\ ``point``\\ 的二维点。返回的点可以在线段（\\ ``s1``, ``s2``\\ ）内，也可以在线段外，即在从线段延伸出来的某处。"
msgstr ""

#: ../classes/class_geometry.rst:268
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **get_closest_points_between_segments** **(** :ref:`Vector3<class_Vector3>` p1, :ref:`Vector3<class_Vector3>` p2, :ref:`Vector3<class_Vector3>` q1, :ref:`Vector3<class_Vector3>` q2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:270
msgid "给定两个 3D 线段 (``p1``\\ ，\\ ``p2``) 和 (``q1``\\ ，\\ ``q2``)，到这两个线段上最接近的两个点。返回一个 :ref:`PoolVector3Array<class_PoolVector3Array>`\\ ，其中包含 (``p1``\\ ，\\ ``p2``) 上的这个点以及 (``q1``\\ ，\\ ``q2``) 上的伴随点."
msgstr ""

#: ../classes/class_geometry.rst:276
msgid ":ref:`PoolVector2Array<class_PoolVector2Array>` **get_closest_points_between_segments_2d** **(** :ref:`Vector2<class_Vector2>` p1, :ref:`Vector2<class_Vector2>` q1, :ref:`Vector2<class_Vector2>` p2, :ref:`Vector2<class_Vector2>` q2 **)**"
msgstr ""

#: ../classes/class_geometry.rst:278
msgid "给定两个 2D 线段 (``p1``\\ ，\\ ``q1``) 和 (``p2``\\ ，\\ ``q2``)，找到这两个线段上最接近的两个点。返回一个 :ref:`PoolVector2Array<class_PoolVector2Array>`\\ ，其中包含 (``p1``\\ ，\\ ``q1``) 上的这个点以及 (``p2``, ``q2``) 上的伴随点."
msgstr ""

#: ../classes/class_geometry.rst:284
msgid ":ref:`int<class_int>` **get_uv84_normal_bit** **(** :ref:`Vector3<class_Vector3>` normal **)**"
msgstr ""

#: ../classes/class_geometry.rst:286
msgid "由引擎内部使用。"
msgstr ""

#: ../classes/class_geometry.rst:292
msgid ":ref:`Array<class_Array>` **intersect_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:294
msgid "将\\ ``polygon_a``\\ 与\\ ``polygon_b``\\ 相交并返回相交的多边形数组。这在多边形之间执行\\ :ref:`OPERATION_INTERSECTION<class_Geometry_constant_OPERATION_INTERSECTION>`\\ 。换句话说，返回多边形共享的公共区域。如果没有发生相交，则返回一个空数组。"
msgstr ""

#: ../classes/class_geometry.rst:296
msgid "该操作可能导致产生外部多边形（边界）和内部多边形（孔），可以通过调用\\ :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`\\ 来区分。"
msgstr ""

#: ../classes/class_geometry.rst:302
msgid ":ref:`Array<class_Array>` **intersect_polyline_with_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:304
msgid "将\\ ``polyline``\\ 与\\ ``polygon``\\ 相交，并返回相交的折线数组。这在折线和多边形之间执行了\\ :ref:`OPERATION_INTERSECTION<class_Geometry_constant_OPERATION_INTERSECTION>`\\ 。这个操作可以被认为是用一个封闭的形状砍断一条线。"
msgstr ""

#: ../classes/class_geometry.rst:310
msgid ":ref:`bool<class_bool>` **is_point_in_circle** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:312
msgid "返回\\ ``true``\\ 时，\\ ``point``\\ 位于圆的内部或者\\ *正好*\\ 位于圆的边界上，否则将返回\\ ``false``\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:318
msgid ":ref:`bool<class_bool>` **is_point_in_polygon** **(** :ref:`Vector2<class_Vector2>` point, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:320
msgid "返回\\ ``true``\\ 时，\\ ``point``\\ 位于多边形\\ ``polygon``\\ 的内部或者\\ *正好*\\ 位于多边形的边界上，否则将返回\\ ``false``\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:326
msgid ":ref:`bool<class_bool>` **is_polygon_clockwise** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:328
msgid "如果多边形 ``polygon`` 的顶点按顺时针顺序排序，则返回 ``true``\\ ，否则返回 ``false``\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:334
msgid ":ref:`Variant<class_Variant>` **line_intersects_line_2d** **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` dir_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` dir_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:336
msgid "检查两行（\\ ``from_a``\\ ，\\ ``dir_a``\\ ）和（\\ ``from_b``\\ ，\\ ``dir_b``\\ ）是否相交。如果是，则将相交点返回为\\ :ref:`Vector2<class_Vector2>`\\ 。如果没有交叉，则返回一个空的\\ :ref:`Variant<class_Variant>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:338
msgid "\\ **注意：**\\ 线是使用方向向量而不是终点指定的。"
msgstr ""

#: ../classes/class_geometry.rst:344
msgid ":ref:`Dictionary<class_Dictionary>` **make_atlas** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` sizes **)**"
msgstr ""

#: ../classes/class_geometry.rst:346
msgid "给定表示图块的\\ :ref:`Vector2<class_Vector2>`\\ 数组，构建一个地图集。返回的字典有两个键：\\ ``points``\\ 是\\ :ref:`Vector2<class_Vector2>`\\ 的向量，用于指定每个图块的位置，\\ ``size``\\ 包含整个图集的整体大小，作为\\ :ref:`Vector2<class_Vector2>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:352
msgid ":ref:`Array<class_Array>` **merge_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:354
msgid "合并（结合）\\ ``polygon_a`` 和 ``polygon_b``\\ ，并返回一个合并的多边形数组。在多边形之间执行 :ref:`OPERATION_UNION<class_Geometry_constant_OPERATION_UNION>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:362
msgid ":ref:`Array<class_Array>` **offset_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0 **)**"
msgstr ""

#: ../classes/class_geometry.rst:364
msgid "通过 ``delta`` 单位（像素）膨胀或缩小多边形 ``polygon``\\ 。如果 ``delta`` 是正数，使多边形向外增长。如果 ``delta`` 是负数，则使多边形向内收缩。返回一个多边形数组，因为膨胀或缩小可能导致多个离散的多边形。如果 ``delta`` 为负数，并且其绝对值大约超过了多边形的最小边界矩形尺寸，则返回一个空数组。"
msgstr ""

#: ../classes/class_geometry.rst:366
msgid "每个多边形的顶点将按照 ``join_type`` 确定的方式进行圆角处理，见 :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:368
msgid "该操作可能会产生一个外部多边形（边界）和内部多边形（孔），可以通过调用 :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`\\ 来区分。"
msgstr ""

#: ../classes/class_geometry.rst:370
msgid "\\ **注意：**\\ 要具体平移多边形的顶点，请使用 :ref:`Transform2D.xform<class_Transform2D_method_xform>` 方法。"
msgstr ""

#: ../classes/class_geometry.rst:383
msgid ":ref:`Array<class_Array>` **offset_polyline_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0, :ref:`PolyEndType<enum_Geometry_PolyEndType>` end_type=3 **)**"
msgstr ""

#: ../classes/class_geometry.rst:385
msgid "通过\\ ``delta``\\ 单位（像素）对\\ ``多边形线polyline``\\ 进行充气或放气，产生多边形。如果\\ ``delta``\\ 为正数，则使多段线向外增长。返回一个多边形数组，因为充气/放气可能导致多个离散的多边形。如果\\ ``delta``\\ 为负数，返回一个空数组。"
msgstr ""

#: ../classes/class_geometry.rst:387
msgid "每个多边形的顶点将由\\ ``join_type``\\ 决定，见\\ :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:389
msgid "每个多边形的端点将由\\ ``end_type``\\ 决定，见\\ :ref:`PolyEndType<enum_Geometry_PolyEndType>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:391
msgid "该操作可能会产生一个外部多边形（边界）和内部多边形（孔），可以通过调用\\ :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`\\ 来区分。"
msgstr ""

#: ../classes/class_geometry.rst:397
msgid ":ref:`bool<class_bool>` **point_is_inside_triangle** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` a, :ref:`Vector2<class_Vector2>` b, :ref:`Vector2<class_Vector2>` c **)** |const|"
msgstr ""

#: ../classes/class_geometry.rst:399
msgid "如果\\ ``点point``\\ 在\\ ``a``\\ 、\\ ``b``\\ 和\\ ``c``\\ 所指定的三角形内，则返回。"
msgstr ""

#: ../classes/class_geometry.rst:405
msgid ":ref:`Variant<class_Variant>` **ray_intersects_triangle** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**"
msgstr ""

#: ../classes/class_geometry.rst:407
msgid "测试从\\ ``from``\\ 开始，方向为\\ ``dir``\\ 的3D射线是否与\\ ``a``\\ 、\\ ``b``\\ 和\\ ``c``\\ 指定的三角形相交。如果是，返回相交点为\\ :ref:`Vector3<class_Vector3>`\\ 。如果没有发生相交，将返回一个空的\\ :ref:`Variant<class_Variant>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:413
msgid ":ref:`float<class_float>` **segment_intersects_circle** **(** :ref:`Vector2<class_Vector2>` segment_from, :ref:`Vector2<class_Vector2>` segment_to, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:415
msgid "给出2D线段（\\ ``segment_from``\\ ，\\ ``segment_to``\\ ），返回线段上与圆心为 ``circle_position`` 、半径为 ``circle_radius`` 圆的相交位置（以0到1之间的数字）。如果线段没有与圆相交，则返回-1（如果延伸线段的线段与圆相交，但线段没有相交，也是这种情况）。"
msgstr ""

#: ../classes/class_geometry.rst:421
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_convex** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Array<class_Array>` planes **)**"
msgstr ""

#: ../classes/class_geometry.rst:423
msgid "给定一个通过数组 ``planes`` 中的 :ref:`Plane<class_Plane>`\\ s 定义的凸面体，测试线段（\\ ``from``\\ ，\\ ``to``\\ ）是否与该面体相交。如果找到相交点，返回一个\\ :ref:`PoolVector3Array<class_PoolVector3Array>`\\ ，包含相交点和凸面体的法线。如果没有找到相交点，返回的数组为空。"
msgstr ""

#: ../classes/class_geometry.rst:429
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_cylinder** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` height, :ref:`float<class_float>` radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:431
msgid "检查线段（\\ ``from``\\ ，\\ ``to``\\ ）是否与高度 ``height`` 的圆柱体相交，圆柱体以原点为中心，半径为 ``radius``\\ 。如果没有，返回一个空的 :ref:`PoolVector3Array<class_PoolVector3Array>`\\ 。如果发生了相交，返回的数组包含相交点和圆柱体在相交点的法线。"
msgstr ""

#: ../classes/class_geometry.rst:437
msgid ":ref:`Variant<class_Variant>` **segment_intersects_segment_2d** **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` to_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` to_b **)**"
msgstr ""

#: ../classes/class_geometry.rst:439
msgid "检查两段（\\ ``from_a``, ``to_a``\\ ）和（\\ ``from_b``, ``to_b``\\ ）是否相交。如果是，返回相交点为\\ :ref:`Vector2<class_Vector2>`\\ 。如果没有发生相交，返回一个空的\\ :ref:`Variant<class_Variant>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:445
msgid ":ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_sphere** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` sphere_position, :ref:`float<class_float>` sphere_radius **)**"
msgstr ""

#: ../classes/class_geometry.rst:447
msgid "检查线段（\\ ``from``\\ ，\\ ``to``\\ ）是否与球心为 ``sphere_position``\\ 、半径为 ``sphere_radius`` 的球体相交。如果没有，返回一个空的 :ref:`PoolVector3Array<class_PoolVector3Array>`\\ 。如果相交，返回一个包含交点和交点处球体法线的 :ref:`PoolVector3Array<class_PoolVector3Array>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:453
msgid ":ref:`Variant<class_Variant>` **segment_intersects_triangle** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**"
msgstr ""

#: ../classes/class_geometry.rst:455
msgid "测试段（\\ ``from``\\ ，\\ ``to``\\ ）是否与三角形\\ ``a``\\ ，\\ ``b``\\ ，\\ ``c``\\ 相交。如果是，返回相交点为\\ :ref:`Vector3<class_Vector3>`\\ 。如果没有发生相交，则返回一个空的\\ :ref:`Variant<class_Variant>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:461
msgid ":ref:`PoolIntArray<class_PoolIntArray>` **triangulate_delaunay_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**"
msgstr ""

#: ../classes/class_geometry.rst:463
msgid "对由离散的 ``point`` 点集合指定的区域进行三角化，使得任何点都不在任何结果三角形的外接圆内。返回一个 :ref:`PoolIntArray<class_PoolIntArray>`\\ ，其中每个三角形由 ``point`` 点的三个连续的点索引组成（即返回的数组将有 ``n * 3`` 元素，\\ ``n`` 是找到的三角形的数量）。如果三角化没有成功，将返回一个空的 :ref:`PoolIntArray<class_PoolIntArray>`\\ 。"
msgstr ""

#: ../classes/class_geometry.rst:469
msgid ":ref:`PoolIntArray<class_PoolIntArray>` **triangulate_polygon** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**"
msgstr ""

#: ../classes/class_geometry.rst:471
msgid "对多边形 ``polygon`` 中的点指定的多边形进行三角化。返回一个 :ref:`PoolIntArray<class_PoolIntArray>`\\ ，其中每个三角形由 ``polygon`` 中三个连续的点索引组成（即返回的数组将有 ``n * 3`` 个元素，\\ ``n`` 是找到的三角形的数量）。如果三角化没有成功，将返回一个空的 :ref:`PoolIntArray<class_PoolIntArray>`\\ 。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
