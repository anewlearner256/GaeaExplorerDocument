# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../classes/class_funcref.rst:10
msgid "FuncRef"
msgstr ""

#: ../classes/class_funcref.rst:12
msgid "**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`"
msgstr ""

#: ../classes/class_funcref.rst:14
msgid "对一个对象中的一个函数的引用。"
msgstr ""

#: ../classes/class_funcref.rst:17
msgid "描述"
msgstr ""

#: ../classes/class_funcref.rst:19
msgid "在GDScript中，函数不是\\ *第一类对象*\\ 。这意味着不可能将它们直接作为变量存储，从另一个函数中返回，或将它们作为参数传递。"
msgstr ""

#: ../classes/class_funcref.rst:21
msgid "然而，通过使用\\ :ref:`@GDScript.funcref<class_@GDScript_method_funcref>`\\ 函数创建一个\\ ``FuncRef``\\ ，可以创建、传递和调用给定对象中的一个函数的引用。"
msgstr ""

#: ../classes/class_funcref.rst:24
msgid "属性"
msgstr ""

#: ../classes/class_funcref.rst:27
msgid ":ref:`String<class_String>`"
msgstr ""

#: ../classes/class_funcref.rst:27
msgid ":ref:`function<class_FuncRef_property_function>`"
msgstr ""

#: ../classes/class_funcref.rst:27
#: ../classes/class_funcref.rst:51
msgid "``\"\"``"
msgstr ""

#: ../classes/class_funcref.rst:31
msgid "方法"
msgstr ""

#: ../classes/class_funcref.rst:34
#: ../classes/class_funcref.rst:36
msgid ":ref:`Variant<class_Variant>`"
msgstr ""

#: ../classes/class_funcref.rst:34
msgid ":ref:`call_func<class_FuncRef_method_call_func>` **(** ... **)** |vararg|"
msgstr ""

#: ../classes/class_funcref.rst:36
msgid ":ref:`call_funcv<class_FuncRef_method_call_funcv>` **(** :ref:`Array<class_Array>` arg_array **)**"
msgstr ""

#: ../classes/class_funcref.rst:38
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../classes/class_funcref.rst:38
msgid ":ref:`is_valid<class_FuncRef_method_is_valid>` **(** **)** |const|"
msgstr ""

#: ../classes/class_funcref.rst:40
msgid "void"
msgstr ""

#: ../classes/class_funcref.rst:40
msgid ":ref:`set_instance<class_FuncRef_method_set_instance>` **(** :ref:`Object<class_Object>` instance **)**"
msgstr ""

#: ../classes/class_funcref.rst:44
msgid "属性说明"
msgstr ""

#: ../classes/class_funcref.rst:48
msgid ":ref:`String<class_String>` **function**"
msgstr ""

#: ../classes/class_funcref.rst:51
msgid "*Default*"
msgstr ""

#: ../classes/class_funcref.rst:53
msgid "*Setter*"
msgstr ""

#: ../classes/class_funcref.rst:53
msgid "set_function(value)"
msgstr ""

#: ../classes/class_funcref.rst:55
msgid "*Getter*"
msgstr ""

#: ../classes/class_funcref.rst:55
msgid "get_function()"
msgstr ""

#: ../classes/class_funcref.rst:58
msgid "被引用函数的名称。"
msgstr ""

#: ../classes/class_funcref.rst:61
msgid "方法说明"
msgstr ""

#: ../classes/class_funcref.rst:65
msgid ":ref:`Variant<class_Variant>` **call_func** **(** ... **)** |vararg|"
msgstr ""

#: ../classes/class_funcref.rst:67
msgid "调用以前设置在 :ref:`function<class_FuncRef_property_function>` 或 :ref:`@GDScript.funcref<class_@GDScript_method_funcref>` 中的引用函数。"
msgstr ""

#: ../classes/class_funcref.rst:73
msgid ":ref:`Variant<class_Variant>` **call_funcv** **(** :ref:`Array<class_Array>` arg_array **)**"
msgstr ""

#: ../classes/class_funcref.rst:75
msgid "调用先前在 :ref:`function<class_FuncRef_property_function>` 或 :ref:`@GDScript.funcref<class_@GDScript_method_funcref>` 中设置的引用函数。与 :ref:`call_func<class_FuncRef_method_call_func>` 相反，此方法不支持可变数量的参数，但希望所有参数都通过单个数组形式 :ref:`Array<class_Array>` 传递。"
msgstr ""

#: ../classes/class_funcref.rst:81
msgid ":ref:`bool<class_bool>` **is_valid** **(** **)** |const|"
msgstr ""

#: ../classes/class_funcref.rst:83
msgid "返回该对象是否仍然存在并被分配了该函数。"
msgstr ""

#: ../classes/class_funcref.rst:89
msgid "void **set_instance** **(** :ref:`Object<class_Object>` instance **)**"
msgstr ""

#: ../classes/class_funcref.rst:91
msgid "包含被引用函数的对象。这个对象必须是实际继承自\\ :ref:`Object<class_Object>`\\ 的类型，而不是像\\ :ref:`int<class_int>`\\ 、\\ :ref:`Vector2<class_Vector2>`\\ 或\\ :ref:`Dictionary<class_Dictionary>`\\ 这样的内置类型。"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
