# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/ui/custom_gui_controls.rst:4
msgid "Custom GUI controls"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:7
msgid "So many controls..."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:9
msgid "Yet there are never enough. Creating your own custom controls that act just the way you want them to is an obsession of almost every GUI programmer. GaaeExplorer provides plenty of them, but they may not work exactly the way you want. Before contacting the developers with a pull-request to support diagonal scrollbars, at least it will be good to know how to create these controls easily from script."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:17
msgid "Drawing"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:19
msgid "For drawing, it is recommended to check the :ref:`doc_custom_drawing_in_2d` tutorial. The same applies. Some functions are worth mentioning due to their usefulness when drawing, so they will be detailed next:"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:24
msgid "Checking control size"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:26
msgid "Unlike 2D nodes, \"size\" is important with controls, as it helps to organize them in proper layouts. For this, the :ref:`Control.rect_size <class_Control_property_rect_size>` property is provided. Checking it during ``_draw()`` is vital to ensure everything is kept in-bounds."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:33
msgid "Checking focus"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:35
msgid "Some controls (such as buttons or text editors) might provide input focus for keyboard or joypad input. Examples of this are entering text or pressing a button. This is controlled with the :ref:`Control.focus_mode <class_Control_property_focus_mode>` property. When drawing, and if the control supports input focus, it is always desired to show some sort of indicator (highlight, box, etc.) to indicate that this is the currently focused control. To check for this status, the :ref:`Control.has_focus() <class_Control_method_has_focus>` method exists. Example"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:69
msgid "Sizing"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:71
msgid "As mentioned before, size is important to controls. This allows them to lay out properly, when set into grids, containers, or anchored. Controls, most of the time, provide a *minimum size* to help properly lay them out. For example, if controls are placed vertically on top of each other using a :ref:`VBoxContainer <class_VBoxContainer>`, the minimum size will make sure your custom control is not squished by the other controls in the container."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:79
msgid "To provide this callback, just override :ref:`Control.get_minimum_size() <class_Control_method_get_minimum_size>`, for example:"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:96
msgid "Alternatively, set it using a function:"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:112
msgid "Input"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:114
msgid "Controls provide a few helpers to make managing input events much easier than regular nodes."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:118
msgid "Input events"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:120
msgid "There are a few tutorials about input before this one, but it's worth mentioning that controls have a special input method that only works when:"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:124
msgid "The mouse pointer is over the control."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:125
msgid "The button was pressed over this control (control always captures input until button is released)"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:127
msgid "Control provides keyboard/joypad focus via :ref:`Control.focus_mode <class_Control_property_focus_mode>`."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:130
msgid "This function is :ref:`Control._gui_input() <class_Control_method__gui_input>`. Simply override it in your control. No processing needs to be set."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:153
msgid "For more information about events themselves, check the :ref:`doc_inputevent` tutorial."
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:157
msgid "Notifications"
msgstr ""

#: ../tutorials/ui/custom_gui_controls.rst:159
msgid "Controls also have many useful notifications for which no dedicated callback exists, but which can be checked with the _notification callback:"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
