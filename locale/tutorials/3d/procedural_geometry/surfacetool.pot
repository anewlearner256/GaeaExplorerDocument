# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:4
msgid "Using the SurfaceTool"
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:6
msgid "The :ref:`SurfaceTool <class_surfacetool>` provides a useful interface for constructing geometry. The interface is similar to the :ref:`ImmediateGeometry <class_immediategeometry>` node. You set each per-vertex attribute (e.g. normal, uv, color) and then when you add a vertex it captures the attributes."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:11
msgid "The SurfaceTool also provides some useful helper functions like ``index()`` and ``generate_normals()``."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:13
msgid "Attributes are added before each vertex is added:"
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:24
msgid "When finished generating your geometry with the :ref:`SurfaceTool <class_surfacetool>` call ``commit()`` to finish generating the mesh. If an :ref:`ArrayMesh <class_ArrayMesh>` is passed to ``commit()`` then it appends a new surface to the end of the ArrayMesh. While if nothing is passed in, ``commit()`` returns an ArrayMesh."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:36
msgid "Code creates a triangle with indices"
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:62
msgid "You can optionally add an index array, either by calling ``add_index()`` and adding vertices to the index array or by calling ``index()`` which shrinks the vertex array to remove duplicate vertices."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:82
msgid "Similarly, if you have an index array, but you want each vertex to be unique (e.g. because you want to use unique normals or colors per face instead of per-vertex), you can call ``deindex()``."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:90
msgid "If you don't add custom normals yourself, you can add them using ``generate_normals()``, which should be called after generating geometry and before committing the mesh using ``commit()`` or ``commit_to_arrays()``. Calling ``generate_normals(true)`` will flip the resulting normals. As a side note, ``generate_normals()`` only works if the primitive type is set to ``Mesh.PRIMITIVE_TRIANGLES``."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:95
msgid "You may notice that normal mapping or other material properties look broken on the generated mesh. This is because normal mapping **requires** the mesh to feature *tangents*, which are separate from *normals*. You can either add custom tangents manually, or generate them automatically with with ``generate_tangents()``. This method requires that each vertex have UVs and normals set already."
msgstr ""

#: ../tutorials/3d/procedural_geometry/surfacetool.rst:108
msgid "By default, when generating normals, they will be calculated on a per-face basis. If you want smooth vertex normals, when adding vertices, call ``add_smooth_group()``. ``add_smooth_group()`` needs to be called while building the geometry, e.g. before the call to ``add_vertex()`` (if non-indexed) or ``add_index()`` (if indexed)."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
