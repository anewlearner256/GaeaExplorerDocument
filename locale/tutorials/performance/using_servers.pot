# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/performance/using_servers.rst:4
msgid "Optimization using Servers"
msgstr ""

#: ../tutorials/performance/using_servers.rst:6
msgid "Engines like GaaeExplorer provide increased ease of use thanks to their high level constructs and features. Most of them are accessed and used via the :ref:`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project organization and asset management in complex games."
msgstr ""

#: ../tutorials/performance/using_servers.rst:10
msgid "There are, of course, always drawbacks:"
msgstr ""

#: ../tutorials/performance/using_servers.rst:12
msgid "There is an extra layer of complexity"
msgstr ""

#: ../tutorials/performance/using_servers.rst:13
msgid "Performance is lower than using simple APIs directly"
msgstr ""

#: ../tutorials/performance/using_servers.rst:14
msgid "It is not possible to use multiple threads to control them"
msgstr ""

#: ../tutorials/performance/using_servers.rst:15
msgid "More memory is needed."
msgstr ""

#: ../tutorials/performance/using_servers.rst:17
msgid "In many cases, this is not really a problem (GaaeExplorer is very optimized, and most operations are handled with signals, so no polling is required). Still, sometimes it can be. For example, dealing with tens of thousands of instances for something that needs to be processed every frame can be a bottleneck."
msgstr ""

#: ../tutorials/performance/using_servers.rst:21
msgid "This type of situation makes programmers regret they are using a game engine and wish they could go back to a more handcrafted, low level implementation of game code."
msgstr ""

#: ../tutorials/performance/using_servers.rst:24
msgid "Still, GaaeExplorer is designed to work around this problem."
msgstr ""

#: ../tutorials/performance/using_servers.rst:27
msgid "Servers"
msgstr ""

#: ../tutorials/performance/using_servers.rst:29
msgid "One of the most interesting design decisions for GaaeExplorer is the fact that the whole scene system is *optional*. While it is not currently possible to compile it out, it can be completely bypassed."
msgstr ""

#: ../tutorials/performance/using_servers.rst:32
msgid "At the core, GaaeExplorer uses the concept of Servers. They are very low-level APIs to control rendering, physics, sound, etc. The scene system is built on top of them and uses them directly. The most common servers are:"
msgstr ""

#: ../tutorials/performance/using_servers.rst:36
msgid ":ref:`VisualServer <class_VisualServer>`: handles everything related to graphics."
msgstr ""

#: ../tutorials/performance/using_servers.rst:37
msgid ":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D physics."
msgstr ""

#: ../tutorials/performance/using_servers.rst:38
msgid ":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related to 2D physics."
msgstr ""

#: ../tutorials/performance/using_servers.rst:39
msgid ":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""

#: ../tutorials/performance/using_servers.rst:41
msgid "Explore their APIs and you will realize that all the functions provided are low-level implementations of everything GaaeExplorer allows you to do."
msgstr ""

#: ../tutorials/performance/using_servers.rst:45
msgid "RIDs"
msgstr ""

#: ../tutorials/performance/using_servers.rst:47
msgid "The key to using servers is understanding Resource ID (:ref:`RID <class_RID>`) objects. These are opaque handles to the server implementation. They are allocated and freed manually. Almost every function in the servers requires RIDs to access the actual resource."
msgstr ""

#: ../tutorials/performance/using_servers.rst:51
msgid "Most GaaeExplorer nodes and resources contain these RIDs from the servers internally, and they can be obtained with different functions. In fact, anything that inherits :ref:`Resource <class_Resource>` can be directly casted to an RID. Not all resources contain an RID, though: in such cases, the RID will be empty. The resource can then be passed to server APIs as an RID."
msgstr ""

#: ../tutorials/performance/using_servers.rst:55
msgid "Resources are reference-counted (see :ref:`Reference <class_Reference>`), and references to a resource's RID are *not* counted when determining whether the resource is still in use. Make sure to keep a reference to the resource outside the server, or else both it and its RID will be erased."
msgstr ""

#: ../tutorials/performance/using_servers.rst:60
msgid "For nodes, there are many functions available:"
msgstr ""

#: ../tutorials/performance/using_servers.rst:62
msgid "For CanvasItem, the :ref:`CanvasItem.get_canvas_item() <class_CanvasItem_method_get_canvas_item>` method will return the canvas item RID in the server."
msgstr ""

#: ../tutorials/performance/using_servers.rst:64
msgid "For CanvasLayer, the :ref:`CanvasLayer.get_canvas() <class_CanvasLayer_method_get_canvas>` method will return the canvas RID in the server."
msgstr ""

#: ../tutorials/performance/using_servers.rst:66
msgid "For Viewport, the :ref:`Viewport.get_viewport_rid() <class_Viewport_method_get_viewport_rid>` method will return the viewport RID in the server."
msgstr ""

#: ../tutorials/performance/using_servers.rst:68
msgid "For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) contains functions to get the *VisualServer Scenario*, and the *PhysicsServer Space*. This allows creating 3D objects directly with the server API and using them."
msgstr ""

#: ../tutorials/performance/using_servers.rst:72
msgid "For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) contains functions to get the *VisualServer Canvas*, and the *Physics2DServer Space*. This allows creating 2D objects directly with the server API and using them."
msgstr ""

#: ../tutorials/performance/using_servers.rst:76
msgid "The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the scenario *instance* and *instance base* via the :ref:`VisualInstance.get_instance() <class_VisualInstance_method_get_instance>` and :ref:`VisualInstance.get_base() <class_VisualInstance_method_get_base>` respectively."
msgstr ""

#: ../tutorials/performance/using_servers.rst:80
msgid "Try exploring the nodes and resources you are familiar with and find the functions to obtain the server *RIDs*."
msgstr ""

#: ../tutorials/performance/using_servers.rst:82
msgid "It is not advised to control RIDs from objects that already have a node associated. Instead, server functions should always be used for creating and controlling new ones and interacting with the existing ones."
msgstr ""

#: ../tutorials/performance/using_servers.rst:86
msgid "Creating a sprite"
msgstr ""

#: ../tutorials/performance/using_servers.rst:88
msgid "This is a simple example of how to create a sprite from code and move it using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""

#: ../tutorials/performance/using_servers.rst:115
msgid "The Canvas Item API in the server allows you to add draw primitives to it. Once added, they can't be modified. The Item needs to be cleared and the primitives re-added (this is not the case for setting the transform, which can be done as many times as desired)."
msgstr ""

#: ../tutorials/performance/using_servers.rst:119
msgid "Primitives are cleared this way:"
msgstr ""

#: ../tutorials/performance/using_servers.rst:128
msgid "Instantiating a Mesh into 3D space"
msgstr ""

#: ../tutorials/performance/using_servers.rst:130
msgid "The 3D APIs are different from the 2D ones, so the instantiation API must be used."
msgstr ""

#: ../tutorials/performance/using_servers.rst:158
msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr ""

#: ../tutorials/performance/using_servers.rst:160
msgid "This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem <class_CanvasItem>` when the body moves."
msgstr ""

#: ../tutorials/performance/using_servers.rst:195
msgid "The 3D version should be very similar, as 2D and 3D physics servers are identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer <class_PhysicsServer>` respectively)."
msgstr ""

#: ../tutorials/performance/using_servers.rst:199
msgid "Getting data from the servers"
msgstr ""

#: ../tutorials/performance/using_servers.rst:201
msgid "Try to **never** request any information from ``VisualServer``, ``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you know what you are doing. These servers will often run asynchronously for performance and calling any function that returns a value will stall them and force them to process anything pending until the function is actually called. This will severely decrease performance if you call them every frame (and it won't be obvious why)."
msgstr ""

#: ../tutorials/performance/using_servers.rst:207
msgid "Because of this, most APIs in such servers are designed so it's not even possible to request information back, until it's actual data that can be saved."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
