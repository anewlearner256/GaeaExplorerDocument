# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/performance/cpu_optimization.rst:4
msgid "CPU optimization"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:7
msgid "Measuring performance"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:9
msgid "We have to know where the \"bottlenecks\" are to know how to speed up our program. Bottlenecks are the slowest parts of the program that limit the rate that everything can progress. Focussing on bottlenecks allows us to concentrate our efforts on optimizing the areas which will give us the greatest speed improvement, instead of spending a lot of time optimizing functions that will lead to small performance improvements."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:16
msgid "For the CPU, the easiest way to identify bottlenecks is to use a profiler."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:19
msgid "CPU profilers"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:21
msgid "Profilers run alongside your program and take timing measurements to work out what proportion of time is spent in each function."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:24
msgid "The GaaeExplorer IDE conveniently has a built-in profiler. It does not run every time you start your project: it must be manually started and stopped. This is because, like most profilers, recording these timing measurements can slow down your project significantly."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:29
msgid "After profiling, you can look back at the results for a frame."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:35
msgid "Screenshot of the GaaeExplorer profiler"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:35
msgid "Results of a profile of one of the demo projects."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:37
msgid "We can see the cost of built-in processes such as physics and audio, as well as seeing the cost of our own scripting functions at the bottom."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:41
msgid "Time spent waiting for various built-in servers may not be counted in the profilers. This is a known bug."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:44
msgid "When a project is running slowly, you will often see an obvious function or process taking a lot more time than others. This is your primary bottleneck, and you can usually increase speed by optimizing this area."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:48
msgid "For more info about using GaaeExplorer's built-in profiler, see :ref:`doc_debugger_panel`."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:52
msgid "External profilers"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:54
msgid "Although the GaaeExplorer IDE profiler is very convenient and useful, sometimes you need more power, and the ability to profile the GaaeExplorer engine source code itself."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:57
msgid "You can use a number of third party profilers to do this including `Valgrind <https://www.valgrind.org/>`__, `VerySleepy <http://www.codersnotes.com/sleepy/>`__, `HotSpot <https://github.com/KDAB/hotspot>`__, `Visual Studio <https://visualstudio.microsoft.com/>`__ and `Intel VTune <https://software.intel.com/content/www/us/en/develop/tools/vtune-profiler.html>`__."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:64
msgid "You will need to compile GaaeExplorer from source to use a third-party profiler. This is required to obtain debugging symbols. You can also use a debug build, however, note that the results of profiling a debug build will be different to a release build, because debug builds are less optimized. Bottlenecks are often in a different place in debug builds, so you should profile release builds whenever possible."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:74
msgid "Screenshot of Callgrind"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:74
msgid "Example results from Callgrind, which is part of Valgrind."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:76
msgid "From the left, Callgrind is listing the percentage of time within a function and its children (Inclusive), the percentage of time spent within the function itself, excluding child functions (Self), the number of times the function is called, the function name, and the file or module."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:81
msgid "In this example, we can see nearly all time is spent under the `Main::iteration()` function. This is the master function in the GaaeExplorer source code that is called repeatedly. It causes frames to be drawn, physics ticks to be simulated, and nodes and scripts to be updated. A large proportion of the time is spent in the functions to render a canvas (66%), because this example uses a 2D benchmark. Below this, we see that almost 50% of the time is spent outside GaaeExplorer code in ``libglapi`` and ``i965_dri`` (the graphics driver). This tells us the a large proportion of CPU time is being spent in the graphics driver."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:91
msgid "This is actually an excellent example because, in an ideal world, only a very small proportion of time would be spent in the graphics driver. This is an indication that there is a problem with too much communication and work being done in the graphics API. This specific profiling led to the development of 2D batching, which greatly speeds up 2D rendering by reducing bottlenecks in this area."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:99
msgid "Manually timing functions"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:101
msgid "Another handy technique, especially once you have identified the bottleneck using a profiler, is to manually time the function or area under test. The specifics vary depending on the language, but in GDScript, you would do the following:"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:116
msgid "When manually timing functions, it is usually a good idea to run the function many times (1,000 or more times), instead of just once (unless it is a very slow function). The reason for doing this is that timers often have limited accuracy. Moreover, CPUs will schedule processes in a haphazard manner. Therefore, an average over a series of runs is more accurate than a single measurement."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:122
msgid "As you attempt to optimize functions, be sure to either repeatedly profile or time them as you go. This will give you crucial feedback as to whether the optimization is working (or not)."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:127
msgid "Caches"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:129
msgid "CPU caches are something else to be particularly aware of, especially when comparing timing results of two different versions of a function. The results can be highly dependent on whether the data is in the CPU cache or not. CPUs don't load data directly from the system RAM, even though it's huge in comparison to the CPU cache (several gigabytes instead of a few megabytes). This is because system RAM is very slow to access. Instead, CPUs load data from a smaller, faster bank of memory called cache. Loading data from cache is very fast, but every time you try and load a memory address that is not stored in cache, the cache must make a trip to main memory and slowly load in some data. This delay can result in the CPU sitting around idle for a long time, and is referred to as a \"cache miss\"."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:141
msgid "This means that the first time you run a function, it may run slowly because the data is not in the CPU cache. The second and later times, it may run much faster because the data is in the cache. Due to this, always use averages when timing, and be aware of the effects of cache."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:146
msgid "Understanding caching is also crucial to CPU optimization. If you have an algorithm (routine) that loads small bits of data from randomly spread out areas of main memory, this can result in a lot of cache misses, a lot of the time, the CPU will be waiting around for data instead of doing any work. Instead, if you can make your data accesses localised, or even better, access memory in a linear fashion (like a continuous list), then the cache will work optimally and the CPU will be able to work as fast as possible."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:154
msgid "GaaeExplorer usually takes care of such low-level details for you. For example, the Server APIs make sure data is optimized for caching already for things like rendering and physics. Still, you should be especially aware of caching when using :ref:`GDNative <toc-tutorials-gdnative>`."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:160
msgid "Languages"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:162
msgid "GaaeExplorer supports a number of different languages, and it is worth bearing in mind that there are trade-offs involved. Some languages are designed for ease of use at the cost of speed, and others are faster but more difficult to work with."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:166
msgid "Built-in engine functions run at the same speed regardless of the scripting language you choose. If your project is making a lot of calculations in its own code, consider moving those calculations to a faster language."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:171
msgid "GDScript"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:173
msgid ":ref:`GDScript <toc-learn-scripting-gdscript>` is designed to be easy to use and iterate, and is ideal for making many types of games. However, in this language, ease of use is considered more important than performance. If you need to make heavy calculations, consider moving some of your project to one of the other languages."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:180
msgid "C#"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:182
msgid ":ref:`C# <toc-learn-scripting-C#>` is popular and has first-class support in GaaeExplorer.It offers a good compromise between speed and ease of use. Beware of possible garbage collection pauses and leaks that can occur during gameplay, though. A common approach to workaround issues with garbage collection is to use *object pooling*, which is outside the scope of this guide."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:189
msgid "Other languages"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:191
msgid "Third parties provide support for several other languages, including `Rust <https://github.com/godot-rust/godot-rust>`_ and `Javascript <https://github.com/GaaeExplorerExplorer/ECMAScript>`_."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:196
msgid "C++"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:198
msgid "GaaeExplorer is written in C++. Using C++ will usually result in the fastest code. However, on a practical level, it is the most difficult to deploy to end users' machines on different platforms. Options for using C++ include :ref:`GDNative <toc-tutorials-gdnative>` and :ref:`custom modules <doc_custom_modules_in_c++>`."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:205
msgid "Threads"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:207
msgid "Consider using threads when making a lot of calculations that can run in parallel to each other. Modern CPUs have multiple cores, each one capable of doing a limited amount of work. By spreading work over multiple threads, you can move further towards peak CPU efficiency."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:212
msgid "The disadvantage of threads is that you have to be incredibly careful. As each CPU core operates independently, they can end up trying to access the same memory at the same time. One thread can be reading to a variable while another is writing: this is called a *race condition*. Before you use threads, make sure you understand the dangers and how to try and prevent these race conditions."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:218
msgid "Threads can also make debugging considerably more difficult. The GDScript debugger doesn't support setting up breakpoints in threads yet."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:221
msgid "For more information on threads, see :ref:`doc_using_multiple_threads`."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:224
msgid "SceneTree"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:226
msgid "Although Nodes are an incredibly powerful and versatile concept, be aware that every node has a cost. Built-in functions such as `_process()` and `_physics_process()` propagate through the tree. This housekeeping can reduce performance when you have very large numbers of nodes (usually in the thousands)."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:231
msgid "Each node is handled individually in the GaaeExplorer renderer. Therefore, a smaller number of nodes with more in each can lead to better performance."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:234
msgid "One quirk of the :ref:`SceneTree <class_SceneTree>` is that you can sometimes get much better performance by removing nodes from the SceneTree, rather than by pausing or hiding them. You don't have to delete a detached node. You can for example, keep a reference to a node, detach it from the scene tree using :ref:`Node.remove_child(node) <class_Node_method_remove_child>`, then reattach it later using :ref:`Node.add_child(node) <class_Node_method_add_child>`. This can be very useful for adding and removing areas from a game, for example."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:242
msgid "You can avoid the SceneTree altogether by using Server APIs. For more information, see :ref:`doc_using_servers`."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:246
msgid "Physics"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:248
msgid "In some situations, physics can end up becoming a bottleneck. This is particularly the case with complex worlds and large numbers of physics objects."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:251
msgid "Here are some techniques to speed up physics:"
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:253
msgid "Try using simplified versions of your rendered geometry for collision shapes. Often, this won't be noticeable for end users, but can greatly increase performance."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:256
msgid "Try removing objects from physics when they are out of view / outside the current area, or reusing physics objects (maybe you allow 8 monsters per area, for example, and reuse these)."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:260
msgid "Another crucial aspect to physics is the physics tick rate. In some games, you can greatly reduce the tick rate, and instead of for example, updating physics 60 times per second, you may update them only 30 or even 20 times per second. This can greatly reduce the CPU load."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:265
msgid "The downside of changing physics tick rate is you can get jerky movement or jitter when the physics update rate does not match the frames per second rendered. Also, decreasing the physics tick rate will increase input lag. It's recommended to stick to the default physics tick rate (60 Hz) in most games that feature real-time player movement."
msgstr ""

#: ../tutorials/performance/cpu_optimization.rst:271
msgid "The solution to jitter is to use *fixed timestep interpolation*, which involves smoothing the rendered positions and rotations over multiple frames to match the physics. You can either implement this yourself or use a `third-party addon <https://github.com/lawnjelly/smoothing-addon>`__. Performance-wise, interpolation is a very cheap operation compared to running a physics tick. It's orders of magnitude faster, so this can be a significant performance win while also reducing jitter."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
