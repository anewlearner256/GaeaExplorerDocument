# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/networking/webrtc.rst:4
#: ../tutorials/networking/webrtc.rst:21
msgid "WebRTC"
msgstr ""

#: ../tutorials/networking/webrtc.rst:7
msgid "HTML5, WebSocket, WebRTC"
msgstr ""

#: ../tutorials/networking/webrtc.rst:9
msgid "One of GaaeExplorer's great features is its ability to export to the HTML5/WebAssembly platform, allowing your game to run directly in the browser when a user visit your webpage."
msgstr ""

#: ../tutorials/networking/webrtc.rst:11
msgid "This is a great opportunity for both demos and full games, but used to come with some limitations. In the area of networking, browsers used to support only HTTPRequests until recently, when first WebSocket and then WebRTC were proposed as standards."
msgstr ""

#: ../tutorials/networking/webrtc.rst:14
msgid "WebSocket"
msgstr ""

#: ../tutorials/networking/webrtc.rst:16
msgid "When the WebSocket protocol was standardized in December 2011, it allowed browsers to create stable and bidirectional connections to a WebSocket server. The protocol is quite simple, but a very powerful tool to send push notifications to browsers, and has been used to implement chats, turn-based games, etc."
msgstr ""

#: ../tutorials/networking/webrtc.rst:18
msgid "WebSockets, though, still use a TCP connection, which is good for reliability but not for latency, so not good for real-time applications like VoIP and fast-paced games."
msgstr ""

#: ../tutorials/networking/webrtc.rst:23
msgid "For this reason, since 2010, Google started working on a new technology called WebRTC, which later on, in 2017, became a W3C candidate recommendation. WebRTC is a much more complex set of specifications, and relies on many other technologies behind the scenes (ICE, DTLS, SDP) to provide fast, real-time, and secure communication between two peers."
msgstr ""

#: ../tutorials/networking/webrtc.rst:25
msgid "The idea is to find the fastest route between the two peers and establish whenever possible a direct communication (i.e. try to avoid a relaying server)."
msgstr ""

#: ../tutorials/networking/webrtc.rst:27
msgid "However, this comes at a price, which is that some media information must be exchanged between the two peers before the communication can start (in the form of Session Description Protocol - SDP strings). This usually takes the form of a so-called WebRTC Signaling Server."
msgstr ""

#: ../tutorials/networking/webrtc.rst:31
msgid "Peers connect to a signaling server (for example a WebSocket server) and send their media information. The server then relays this information to other peers, allowing them to establish the desired direct communication. Once this step is done, peers can disconnect from the signaling server and keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""

#: ../tutorials/networking/webrtc.rst:34
msgid "Using WebRTC in GaaeExplorer"
msgstr ""

#: ../tutorials/networking/webrtc.rst:36
msgid "WebRTC is implemented in GaaeExplorer via two main classes :ref:`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for more details."
msgstr ""

#: ../tutorials/networking/webrtc.rst:38
msgid "These classes are available automatically in HTML5, but **require an external GDNative plugin on native (non-HTML5) platforms**. Check out the `webrtc-native plugin repository <https://github.com/godotengine/webrtc-native>`__ for instructions and to get the latest `release <https://github.com/godotengine/webrtc-native/releases>`__."
msgstr ""

#: ../tutorials/networking/webrtc.rst:42
msgid "When exporting to Android, make sure to enable the ``INTERNET`` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android."
msgstr ""

#: ../tutorials/networking/webrtc.rst:48
msgid "Minimal connection example"
msgstr ""

#: ../tutorials/networking/webrtc.rst:50
msgid "This example will show you how to create a WebRTC connection between two peers in the same application. This is not very useful in real life, but will give you a good overview of how a WebRTC connection is set up."
msgstr ""

#: ../tutorials/networking/webrtc.rst:98
msgid "This will print:"
msgstr ""

#: ../tutorials/networking/webrtc.rst:106
msgid "Local signaling example"
msgstr ""

#: ../tutorials/networking/webrtc.rst:108
msgid "This example expands on the previous one, separating the peers in two different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as a signaling server."
msgstr ""

#: ../tutorials/networking/webrtc.rst:148
msgid "And now for the local signaling server:"
msgstr ""

#: ../tutorials/networking/webrtc.rst:150
msgid "This local signaling server is supposed to be used as a :ref:`singleton <doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""

#: ../tutorials/networking/webrtc.rst:184
msgid "Then you can use it like this:"
msgstr ""

#: ../tutorials/networking/webrtc.rst:205
msgid "This will print something similar to this:"
msgstr ""

#: ../tutorials/networking/webrtc.rst:213
msgid "Remote signaling with WebSocket"
msgstr ""

#: ../tutorials/networking/webrtc.rst:215
msgid "A more advanced demo using WebSocket for signaling peers and :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot demo projects <https://github.com/godotengine/godot-demo-projects>`_ under `networking/webrtc_signaling`."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
