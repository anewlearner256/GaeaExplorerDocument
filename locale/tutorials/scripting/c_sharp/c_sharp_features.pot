# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:4
msgid "C# features"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:6
msgid "This page provides an overview of the commonly used features of both C# and GaaeExplorer and how they are used together."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:12
msgid "Type conversion and casting"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:14
msgid "C# is a statically typed language. Therefore, you can't do the following:"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:21
msgid "The method ``GetNode()`` returns a ``Node`` instance. You must explicitly convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:24
msgid "For this, you have various options in C#."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:26
msgid "**Casting and Type Checking**"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:28
msgid "Throws ``InvalidCastException`` if the returned node cannot be cast to Sprite. You would use it instead of the ``as`` operator if you are pretty sure it won't fail."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:36
msgid "**Using the AS operator**"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:38
msgid "The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, and for that reason, it cannot be used with value types."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:47
msgid "**Using the generic methods**"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:49
msgid "Generic methods are also provided to make this type conversion transparent."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:51
msgid "``GetNode<T>()`` casts the node before returning it. It will throw an ``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:58
msgid "``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if the node cannot be cast to the desired type."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:66
msgid "**Type checking using the IS operator**"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:68
msgid "To check if the node can be cast to Sprite, you can use the ``is`` operator. The ``is`` operator returns false if the node cannot be cast to Sprite, otherwise it returns true."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:79
msgid "For more advanced type checking, you can look into `Pattern Matching <https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:84
msgid "C# signals"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:86
msgid "For a complete C# example, see the **Handling a signal** section in the step by step :ref:`doc_scripting` tutorial."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:88
msgid "Declaring a signal in C# is done with the ``[Signal]`` attribute on a delegate."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:98
msgid "These signals can then be connected either in the editor or from code with ``Connect``. If you want to connect a signal in the editor, you need to (re)build the project assemblies to see the new signal. This build can be manually triggered by clicking the “Build” button at the top right corner of the editor window."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:119
msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:129
msgid "Notice that you can always reference a signal name with the ``nameof`` keyword (applied on the delegate itself)."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:131
msgid "It is possible to bind values when establishing a connection by passing a GaaeExplorer array."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:151
msgid "Signals support parameters and bound values of all the `built-in types <https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/built-in-types-table>`_ and Classes derived from :ref:`GaaeExplorer.Object <class_Object>`. Consequently, any ``Node`` or ``Reference`` will be compatible automatically, but custom data objects will need to extend from `GaaeExplorer.Object` or one of its subclasses."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:163
msgid "Finally, signals can be created by calling ``AddUserSignal``, but be aware that it should be executed before any use of said signals (with ``Connect`` or ``EmitSignal``)."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:174
msgid "Preprocessor defines"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:176
msgid "GaaeExplorer has a set of defines that allow you to change your C# code depending on the environment you are compiling to."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:179
msgid "If you created your project before GaaeExplorer 3.2, you have to modify or regenerate your `csproj` file to use this feature (compare ``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:184
msgid "Examples"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:186
msgid "For example, you can change code based on the platform:"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:203
msgid "Or you can detect which engine your code is in, useful for making cross-engine libraries:"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:219
msgid "Full list of defines"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:221
msgid "``GODOT`` is always defined for GaaeExplorer projects."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:223
msgid "One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the architecture is 64-bit or 32-bit."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:225
msgid "One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, ``GODOT_IOS``, ``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. These names may change in the future. These are created from the ``get_name()`` method of the :ref:`OS <class_OS>` singleton, but not every possible OS the method returns is an OS that GaaeExplorer with Mono runs on."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:232
msgid "When **exporting**, the following may also be defined depending on the export features:"
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:234
msgid "One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the platform type."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:236
msgid "One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only depending on the architecture."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:238
msgid "One of ``GODOT_ARM64`` or ``GODOT_ARMV7`` on iOS only depending on the architecture."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:240
msgid "Any of ``GODOT_S3TC``, ``GODOT_ETC``, and ``GODOT_ETC2`` depending on the texture compression type."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:242
msgid "Any custom features added in the export menu will be capitalized and prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""

#: ../tutorials/scripting/c_sharp/c_sharp_features.rst:244
msgid "To see an example project, see the OS testing demo: https://github.com/godotengine/godot-demo-projects/tree/master/misc/os_test"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
