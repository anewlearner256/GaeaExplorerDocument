# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/scripting/scene_tree.rst:4
msgid "Using SceneTree"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:7
msgid "Introduction"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:9
msgid "In previous tutorials, everything revolved around the concept of nodes. Scenes are collections of nodes. They become active once they enter the *scene tree*."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:14
msgid "MainLoop"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:16
msgid "The way GaaeExplorer works internally is as follows. There is the :ref:`OS <class_OS>` class, which is the only instance that runs at the beginning. Afterwards, all drivers, servers, scripting languages, scene system, etc are loaded."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:21
msgid "When initialization is complete, :ref:`OS <class_OS>` needs to be supplied a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is internals working (you can check main/main.cpp file in the source code if you are ever interested to see how this works internally)."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:27
msgid "The user program, or game, starts in the MainLoop. This class has a few methods, for initialization, idle (frame-synchronized callback), fixed (physics-synchronized callback), and input. Again, this is low level and when making games in GaaeExplorer, writing your own MainLoop seldom makes sense."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:33
msgid "SceneTree"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:35
msgid "One of the ways to explain how GaaeExplorer works is that it's a high level game engine over a low level middleware."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:38
msgid "The scene system is the game engine, while the :ref:`OS <class_OS>` and servers are the low level API."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:41
msgid "The scene system provides its own main loop to OS, :ref:`SceneTree <class_SceneTree>`. This is automatically instanced and set when running a scene, no need to do any extra work."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:46
msgid "It's important to know that this class exists because it has a few important uses:"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:49
msgid "It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is added as a child when it's first opened to become part of the *Scene Tree* (more on that next)."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:52
msgid "It contains information about the groups and has the means to call all nodes in a group or get a list of them."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:54
msgid "It contains some global state functionality, such as setting pause mode or quitting the process."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:57
msgid "When a node is part of the Scene Tree, the :ref:`SceneTree <class_SceneTree>` singleton can be obtained by calling :ref:`Node.get_tree() <class_Node_method_get_tree>`."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:63
msgid "Root viewport"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:65
msgid "The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. From a node, it can be obtained in two different ways:"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:80
msgid "This node contains the main viewport. Anything that is a child of a :ref:`Viewport <class_Viewport>` is drawn inside of it by default, so it makes sense that the top of all nodes is always a node of this type otherwise nothing would be seen."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:85
msgid "While other viewports can be created in the scene (for split-screen effects and such), this one is the only one that is never created by the user. It's created automatically inside SceneTree."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:90
msgid "Scene tree"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:92
msgid "When a node is connected, directly or indirectly, to the root viewport, it becomes part of the *scene tree*."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:95
msgid "This means that as explained in previous tutorials, it will get the ``_enter_tree()`` and ``_ready()`` callbacks (as well as ``_exit_tree()``)."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:100
msgid "When nodes enter the *Scene Tree*, they become active. They get access to everything they need to process, get input, display 2D and 3D visuals, receive and send notifications, play sounds, etc. When they are removed from the *scene tree*, they lose these abilities."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:106
msgid "Tree order"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:108
msgid "Most node operations in GaaeExplorer, such as drawing 2D, processing, or getting notifications are done in tree order. This means that parents and siblings with a lower rank in the tree order will get notified before the current node."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:116
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:118
msgid "A scene is loaded from disk or created by scripting."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:119
msgid "The root node of that scene (only one root, remember?) is added as either a child of the \"root\" Viewport (from SceneTree), or to any child or grandchild of it."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:122
msgid "Every node of the newly added scene, will receive the \"enter_tree\" notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:125
msgid "An extra notification, \"ready\" ( _ready() callback in GDScript) is provided for convenience, when a node and all its children are inside the active scene."
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:128
msgid "When a scene (or part of it) is removed, they receive the \"exit scene\" notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:133
msgid "Changing current scene"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:135
msgid "After a scene is loaded, it is often desired to change this scene for another one. The simple way to do this is to use the :ref:`SceneTree.change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:153
msgid "Rather than using file paths, one can also use ready-made :ref:`PackedScene <class_PackedScene>` resources using the equivalent function :ref:`SceneTree.change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""

#: ../tutorials/scripting/scene_tree.rst:174
msgid "These are quick and useful ways to switch scenes but have the drawback that the game will stall until the new scene is loaded and running. At some point in the development of your game, it may be preferable to create proper loading screens with progress bar, animated indicators or thread (background) loading. This must be done manually using autoloads (see next chapter) and :ref:`doc_background_loading`."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
