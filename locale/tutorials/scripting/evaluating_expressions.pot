# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/scripting/evaluating_expressions.rst:4
msgid "Evaluating expressions"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:6
msgid "GaaeExplorer provides an :ref:`class_Expression` class you can use to evaluate expressions."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:8
msgid "An expression can be:"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:10
msgid "A mathematical expression such as ``(2 + 4) * 16/4.0``."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:11
msgid "A built-in method call like ``deg2rad(90)``."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:12
msgid "A method call on an user-provided script like ``update_health()``, if ``base_instance`` is set to a value other than ``null`` when calling :ref:`Expression.execute() <class_Expression_method_execute>`."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:18
msgid "The Expression class is independent from GDScript. It's available even if you compile GaaeExplorer with the GDScript module disabled."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:22
msgid "Basic usage"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:24
msgid "To evaluate a mathematical expression, use::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:31
msgid "The following operators are available:"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:34
msgid "Operator"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:34
msgid "Notes"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:36
msgid "Addition ``+``"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:36
msgid "Can also be used to concatenate strings and arrays: - ``\"hello\" + \" world\"`` = ``hello world`` - ``[1, 2] + [3, 4]`` = ``[1, 2, 3, 4]``"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:40
msgid "Subtraction (``-``)"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:42
msgid "Multiplication (``*``)"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:44
msgid "Division (``/``)"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:44
msgid "Performs and integer division if both operands are integers. If at least one of them is a floating-point number, returns a floating-point value."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:47
msgid "Modulo (``%``)"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:47
msgid "Returns the remainder of an integer division."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:50
msgid "Spaces around operators are optional. Also, keep in mind the usual `order of operations <https://en.wikipedia.org/wiki/Order_of_operations>`__ applies. Use parentheses to override the order of operations if needed."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:54
msgid "All the Variant types supported in GaaeExplorer can be used: integers, floating-point numbers, strings, arrays, dictionaries, colors, vectors, …"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:57
msgid "Arrays and dictionaries can be indexed like in GDScript::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:74
msgid "Passing variables to an expression"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:76
msgid "You can pass variables to an expression. These variables will then become available in the expression's \"context\" and will be substituted when used in the expression::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:89
msgid "Both the variable names and variable values **must** be specified as an array, even if you only define one variable. Also, variable names are **case-sensitive**."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:93
msgid "Setting a base instance for the expression"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:95
msgid "By default, an expression has a base instance of ``null``. This means the expression has no base instance associated to it."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:98
msgid "When calling :ref:`Expression.execute() <class_Expression_method_execute>`, you can set the value of the ``base_instance`` parameter to a specific object instance such as ``self``, another script instance or even a singleton::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:119
msgid "Associating a base instance allows doing the following:"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:121
msgid "Reference the instance's constants (``const``) in the expression."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:122
msgid "Reference the instance's member variables (``var``) in the expression."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:123
msgid "Call methods defined in the instance and use their return values in the expression."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:127
msgid "Setting a base instance to a value other than ``null`` allows referencing constants, member variables, and calling all methods defined in the script attached to the instance. Allowing users to enter expressions may allow cheating in your game, or may even introduce security vulnerabilities if you allow arbitrary clients to run expressions on other players' devices."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:134
msgid "Example script"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:136
msgid "The script below demonstrates what the Expression class is capable of::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:181
msgid "The output from the script will be::"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:199
msgid "Built-in functions"
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:201
msgid "Most methods available in the :ref:`class_@GDScript` scope are available in the Expression class, even if no base instance is bound to the expression. The same parameters and return types are available."
msgstr ""

#: ../tutorials/scripting/evaluating_expressions.rst:205
msgid "However, unlike GDScript, parameters are **always required** even if they're specified as being optional in the class reference. In contrast, this restriction on arguments doesn't apply to user-made functions when you bind a base instance to the expression."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
