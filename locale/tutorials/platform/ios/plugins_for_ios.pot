# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorials/platform/ios/plugins_for_ios.rst:4
msgid "Plugins for iOS"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:6
msgid "GaaeExplorer provides StoreKit, GameCenter, iCloud services and other plugins. They are using same model of asynchronous calls explained below."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:9
msgid "ARKit and Camera access are also provided as plugins."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:11
msgid "Latest updates, documentation and source code can be found at `GaaeExplorer iOS plugins repository <https://github.com/godotengine/godot-ios-plugins>`_"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:14
msgid "Accessing plugin singletons"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:16
msgid "To access plugin functionality, you first need to check that the plugin is exported and available by calling the `Engine.has_singleton()` function, which returns a registered singleton."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:20
msgid "Here's an example of how to do this in GDScript:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:40
msgid "Asynchronous methods"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:42
msgid "When requesting an asynchronous operation, the method will look like this:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:49
msgid "The parameter will usually be a Dictionary, with the information necessary to make the request, and the call will have two phases. First, the method will immediately return an Error value. If the Error is not 'OK', the call operation is completed, with an error probably caused locally (no internet connection, API incorrectly configured, etc). If the error value is 'OK', a response event will be produced and added to the 'pending events' queue. Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:76
msgid "Remember that when a call returns OK, the API will *always* produce an event through the pending_event interface, even if it's an error, or a network timeout, etc. You should be able to, for example, safely block the interface waiting for a reply from the server. If any of the APIs don't behave this way it should be treated as a bug."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:82
msgid "The pending event interface consists of two methods:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:84
msgid "``get_pending_event_count()`` Returns the number of pending events on the queue."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:87
msgid "``Variant pop_pending_event()`` Pops the first event from the queue and returns it."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:91
msgid "Store Kit"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:93
msgid "Implemented in `GaaeExplorer iOS InAppStore plugin <https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/inappstore/in_app_store.mm>`_."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:95
msgid "The Store Kit API is accessible through the ``InAppStore`` singleton. It is initialized automatically."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:98
msgid "The following methods are available and documented below:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:116
msgid "``purchase``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:118
msgid "Purchases a product ID through the Store Kit API. You have to call ``finish_transaction(product_id)`` once you receive a successful response or call ``set_auto_finish_transaction(true)`` prior to calling ``purchase()``. These two methods ensure the transaction is completed."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:123
#: ../tutorials/platform/ios/plugins_for_ios.rst:163
#: ../tutorials/platform/ios/plugins_for_ios.rst:216
#: ../tutorials/platform/ios/plugins_for_ios.rst:233
#: ../tutorials/platform/ios/plugins_for_ios.rst:306
#: ../tutorials/platform/ios/plugins_for_ios.rst:350
#: ../tutorials/platform/ios/plugins_for_ios.rst:495
msgid "Parameters"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:125
msgid "Takes a dictionary as a parameter, with one field, ``product_id``, a string with your product ID. Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:133
#: ../tutorials/platform/ios/plugins_for_ios.rst:173
#: ../tutorials/platform/ios/plugins_for_ios.rst:197
#: ../tutorials/platform/ios/plugins_for_ios.rst:275
#: ../tutorials/platform/ios/plugins_for_ios.rst:320
#: ../tutorials/platform/ios/plugins_for_ios.rst:367
#: ../tutorials/platform/ios/plugins_for_ios.rst:396
#: ../tutorials/platform/ios/plugins_for_ios.rst:426
#: ../tutorials/platform/ios/plugins_for_ios.rst:458
#: ../tutorials/platform/ios/plugins_for_ios.rst:515
msgid "Response event"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:135
#: ../tutorials/platform/ios/plugins_for_ios.rst:175
#: ../tutorials/platform/ios/plugins_for_ios.rst:277
#: ../tutorials/platform/ios/plugins_for_ios.rst:322
#: ../tutorials/platform/ios/plugins_for_ios.rst:369
#: ../tutorials/platform/ios/plugins_for_ios.rst:398
#: ../tutorials/platform/ios/plugins_for_ios.rst:428
#: ../tutorials/platform/ios/plugins_for_ios.rst:460
#: ../tutorials/platform/ios/plugins_for_ios.rst:517
msgid "The response event will be a dictionary with the following fields:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:137
#: ../tutorials/platform/ios/plugins_for_ios.rst:279
#: ../tutorials/platform/ios/plugins_for_ios.rst:324
#: ../tutorials/platform/ios/plugins_for_ios.rst:371
#: ../tutorials/platform/ios/plugins_for_ios.rst:400
#: ../tutorials/platform/ios/plugins_for_ios.rst:430
#: ../tutorials/platform/ios/plugins_for_ios.rst:462
msgid "On error:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:147
#: ../tutorials/platform/ios/plugins_for_ios.rst:290
#: ../tutorials/platform/ios/plugins_for_ios.rst:335
#: ../tutorials/platform/ios/plugins_for_ios.rst:381
#: ../tutorials/platform/ios/plugins_for_ios.rst:410
#: ../tutorials/platform/ios/plugins_for_ios.rst:440
#: ../tutorials/platform/ios/plugins_for_ios.rst:472
msgid "On success:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:158
msgid "``request_product_info``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:160
msgid "Requests the product info on a list of product IDs."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:165
msgid "Takes a dictionary as a parameter, with a single ``product_ids`` key to which a string array of product IDs is assigned. Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:191
msgid "``restore_purchases``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:193
msgid "Restores previously made purchases on user's account. This will create response events for each previously purchased product ID."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:199
msgid "The response events will be dictionaries with the following fields:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:210
msgid "``set_auto_finish_transaction``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:212
msgid "If set to ``true``, once a purchase is successful, your purchase will be finalized automatically. Call this method prior to calling ``purchase()``."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:218
msgid "Takes a boolean as a parameter which specifies if purchases should be automatically finalized. Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:226
msgid "``finish_transaction``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:228
msgid "If you don't want transactions to be automatically finalized, call this method after you receive a successful purchase response."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:235
msgid "Takes a string ``product_id`` as an argument. ``product_id`` specifies what product to finalize the purchase on. Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:243
msgid "Game Center"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:245
msgid "Implemented in `GaaeExplorer iOS GameCenter plugin <https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm>`_."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:247
msgid "The Game Center API is available through the \"GameCenter\" singleton. It has the following methods:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:262
msgid "and the pending events interface:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:270
msgid "``authenticate``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:272
msgid "Authenticates a user in Game Center."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:301
msgid "``post_score``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:303
msgid "Posts a score to a Game Center leaderboard."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:308
msgid "Takes a dictionary as a parameter, with two fields:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:310
msgid "``score`` a float number"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:311
msgid "``category`` a string with the category name"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:313
#: ../tutorials/platform/ios/plugins_for_ios.rst:360
msgid "Example:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:345
msgid "``award_achievement``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:347
msgid "Modifies the progress of a Game Center achievement."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:352
msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:354
msgid "``name`` (string) the achievement name"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:355
msgid "``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to ``GKAchievement::percentComplete``)"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:357
msgid "``show_completion_banner`` (bool) whether Game Center should display an achievement banner at the top of the screen"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:391
msgid "``reset_achievements``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:393
msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:420
msgid "``request_achievements``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:422
msgid "Request all the Game Center achievements the player has made progress on. The function takes no parameters."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:452
msgid "``request_achievement_descriptions``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:454
msgid "Request the descriptions of all existing Game Center achievements regardless of progress. The function takes no parameters."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:489
msgid "``show_game_center``"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:491
msgid "Displays the built in Game Center overlay showing leaderboards, achievements, and challenges."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:497
msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:499
msgid "``view`` (string) (optional) the name of the view to present. Accepts \"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults to \"default\"."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:502
msgid "``leaderboard_name`` (string) (optional) the name of the leaderboard to present. Only used when \"view\" is \"leaderboards\" (or \"default\" is configured to show leaderboards). If not specified, Game Center will display the aggregate leaderboard."
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:507
msgid "Examples:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:519
msgid "On close:"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:529
msgid "Multi-platform games"
msgstr ""

#: ../tutorials/platform/ios/plugins_for_ios.rst:531
msgid "When working on a multi-platform game, you won't always have the \"GameCenter\" singleton available (for example when running on PC or Android). Because the gdscript compiler looks up the singletons at compile time, you can't just query the singletons to see and use what you need inside a conditional block, you need to also define them as valid identifiers (local variable or class member). This is an example of how to work around this in a class:"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
