# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../development/compiling/compiling_for_android.rst:4
msgid "Compiling for Android"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:10
msgid "This page describes how to compile Android export template binaries from source. If you're looking to export your project to Android instead, read :ref:`doc_exporting_for_android`."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:14
msgid "Note"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:16
msgid "In most cases, using the built-in deployer and export templates is good enough. Compiling the Android APK manually is mostly useful for custom builds or custom packages for the deployer."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:20
msgid "Also, you still need to follow the steps mentioned in the :ref:`doc_exporting_for_android` tutorial before attempting to build a custom export template."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:25
msgid "Requirements"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:27
msgid "For compiling under Windows, Linux or macOS, the following is required:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:29
msgid "`Python 3.5+ <https://www.python.org/downloads/>`_."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:30
msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:31
msgid "`Android SDK <https://developer.android.com/studio/#command-tools>`_ (command-line tools are sufficient)."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:34
msgid "Required SDK components will be automatically installed."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:35
msgid "On Linux, **do not use an Android SDK provided by your distribution's repositories as it will often be outdated**."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:38
msgid "Gradle (will be downloaded and installed automatically if missing)."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:39
msgid "JDK 11 (either OpenJDK or Oracle JDK)."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:41
msgid "You can download a build from `ojdkbuild <https://github.com/ojdkbuild/ojdkbuild>`_."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:43
msgid "To get the GaaeExplorer source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:46
msgid "For a general overview of SCons usage for GaaeExplorer, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:52
msgid "Setting up the buildsystem"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:54
msgid "Set the environment variable ``ANDROID_SDK_ROOT`` to point to the Android SDK. If you downloaded the Android command-line tools, this would be the folder where you extracted the contents of the ZIP archive."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:58
msgid "Install the necessary SDK components in this folder:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:60
msgid "Accept the SDK component licenses by running the following command where ``android_sdk_path`` is the path to the Android SDK, then answering all the prompts with ``y``:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:67
msgid "Complete setup by running the following command where ``android_sdk_path`` is the path to the Android SDK."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:73
msgid "To set the environment variable on Windows, press :kbd:`Windows + R`, type \"control system\", then click on **Advanced system settings** in the left pane, then click on **Environment variables** on the window that appears."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:77
msgid "To set the environment variable on Linux or macOS, use ``export ANDROID_SDK_ROOT=/path/to/android-sdk`` where ``/path/to/android-sdk`` points to the root of the SDK directories."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:82
msgid "Building the export templates"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:84
msgid "GaaeExplorer needs two export templates for Android: the optimized \"release\" template (``android_release.apk``) and the debug template (``android_debug.apk``). As Google will require all APKs to include ARMv8 (64-bit) libraries starting from August 2019, the commands below will build an APK containing both ARMv7 and ARMv8 libraries."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:90
msgid "Compiling the standard export templates is done by calling SCons from the GaaeExplorer root directory with the following arguments:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:93
msgid "Release template (used when exporting with **Debugging Enabled** unchecked)"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:106
msgid "The resulting APK will be located at ``bin/android_release.apk``."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:108
msgid "Debug template (used when exporting with **Debugging Enabled** checked)"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:121
msgid "The resulting APK will be located at ``bin/android_debug.apk``."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:124
msgid "Adding support for x86 devices"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:126
msgid "If you also want to include support for x86 and x86-64 devices, run the SCons command a third and fourth time with the ``android_arch=x86``, and ``android_arch=x86_64`` arguments before building the APK with Gradle. For example, for the release template:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:144
msgid "This will create a fat binary that works on all platforms. The final APK size of exported projects will depend on the platforms you choose to support when exporting; in other words, unused platforms will be removed from the APK."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:150
msgid "Cleaning the generated export templates"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:152
msgid "You can use the following commands to remove the generated export templates:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:164
msgid "Using the export templates"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:166
msgid "GaaeExplorer needs release and debug APKs that were compiled against the same version/commit as the editor. If you are using official binaries for the editor, make sure to install the matching export templates, or build your own from the same version."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:171
msgid "When exporting your game, GaaeExplorer opens the APK, changes a few things inside and adds your files."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:175
msgid "Installing the templates"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:177
msgid "The newly-compiled templates (``android_debug.apk`` and ``android_release.apk``) must be copied to GaaeExplorer's templates folder with their respective names. The templates folder can be located in:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:181
msgid "Windows: ``%APPDATA%\\GaaeExplorer\\templates\\<version>\\``"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:182
msgid "Linux: ``$HOME/.local/share/godot/templates/<version>/``"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:183
msgid "macOS: ``$HOME/Library/Application Support/GaaeExplorer/templates/<version>/``"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:185
msgid "``<version>`` is of the form ``major.minor[.patch].status`` using values from ``version.py`` in your GaaeExplorer source repository (e.g. ``3.0.5.stable`` or ``3.1.dev``). You also need to write this same version string to a ``version.txt`` file located next to your export templates."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:192
msgid "However, if you are writing your custom modules or custom C++ code, you might instead want to configure your APKs as custom export templates here:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:198
msgid "You don't even need to copy them, you can just reference the resulting file in the ``bin\\`` directory of your GaaeExplorer source folder, so that the next time you build you will automatically have the custom templates referenced."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:204
msgid "Troubleshooting"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:207
msgid "Platform doesn't appear in SCons"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:209
msgid "Double-check that you've set the ``ANDROID_SDK_ROOT`` environment variable. This is required for the platform to appear in SCons' list of detected platforms. See :ref:`Setting up the buildsystem <doc_android_setting_up_the_buildsystem>` for more information."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:216
msgid "Application not installed"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:218
msgid "Android might complain the application is not correctly installed. If so:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:221
msgid "Check that the debug keystore is properly generated."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:222
msgid "Check that the jarsigner executable is from JDK 8."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:224
msgid "If it still fails, open a command line and run `logcat <https://developer.android.com/studio/command-line/logcat>`_:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:230
msgid "Then check the output while the application is installed; the error message should be presented there. Seek assistance if you can't figure it out."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:235
msgid "Application exits immediately"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:237
msgid "If the application runs but exits immediately, this might be due to one of the following reasons:"
msgstr ""

#: ../development/compiling/compiling_for_android.rst:240
msgid "Make sure to use export templates that match your editor version; if you use a new GaaeExplorer version, you *have* to update the templates too."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:242
msgid "``libgodot_android.so`` is not in ``libs/<android_arch>/`` where ``<android_arch>`` is the device's architecture."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:244
msgid "The device's architecture does not match the exported one(s). Make sure your templates were built for that device's architecture, and that the export settings included support for that architecture."
msgstr ""

#: ../development/compiling/compiling_for_android.rst:248
msgid "In any case, ``adb logcat`` should also show the cause of the error."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
