# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../development/compiling/compiling_for_uwp.rst:4
msgid "Compiling for Universal Windows Platform"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:10
msgid "This page describes how to compile UWP export template binaries from source. If you're looking to export your project to UWP instead, read :ref:`doc_exporting_for_uwp`."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:14
msgid "Requirements"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:16
msgid "SCons 3.0+ (see :ref:`doc_compiling_for_windows` for more details)."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:17
msgid "Visual Studio 2017 or later. See :ref:`doc_compiling_for_windows` about the caveats of installing it and the various prompts."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:19
msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:20
msgid "`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` (default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:24
msgid "The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` branch has been cleared out."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:27
msgid "As a temporary workaround however, it is still possible to download an older state of the source code via commit `c61d048 <https://github.com/microsoft/angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:31
msgid "This page will eventually be updated in the future to reflect the new build instructions."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:34
msgid "To get the GaaeExplorer source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:37
msgid "For a general overview of SCons usage for GaaeExplorer, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:41
msgid "Compiling"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:43
msgid "You need to open a proper Visual Studio prompt for the target architecture you want to build. Check :ref:`doc_compiling_for_windows` to see how these prompts work."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:47
msgid "There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with ``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:51
msgid "Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE source code. The build process will also build ANGLE to produce the required DLLs for the selected architecture."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:55
msgid "Once you're set, run the SCons command similarly to the other platforms::"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:60
msgid "Creating UWP export templates"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:62
msgid "To export using the editor you need to properly build package the templates. You need all three architectures with ``debug`` and ``release`` templates to be able to export."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:66
msgid "Open the command prompt for one architecture and run SCons twice (once for each target)::"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:72
msgid "Repeat for the other architectures."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:74
msgid "In the end your ``bin`` folder will have the ``.exe`` binaries with a name like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/arch)."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:78
msgid "Copy one of these to ``misc/dist/uwp_template`` inside the GaaeExplorer source folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, ``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, putting them along with the executable."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:84
msgid "Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting Zip according to the target/architecture of the template::"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:94
msgid "Move those templates to the ``[versionstring]\\templates`` folder in GaaeExplorer settings path, where `versionstring` is the version of GaaeExplorer you have compiled the export templates for - e.g. `3.0.alpha` for the alpha version of GaaeExplorer 3. If you don't want to replace the templates, you can set the \"Custom Package\" property in the export window."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:101
msgid "Running UWP apps with Visual Studio"
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:103
msgid "If you want to debug the UWP port or simply run your apps without packaging and signing, you can deploy and launch them using Visual Studio. It might be the easiest way if you are testing on a device such as a Windows Phone or an Xbox One."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:108
msgid "Within the ANGLE source folder, open ``templates`` and double-click the ``install.bat`` script file. This will install the Visual Studio project templates for ANGLE apps."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:112
msgid "If you have not built GaaeExplorer yet, open the ``winrt/10/src/angle.sln`` solution from the ANGLE source and build it to Release/Win32 target. You may also need to build it for ARM if you plan to run on a device. You can also use MSBuild if you're comfortable with the command line."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:117
msgid "Create a new Windows App project using the \"App for OpenGL ES (Windows Universal)\" project template, which can be found under the ``Visual C++/Windows/Universal`` category."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:121
msgid "This is a base project with the ANGLE dependencies already set up. However, by default it picks the debug version of the DLLs which usually have poor performance. So in the \"Binaries\" filter, click in each of the DLLs there and in the \"Properties\" window and change the relative path from ``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:127
msgid "In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to the GaaeExplorer executable for UWP you have. In the \"Properties\" window, set \"Content\" to ``True`` so it's included in the project."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:131
msgid "Right-click the ``Package.appxmanifest`` file and select \"Open With... > XML (Text) Editor\". In the ``Package/Applications/Application`` element, replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to ``godot.uwp.exe`` (or whatever your GaaeExplorer executable is called). Also change the ``EntryPoint`` attribute to ``GaaeExplorerUWP.App``. This will ensure that the GaaeExplorer executable is correctly called when the app starts."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:138
msgid "Create a folder (*not* a filter) called ``game`` in your Visual Studio project folder and there you can put either a ``data.pck`` file or your GaaeExplorer project files. After that, make sure to include it all with the \"Add > Existing Item\" command and set their \"Content\" property to ``True`` so they're copied to the app."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:144
msgid "To ease the workflow, you can open the \"Solution Properties\" and in the \"Configuration\" section untick the \"Build\" option for the app. You still have to build it at least once to generate some needed files, you can do so by right-clicking the project (*not* the solution) in the \"Solution Explorer\" and selecting \"Build\"."
msgstr ""

#: ../development/compiling/compiling_for_uwp.rst:150
msgid "Now you can just run the project and your app should open. You can also use the \"Start Without Debugging\" option from the \"Debug\" menu (or press :kbd:`Ctrl + F5`) to make it launch faster."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
