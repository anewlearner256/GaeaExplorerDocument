# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../development/compiling/compiling_for_x11.rst:4
msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:10
msgid "This page describes how to compile Linux editor and export template binaries from source. If you're looking to export your project to Linux instead, read :ref:`doc_exporting_for_linux`."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:14
msgid "Requirements"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:16
msgid "For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:19
msgid "GCC 7+ or Clang 6+."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:20
msgid "Python 3.5+."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:21
msgid "SCons 3.0+ build system. If your distribution uses Python 2 by default, or you are using a version of SCons prior to 3.1.2, you will need to change the version of Python that SCons uses by changing the shebang (the first line) of the SCons script file to ``#! /usr/bin/python3``. Use the command ``which scons`` to find the location of the SCons script file."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:26
msgid "pkg-config (used to detect the dependencies below)."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:27
msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:28
msgid "MesaGL development libraries."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:29
msgid "ALSA development libraries."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:30
msgid "PulseAudio development libraries."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:31
msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:32
msgid "*Optional* - yasm (for WebM SIMD optimizations)."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:34
msgid "To get the GaaeExplorer source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:37
msgid "For a general overview of SCons usage for GaaeExplorer, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:41
msgid "Distro-specific one-liners"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:43
msgid "**Alpine Linux**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:48
msgid "**Arch Linux**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:53
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:58
msgid "**Fedora**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:64
msgid "**FreeBSD**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:70
msgid "**Gentoo**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:75
msgid "**Mageia**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:81
msgid "**OpenBSD**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:85
msgid "**openSUSE**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:90
msgid "**NetBSD**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:94
msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:96
msgid "**Solus**"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:103
msgid "Compiling"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:105
msgid "Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:111
msgid "If all goes well, the resulting binary executable will be placed in the \"bin\" subdirectory. This executable file contains the whole engine and runs without any dependencies. Executing it will bring up the project manager."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:118
msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:124
msgid "Using Clang appears to be a requirement for OpenBSD, otherwise fonts would not build."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:127
msgid "If you are compiling GaaeExplorer for production use, then you can make the final executable smaller and faster by adding the SCons option ``target=release_debug``."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:131
msgid "If you are compiling GaaeExplorer with GCC, you can make the binary even smaller and faster by adding the SCons option ``use_lto=yes``. As link-time optimization is a memory-intensive process, this will require about 7 GB of available RAM while compiling."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:136
msgid "If you want to use separate editor settings for your own GaaeExplorer builds and official releases, you can enable :ref:`doc_data_paths_self_contained_mode` by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:142
msgid "Compiling a headless/server build"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:144
msgid "To compile a *headless* build which provides editor functionality to export projects in an automated manner, use::"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:149
msgid "To compile a debug *server* build which can be used with :ref:`remote debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:154
msgid "To compile a *server* build which is optimized to run dedicated game servers, use::"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:160
msgid "Building export templates"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:162
msgid "Linux binaries usually won't run on distributions that are older than the distribution they were built on. If you wish to distribute binaries that work on most distributions, you should build them on an old distribution such as Ubuntu 16.04. You can use a virtual machine or a container to set up a suitable build environment."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:170
msgid "To build X11 (Linux, \\*BSD) export templates, run the build system with the following parameters:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:173
msgid "(32 bits)"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:180
msgid "(64 bits)"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:187
msgid "Note that cross-compiling for the opposite bits (64/32) as your host platform is not always straight-forward and might need a chroot environment."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:190
msgid "To create standard export templates, the resulting files must be copied to:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:196
msgid "and named like this (even for \\*BSD which is seen as \"Linux X11\" by GaaeExplorer):"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:205
msgid "However, if you are writing your custom modules or custom C++ code, you might instead want to configure your binaries as custom export templates here:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:211
msgid "You don't even need to copy them, you can just reference the resulting files in the ``bin/`` directory of your GaaeExplorer source folder, so the next time you build, you automatically have the custom templates referenced."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:216
msgid "Using Clang and LLD for faster development"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:218
msgid "You can also use Clang and LLD to build GaaeExplorer. This has two upsides compared to the default GCC + GNU ld setup:"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:221
msgid "LLD links GaaeExplorer significantly faster compared to GNU ld or gold. This leads to faster iteration times."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:223
msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:225
msgid "To do so, install Clang and the ``lld`` package from your distribution's package manager then use the following SCons command::"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:230
msgid "After the build is completed, a new binary with a ``.llvm`` suffix will be created in the ``bin/`` folder."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:233
msgid "It's still recommended to use GCC for production builds as they can be compiled using link-time optimization, making the resulting binaries smaller and faster."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:237
msgid "Using Pyston for faster development"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:239
msgid "You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a JIT-enabled implementation of the Python language (which SCons is written in). It is currently only compatible with Linux. Pyston can speed up incremental builds significantly, often by a factor between 1.5× and 2×. Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:245
msgid "Download the `latest portable Pyston release <https://github.com/pyston/pyston/releases/latest>`__."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:246
msgid "Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/opt/pyston/`` (create folders as needed)."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:247
msgid "Use ``cd`` to reach the extracted Pyston folder from a terminal, then run ``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:249
msgid "To make SCons via Pyston easier to run, create a symbolic link of its wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:254
msgid "Instead of running ``scons <build arguments>``, run ``pyston-scons <build arguments>`` to compile GaaeExplorer."
msgstr ""

#: ../development/compiling/compiling_for_x11.rst:257
msgid "If you can't run ``pyston-scons`` after creating the symbolic link, make sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment variable."
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
