# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019-2023, the Gaeaway community 
# This file is distributed under the same license as the GaeaExplorer Web4.0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GaeaExplorer Web4.0 吉嘉时空数字孪生平台\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-27 17:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../development/cpp/object_class.rst:4
msgid "Object class"
msgstr ""

#: ../development/cpp/object_class.rst:8
msgid "This page describes the C++ implementation of objects in GaaeExplorer. Looking for the Object class reference? :ref:`Have a look here. <class_Object>`"
msgstr ""

#: ../development/cpp/object_class.rst:12
msgid "General definition"
msgstr ""

#: ../development/cpp/object_class.rst:14
msgid ":ref:`Object <class_object>` is the base class for almost everything. Most classes in GaaeExplorer inherit directly or indirectly from it. Objects provide reflection and editable properties, and declaring them is a matter of using a single macro like this."
msgstr ""

#: ../development/cpp/object_class.rst:26
msgid "This makes Objects gain a lot of functionality, like for example"
msgstr ""

#: ../development/cpp/object_class.rst:36
#: ../development/cpp/object_class.rst:94
#: ../development/cpp/object_class.rst:266
#: ../development/cpp/object_class.rst:282
#: ../development/cpp/object_class.rst:303
#: ../development/cpp/object_class.rst:322
msgid "References:"
msgstr ""

#: ../development/cpp/object_class.rst:38
msgid "`core/object.h <https://github.com/godotengine/godot/blob/3.x/core/object.h>`__"
msgstr ""

#: ../development/cpp/object_class.rst:41
msgid "Registering an Object"
msgstr ""

#: ../development/cpp/object_class.rst:43
msgid "ClassDB is a static class that holds the entire list of registered classes that inherit from Object, as well as dynamic bindings to all their methods properties and integer constants."
msgstr ""

#: ../development/cpp/object_class.rst:47
msgid "Classes are registered by calling:"
msgstr ""

#: ../development/cpp/object_class.rst:53
msgid "Registering it will allow the class to be instanced by scripts, code, or creating them again when deserializing."
msgstr ""

#: ../development/cpp/object_class.rst:56
msgid "Registering as virtual is the same but it can't be instanced."
msgstr ""

#: ../development/cpp/object_class.rst:62
msgid "Object-derived classes can override the static function ``static void _bind_methods()``. When one class is registered, this static function is called to register all the object methods, properties, constants, etc. It's only called once. If an Object derived class is instanced but has not been registered, it will be registered as virtual automatically."
msgstr ""

#: ../development/cpp/object_class.rst:69
msgid "Inside ``_bind_methods``, there are a couple of things that can be done. Registering functions is one:"
msgstr ""

#: ../development/cpp/object_class.rst:76
msgid "Default values for arguments can be passed in reverse order:"
msgstr ""

#: ../development/cpp/object_class.rst:82
msgid "``D_METHOD`` is a macro that converts \"methodname\" to a StringName for more efficiency. Argument names are used for introspection, but when compiling on release, the macro ignores them, so the strings are unused and optimized away."
msgstr ""

#: ../development/cpp/object_class.rst:87
msgid "Check ``_bind_methods`` of Control or Object for more examples."
msgstr ""

#: ../development/cpp/object_class.rst:89
msgid "If just adding modules and functionality that is not expected to be documented as thoroughly, the ``D_METHOD()`` macro can safely be ignored and a string passing the name can be passed for brevity."
msgstr ""

#: ../development/cpp/object_class.rst:96
msgid "`core/class_db.h <https://github.com/godotengine/godot/blob/3.x/core/class_db.h>`__"
msgstr ""

#: ../development/cpp/object_class.rst:99
msgid "Constants"
msgstr ""

#: ../development/cpp/object_class.rst:101
msgid "Classes often have enums such as:"
msgstr ""

#: ../development/cpp/object_class.rst:110
msgid "For these to work when binding to methods, the enum must be declared convertible to int, for this a macro is provided:"
msgstr ""

#: ../development/cpp/object_class.rst:117
msgid "The constants can also be bound inside ``_bind_methods``, by using:"
msgstr ""

#: ../development/cpp/object_class.rst:125
msgid "Properties (set/get)"
msgstr ""

#: ../development/cpp/object_class.rst:127
msgid "Objects export properties, properties are useful for the following:"
msgstr ""

#: ../development/cpp/object_class.rst:129
msgid "Serializing and deserializing the object."
msgstr ""

#: ../development/cpp/object_class.rst:130
msgid "Creating a list of editable values for the Object derived class."
msgstr ""

#: ../development/cpp/object_class.rst:132
msgid "Properties are usually defined by the PropertyInfo() class. Usually constructed as:"
msgstr ""

#: ../development/cpp/object_class.rst:139
msgid "For example:"
msgstr ""

#: ../development/cpp/object_class.rst:145
msgid "This is an integer property, named \"amount\", hint is a range, range goes from 0 to 49 in steps of 1 (integers). It is only usable for the editor (edit value visually) but won't be serialized."
msgstr ""

#: ../development/cpp/object_class.rst:149
msgid "Another example:"
msgstr ""

#: ../development/cpp/object_class.rst:155
msgid "This is a string property, can take any string but the editor will only allow the defined hint ones. Since no usage flags were specified, the default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR."
msgstr ""

#: ../development/cpp/object_class.rst:159
msgid "There are plenty of hints and usage flags available in object.h, give them a check."
msgstr ""

#: ../development/cpp/object_class.rst:162
msgid "Properties can also work like C# properties and be accessed from script using indexing, but this usage is generally discouraged, as using functions is preferred for legibility. Many properties are also bound with categories, such as \"animation/frame\" which also make indexing impossible unless using operator []."
msgstr ""

#: ../development/cpp/object_class.rst:168
msgid "From ``_bind_methods()``, properties can be created and bound as long as set/get functions exist. Example:"
msgstr ""

#: ../development/cpp/object_class.rst:175
msgid "This creates the property using the setter and the getter."
msgstr ""

#: ../development/cpp/object_class.rst:180
msgid "Binding properties using ``_set``/``_get``/``_get_property_list``"
msgstr ""

#: ../development/cpp/object_class.rst:182
msgid "An additional method of creating properties exists when more flexibility is desired (i.e. adding or removing properties on context)."
msgstr ""

#: ../development/cpp/object_class.rst:185
msgid "The following functions can be overridden in an Object derived class, they are NOT virtual, DO NOT make them virtual, they are called for every override and the previous ones are not invalidated (multilevel call)."
msgstr ""

#: ../development/cpp/object_class.rst:197
msgid "This is also a little less efficient since ``p_property`` must be compared against the desired names in serial order."
msgstr ""

#: ../development/cpp/object_class.rst:201
msgid "Dynamic casting"
msgstr ""

#: ../development/cpp/object_class.rst:203
msgid "GaaeExplorer provides dynamic casting between Object-derived classes, for example:"
msgstr ""

#: ../development/cpp/object_class.rst:213
msgid "If cast fails, NULL is returned. This system uses RTTI, but it also works fine (although a bit slower) when RTTI is disabled. This is useful on platforms where a small binary size is ideal, such as HTML5 or consoles (with low memory footprint)."
msgstr ""

#: ../development/cpp/object_class.rst:219
msgid "Signals"
msgstr ""

#: ../development/cpp/object_class.rst:221
msgid "Objects can have a set of signals defined (similar to Delegates in other languages). Connecting to them is rather easy:"
msgstr ""

#: ../development/cpp/object_class.rst:230
msgid "The method ``_node_entered_tree`` must be registered to the class using ``ClassDB::bind_method`` (explained before)."
msgstr ""

#: ../development/cpp/object_class.rst:233
msgid "Adding signals to a class is done in ``_bind_methods``, using the ``ADD_SIGNAL`` macro, for example:"
msgstr ""

#: ../development/cpp/object_class.rst:241
msgid "Notifications"
msgstr ""

#: ../development/cpp/object_class.rst:243
msgid "All objects in GaaeExplorer have a :ref:`_notification <class_Object_method__notification>` method that allows it to respond to engine level callbacks that may relate to it. More information can be found on the :ref:`doc_godot_notifications` page."
msgstr ""

#: ../development/cpp/object_class.rst:248
msgid "References"
msgstr ""

#: ../development/cpp/object_class.rst:250
msgid ":ref:`Reference <class_reference>` inherits from Object and holds a reference count. It is the base for reference counted object types. Declaring them must be done using Ref<> template. For example:"
msgstr ""

#: ../development/cpp/object_class.rst:262
msgid "``myref`` is reference counted. It will be freed when no more Ref<> templates point to it."
msgstr ""

#: ../development/cpp/object_class.rst:268
msgid "`core/reference.h <https://github.com/godotengine/godot/blob/3.x/core/reference.h>`__"
msgstr ""

#: ../development/cpp/object_class.rst:271
msgid "Resources:"
msgstr ""

#: ../development/cpp/object_class.rst:273
msgid ":ref:`Resource <class_resource>` inherits from Reference, so all resources are reference counted. Resources can optionally contain a path, which reference a file on disk. This can be set with ``resource.set_path(path)``. This is normally done by the resource loader though. No two different resources can have the same path, attempt to do so will result in an error."
msgstr ""

#: ../development/cpp/object_class.rst:279
msgid "Resources without a path are fine too."
msgstr ""

#: ../development/cpp/object_class.rst:284
msgid "`core/resource.h <https://github.com/godotengine/godot/blob/3.x/core/resource.h>`__"
msgstr ""

#: ../development/cpp/object_class.rst:287
msgid "Resource loading"
msgstr ""

#: ../development/cpp/object_class.rst:289
msgid "Resources can be loaded with the ResourceLoader API, like this:"
msgstr ""

#: ../development/cpp/object_class.rst:295
msgid "If a reference to that resource has been loaded previously and is in memory, the resource loader will return that reference. This means that there can be only one resource loaded from a file referenced on disk at the same time."
msgstr ""

#: ../development/cpp/object_class.rst:300
msgid "resourceinteractiveloader (TODO)"
msgstr ""

#: ../development/cpp/object_class.rst:305
msgid "`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/3.x/core/io/resource_loader.h>`__"
msgstr ""

#: ../development/cpp/object_class.rst:308
msgid "Resource saving"
msgstr ""

#: ../development/cpp/object_class.rst:310
msgid "Saving a resource can be done with the resource saver API:"
msgstr ""

#: ../development/cpp/object_class.rst:316
msgid "Instance will be saved. Sub resources that have a path to a file will be saved as a reference to that resource. Sub resources without a path will be bundled with the saved resource and assigned sub-IDs, like ``res://someresource.res::1``. This also helps to cache them when loaded."
msgstr ""

#: ../development/cpp/object_class.rst:324
msgid "`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/3.x/core/io/resource_saver.h>`__"
msgstr ""

#: ../<rst_epilog>:0
msgid "Translation status"
msgstr ""
